
Final_project_MT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004168  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011e  00800060  00004168  000041fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  0080017e  0080017e  0000431a  2**0
                  ALLOC
  3 .stab         00004500  00000000  00000000  0000431c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002146  00000000  00000000  0000881c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000a962  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000ab02  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000acf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000d0ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000e485  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000f65c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000f81c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000fb12  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00010480  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 d3 09 	jmp	0x13a6	; 0x13a6 <__vector_3>
      10:	0c 94 a0 09 	jmp	0x1340	; 0x1340 <__vector_4>
      14:	0c 94 3f 0b 	jmp	0x167e	; 0x167e <__vector_5>
      18:	0c 94 39 0a 	jmp	0x1472	; 0x1472 <__vector_6>
      1c:	0c 94 6c 0a 	jmp	0x14d8	; 0x14d8 <__vector_7>
      20:	0c 94 06 0a 	jmp	0x140c	; 0x140c <__vector_8>
      24:	0c 94 3a 09 	jmp	0x1274	; 0x1274 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 4a 07 	jmp	0xe94	; 0xe94 <__vector_11>
      30:	0c 94 7d 07 	jmp	0xefa	; 0xefa <__vector_12>
      34:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <__vector_13>
      38:	0c 94 4f 10 	jmp	0x209e	; 0x209e <__vector_14>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 6d 09 	jmp	0x12da	; 0x12da <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e6       	ldi	r30, 0x68	; 104
      68:	f1 e4       	ldi	r31, 0x41	; 65
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 37       	cpi	r26, 0x7E	; 126
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e7       	ldi	r26, 0x7E	; 126
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 38       	cpi	r26, 0x8C	; 140
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 31 20 	call	0x4062	; 0x4062 <main>
      8a:	0c 94 b2 20 	jmp	0x4164	; 0x4164 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 7b 20 	jmp	0x40f6	; 0x40f6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 e7       	ldi	r26, 0x75	; 117
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 97 20 	jmp	0x412e	; 0x412e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 87 20 	jmp	0x410e	; 0x410e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a3 20 	jmp	0x4146	; 0x4146 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 87 20 	jmp	0x410e	; 0x410e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a3 20 	jmp	0x4146	; 0x4146 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 7b 20 	jmp	0x40f6	; 0x40f6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	85 e7       	ldi	r24, 0x75	; 117
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 97 20 	jmp	0x412e	; 0x412e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 83 20 	jmp	0x4106	; 0x4106 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	65 e7       	ldi	r22, 0x75	; 117
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 9f 20 	jmp	0x413e	; 0x413e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 87 20 	jmp	0x410e	; 0x410e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 a3 20 	jmp	0x4146	; 0x4146 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 87 20 	jmp	0x410e	; 0x410e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 a3 20 	jmp	0x4146	; 0x4146 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 87 20 	jmp	0x410e	; 0x410e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 a3 20 	jmp	0x4146	; 0x4146 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 8b 20 	jmp	0x4116	; 0x4116 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 a7 20 	jmp	0x414e	; 0x414e <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 83 20 	jmp	0x4106	; 0x4106 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 9f 20 	jmp	0x413e	; 0x413e <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e3 58       	subi	r30, 0x83	; 131
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <__vector_13>:
 *******************************************************************************/

/*
 * [Description]: Here The ISR's For AVR_USART Module
 */
ISR( USART_TXC_vect){
     e2e:	1f 92       	push	r1
     e30:	0f 92       	push	r0
     e32:	0f b6       	in	r0, 0x3f	; 63
     e34:	0f 92       	push	r0
     e36:	11 24       	eor	r1, r1
     e38:	2f 93       	push	r18
     e3a:	3f 93       	push	r19
     e3c:	4f 93       	push	r20
     e3e:	5f 93       	push	r21
     e40:	6f 93       	push	r22
     e42:	7f 93       	push	r23
     e44:	8f 93       	push	r24
     e46:	9f 93       	push	r25
     e48:	af 93       	push	r26
     e4a:	bf 93       	push	r27
     e4c:	ef 93       	push	r30
     e4e:	ff 93       	push	r31
     e50:	df 93       	push	r29
     e52:	cf 93       	push	r28
     e54:	cd b7       	in	r28, 0x3d	; 61
     e56:	de b7       	in	r29, 0x3e	; 62
	 /* Call the Call Back function in the application after the Event is Occur */

		if(g_USART_Ptr_To_Fun != NULL_PTR){
     e58:	80 91 7e 01 	lds	r24, 0x017E
     e5c:	90 91 7f 01 	lds	r25, 0x017F
     e60:	00 97       	sbiw	r24, 0x00	; 0
     e62:	29 f0       	breq	.+10     	; 0xe6e <__vector_13+0x40>
			/* This is called --> Call Back Notification */
			/* another method to call the function using pointer to function g_Ptr_To_Fun_0(); */
			(g_USART_Ptr_To_Fun)();
     e64:	e0 91 7e 01 	lds	r30, 0x017E
     e68:	f0 91 7f 01 	lds	r31, 0x017F
     e6c:	09 95       	icall
		}
}
     e6e:	cf 91       	pop	r28
     e70:	df 91       	pop	r29
     e72:	ff 91       	pop	r31
     e74:	ef 91       	pop	r30
     e76:	bf 91       	pop	r27
     e78:	af 91       	pop	r26
     e7a:	9f 91       	pop	r25
     e7c:	8f 91       	pop	r24
     e7e:	7f 91       	pop	r23
     e80:	6f 91       	pop	r22
     e82:	5f 91       	pop	r21
     e84:	4f 91       	pop	r20
     e86:	3f 91       	pop	r19
     e88:	2f 91       	pop	r18
     e8a:	0f 90       	pop	r0
     e8c:	0f be       	out	0x3f, r0	; 63
     e8e:	0f 90       	pop	r0
     e90:	1f 90       	pop	r1
     e92:	18 95       	reti

00000e94 <__vector_11>:

ISR(USART_RXC_vect){
     e94:	1f 92       	push	r1
     e96:	0f 92       	push	r0
     e98:	0f b6       	in	r0, 0x3f	; 63
     e9a:	0f 92       	push	r0
     e9c:	11 24       	eor	r1, r1
     e9e:	2f 93       	push	r18
     ea0:	3f 93       	push	r19
     ea2:	4f 93       	push	r20
     ea4:	5f 93       	push	r21
     ea6:	6f 93       	push	r22
     ea8:	7f 93       	push	r23
     eaa:	8f 93       	push	r24
     eac:	9f 93       	push	r25
     eae:	af 93       	push	r26
     eb0:	bf 93       	push	r27
     eb2:	ef 93       	push	r30
     eb4:	ff 93       	push	r31
     eb6:	df 93       	push	r29
     eb8:	cf 93       	push	r28
     eba:	cd b7       	in	r28, 0x3d	; 61
     ebc:	de b7       	in	r29, 0x3e	; 62
	 /* Call the Call Back function in the application after the Event is Occur */

			if(g_USART_Ptr_To_Fun != NULL_PTR){
     ebe:	80 91 7e 01 	lds	r24, 0x017E
     ec2:	90 91 7f 01 	lds	r25, 0x017F
     ec6:	00 97       	sbiw	r24, 0x00	; 0
     ec8:	29 f0       	breq	.+10     	; 0xed4 <__vector_11+0x40>
				/* This is called --> Call Back Notification */
				/* another method to call the function using pointer to function g_Ptr_To_Fun_0(); */
				(g_USART_Ptr_To_Fun)();
     eca:	e0 91 7e 01 	lds	r30, 0x017E
     ece:	f0 91 7f 01 	lds	r31, 0x017F
     ed2:	09 95       	icall
			}
}
     ed4:	cf 91       	pop	r28
     ed6:	df 91       	pop	r29
     ed8:	ff 91       	pop	r31
     eda:	ef 91       	pop	r30
     edc:	bf 91       	pop	r27
     ede:	af 91       	pop	r26
     ee0:	9f 91       	pop	r25
     ee2:	8f 91       	pop	r24
     ee4:	7f 91       	pop	r23
     ee6:	6f 91       	pop	r22
     ee8:	5f 91       	pop	r21
     eea:	4f 91       	pop	r20
     eec:	3f 91       	pop	r19
     eee:	2f 91       	pop	r18
     ef0:	0f 90       	pop	r0
     ef2:	0f be       	out	0x3f, r0	; 63
     ef4:	0f 90       	pop	r0
     ef6:	1f 90       	pop	r1
     ef8:	18 95       	reti

00000efa <__vector_12>:

ISR(USART_UDRE_vect){
     efa:	1f 92       	push	r1
     efc:	0f 92       	push	r0
     efe:	0f b6       	in	r0, 0x3f	; 63
     f00:	0f 92       	push	r0
     f02:	11 24       	eor	r1, r1
     f04:	2f 93       	push	r18
     f06:	3f 93       	push	r19
     f08:	4f 93       	push	r20
     f0a:	5f 93       	push	r21
     f0c:	6f 93       	push	r22
     f0e:	7f 93       	push	r23
     f10:	8f 93       	push	r24
     f12:	9f 93       	push	r25
     f14:	af 93       	push	r26
     f16:	bf 93       	push	r27
     f18:	ef 93       	push	r30
     f1a:	ff 93       	push	r31
     f1c:	df 93       	push	r29
     f1e:	cf 93       	push	r28
     f20:	cd b7       	in	r28, 0x3d	; 61
     f22:	de b7       	in	r29, 0x3e	; 62
	 /* Call the Call Back function in the application after the Event is Occur */

			if(g_USART_Ptr_To_Fun != NULL_PTR){
     f24:	80 91 7e 01 	lds	r24, 0x017E
     f28:	90 91 7f 01 	lds	r25, 0x017F
     f2c:	00 97       	sbiw	r24, 0x00	; 0
     f2e:	29 f0       	breq	.+10     	; 0xf3a <__vector_12+0x40>
				/* This is called --> Call Back Notification */
				/* another method to call the function using pointer to function g_Ptr_To_Fun_0(); */
				(g_USART_Ptr_To_Fun)();
     f30:	e0 91 7e 01 	lds	r30, 0x017E
     f34:	f0 91 7f 01 	lds	r31, 0x017F
     f38:	09 95       	icall
			}
}
     f3a:	cf 91       	pop	r28
     f3c:	df 91       	pop	r29
     f3e:	ff 91       	pop	r31
     f40:	ef 91       	pop	r30
     f42:	bf 91       	pop	r27
     f44:	af 91       	pop	r26
     f46:	9f 91       	pop	r25
     f48:	8f 91       	pop	r24
     f4a:	7f 91       	pop	r23
     f4c:	6f 91       	pop	r22
     f4e:	5f 91       	pop	r21
     f50:	4f 91       	pop	r20
     f52:	3f 91       	pop	r19
     f54:	2f 91       	pop	r18
     f56:	0f 90       	pop	r0
     f58:	0f be       	out	0x3f, r0	; 63
     f5a:	0f 90       	pop	r0
     f5c:	1f 90       	pop	r1
     f5e:	18 95       	reti

00000f60 <USART_Init>:
 * [IN]    : Baud Rate
 * [OUT]   : void
 * [Args]  : uint32
 * [RUTURN]: Void
 */
void USART_Init(uint32 Baud_Rate){
     f60:	df 93       	push	r29
     f62:	cf 93       	push	r28
     f64:	00 d0       	rcall	.+0      	; 0xf66 <USART_Init+0x6>
     f66:	00 d0       	rcall	.+0      	; 0xf68 <USART_Init+0x8>
     f68:	00 d0       	rcall	.+0      	; 0xf6a <USART_Init+0xa>
     f6a:	cd b7       	in	r28, 0x3d	; 61
     f6c:	de b7       	in	r29, 0x3e	; 62
     f6e:	6b 83       	std	Y+3, r22	; 0x03
     f70:	7c 83       	std	Y+4, r23	; 0x04
     f72:	8d 83       	std	Y+5, r24	; 0x05
     f74:	9e 83       	std	Y+6, r25	; 0x06
	uint16 ubrr_value = 0;
     f76:	1a 82       	std	Y+2, r1	; 0x02
     f78:	19 82       	std	Y+1, r1	; 0x01
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
     f7a:	eb e2       	ldi	r30, 0x2B	; 43
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	82 e0       	ldi	r24, 0x02	; 2
     f80:	80 83       	st	Z, r24
		 * RXEN  = 1 Receiver Enable
		 * TXEN  = 1 Transmitter Enable
		 * UCSZ2 = 0 For 8-bit data mode
		 * RXB8 & TXB8 not used for 8-bit data mode
		 ***********************************************************************/
	SET_BIT(UCSRB,RXEN);
     f82:	aa e2       	ldi	r26, 0x2A	; 42
     f84:	b0 e0       	ldi	r27, 0x00	; 0
     f86:	ea e2       	ldi	r30, 0x2A	; 42
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	80 61       	ori	r24, 0x10	; 16
     f8e:	8c 93       	st	X, r24
	SET_BIT(UCSRB,TXEN);
     f90:	aa e2       	ldi	r26, 0x2A	; 42
     f92:	b0 e0       	ldi	r27, 0x00	; 0
     f94:	ea e2       	ldi	r30, 0x2A	; 42
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	88 60       	ori	r24, 0x08	; 8
     f9c:	8c 93       	st	X, r24
		 * UPM1:0  = 00 Disable parity bit
		 * USBS    = 0 One stop bit
		 * UCSZ1:0 = 11 For 8-bit data mode
		 * UCPOL   = 0 Used with the Synchronous operation only
		 ***********************************************************************/
	SET_BIT(UCSRC,URSEL);
     f9e:	a0 e4       	ldi	r26, 0x40	; 64
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	e0 e4       	ldi	r30, 0x40	; 64
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	80 68       	ori	r24, 0x80	; 128
     faa:	8c 93       	st	X, r24
	SET_BIT(UCSRC,USART_6_bit_CharSize_msk);
#elif USART_CharSize_Selector == USART_7_bit_CharSize_msk
	SET_BIT(UCSRC,USART_7_bit_CharSize_msk);
#elif USART_CharSize_Selector == USART_8_bit_CharSize_msk
	//SET_BIT(UCSRC,USART_8_bit_CharSize_msk);
	SET_BIT(UCSRC,UCSZ0);
     fac:	a0 e4       	ldi	r26, 0x40	; 64
     fae:	b0 e0       	ldi	r27, 0x00	; 0
     fb0:	e0 e4       	ldi	r30, 0x40	; 64
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	80 81       	ld	r24, Z
     fb6:	82 60       	ori	r24, 0x02	; 2
     fb8:	8c 93       	st	X, r24
	SET_BIT(UCSRC,UCSZ1);
     fba:	a0 e4       	ldi	r26, 0x40	; 64
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	e0 e4       	ldi	r30, 0x40	; 64
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	84 60       	ori	r24, 0x04	; 4
     fc6:	8c 93       	st	X, r24
	SET_BIT(UCSRC,USART_TX_Falling_RX_Rising_msk);
#endif


	/* Calculate the UBRR register value */
		ubrr_value = (uint16)(((F_CPU / (Baud_Rate * 8UL))) - 1);
     fc8:	8b 81       	ldd	r24, Y+3	; 0x03
     fca:	9c 81       	ldd	r25, Y+4	; 0x04
     fcc:	ad 81       	ldd	r26, Y+5	; 0x05
     fce:	be 81       	ldd	r27, Y+6	; 0x06
     fd0:	88 0f       	add	r24, r24
     fd2:	99 1f       	adc	r25, r25
     fd4:	aa 1f       	adc	r26, r26
     fd6:	bb 1f       	adc	r27, r27
     fd8:	88 0f       	add	r24, r24
     fda:	99 1f       	adc	r25, r25
     fdc:	aa 1f       	adc	r26, r26
     fde:	bb 1f       	adc	r27, r27
     fe0:	88 0f       	add	r24, r24
     fe2:	99 1f       	adc	r25, r25
     fe4:	aa 1f       	adc	r26, r26
     fe6:	bb 1f       	adc	r27, r27
     fe8:	9c 01       	movw	r18, r24
     fea:	ad 01       	movw	r20, r26
     fec:	80 e0       	ldi	r24, 0x00	; 0
     fee:	92 e1       	ldi	r25, 0x12	; 18
     ff0:	aa e7       	ldi	r26, 0x7A	; 122
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
     ff4:	bc 01       	movw	r22, r24
     ff6:	cd 01       	movw	r24, r26
     ff8:	0e 94 59 20 	call	0x40b2	; 0x40b2 <__udivmodsi4>
     ffc:	da 01       	movw	r26, r20
     ffe:	c9 01       	movw	r24, r18
    1000:	01 97       	sbiw	r24, 0x01	; 1
    1002:	9a 83       	std	Y+2, r25	; 0x02
    1004:	89 83       	std	Y+1, r24	; 0x01

		/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
		UBRRH = ubrr_value>>8;
    1006:	e0 e4       	ldi	r30, 0x40	; 64
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	89 81       	ldd	r24, Y+1	; 0x01
    100c:	9a 81       	ldd	r25, Y+2	; 0x02
    100e:	89 2f       	mov	r24, r25
    1010:	99 27       	eor	r25, r25
    1012:	80 83       	st	Z, r24
		UBRRL = ubrr_value;
    1014:	e9 e2       	ldi	r30, 0x29	; 41
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	89 81       	ldd	r24, Y+1	; 0x01
    101a:	80 83       	st	Z, r24
}
    101c:	26 96       	adiw	r28, 0x06	; 6
    101e:	0f b6       	in	r0, 0x3f	; 63
    1020:	f8 94       	cli
    1022:	de bf       	out	0x3e, r29	; 62
    1024:	0f be       	out	0x3f, r0	; 63
    1026:	cd bf       	out	0x3d, r28	; 61
    1028:	cf 91       	pop	r28
    102a:	df 91       	pop	r29
    102c:	08 95       	ret

0000102e <USART_SendByte>:
 * [IN]    : Data
 * [OUT]   : void
 * [Args]  : uint8
 * [RUTURN]: Void
 */
void USART_SendByte(const uint8 Data){
    102e:	df 93       	push	r29
    1030:	cf 93       	push	r28
    1032:	0f 92       	push	r0
    1034:	cd b7       	in	r28, 0x3d	; 61
    1036:	de b7       	in	r29, 0x3e	; 62
    1038:	89 83       	std	Y+1, r24	; 0x01
	/*
		 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
		 * transmitting a new byte so wait until this flag is set to one
		 */
		while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    103a:	eb e2       	ldi	r30, 0x2B	; 43
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	88 2f       	mov	r24, r24
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	80 72       	andi	r24, 0x20	; 32
    1046:	90 70       	andi	r25, 0x00	; 0
    1048:	00 97       	sbiw	r24, 0x00	; 0
    104a:	b9 f3       	breq	.-18     	; 0x103a <USART_SendByte+0xc>

		/*
		 * Put the required data in the UDR register and it also clear the UDRE flag as
		 * the UDR register is not empty now
		 */
		UDR = Data;
    104c:	ec e2       	ldi	r30, 0x2C	; 44
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	89 81       	ldd	r24, Y+1	; 0x01
    1052:	80 83       	st	Z, r24
		/************************* Another Method *************************
		UDR = data;
		while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
		SET_BIT(UCSRA,TXC); // Clear the TXC flag
		*******************************************************************/
}
    1054:	0f 90       	pop	r0
    1056:	cf 91       	pop	r28
    1058:	df 91       	pop	r29
    105a:	08 95       	ret

0000105c <USART_ReceiveByte>:
 * [IN]    : void
 * [OUT]   : data that received from other device
 * [Args]  : void
 * [RUTURN]: uint16
 */
uint16 USART_ReceiveByte(void){
    105c:	df 93       	push	r29
    105e:	cf 93       	push	r28
    1060:	cd b7       	in	r28, 0x3d	; 61
    1062:	de b7       	in	r29, 0x3e	; 62

	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
		while(BIT_IS_CLEAR(UCSRA,RXC)){}
    1064:	eb e2       	ldi	r30, 0x2B	; 43
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	88 23       	and	r24, r24
    106c:	dc f7       	brge	.-10     	; 0x1064 <USART_ReceiveByte+0x8>

		/*
		 * Read the received data from the Rx buffer (UDR)
		 * The RXC flag will be cleared after read the data
		 */
	    return UDR;
    106e:	ec e2       	ldi	r30, 0x2C	; 44
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
    1074:	88 2f       	mov	r24, r24
    1076:	90 e0       	ldi	r25, 0x00	; 0
}
    1078:	cf 91       	pop	r28
    107a:	df 91       	pop	r29
    107c:	08 95       	ret

0000107e <USART_SendString>:
 * [IN]    : string
 * [OUT]   : void
 * [Args]  : pointer to char
 * [RUTURN]: void
 */
void USART_SendString(const uint8 *Str){
    107e:	df 93       	push	r29
    1080:	cf 93       	push	r28
    1082:	00 d0       	rcall	.+0      	; 0x1084 <USART_SendString+0x6>
    1084:	0f 92       	push	r0
    1086:	cd b7       	in	r28, 0x3d	; 61
    1088:	de b7       	in	r29, 0x3e	; 62
    108a:	9b 83       	std	Y+3, r25	; 0x03
    108c:	8a 83       	std	Y+2, r24	; 0x02

	     uint8 i = 0;
    108e:	19 82       	std	Y+1, r1	; 0x01
    1090:	0e c0       	rjmp	.+28     	; 0x10ae <USART_SendString+0x30>

		/* Send the whole string */
		while(Str[i] != '\0')
		{
			USART_SendByte(Str[i]);
    1092:	89 81       	ldd	r24, Y+1	; 0x01
    1094:	28 2f       	mov	r18, r24
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	8a 81       	ldd	r24, Y+2	; 0x02
    109a:	9b 81       	ldd	r25, Y+3	; 0x03
    109c:	fc 01       	movw	r30, r24
    109e:	e2 0f       	add	r30, r18
    10a0:	f3 1f       	adc	r31, r19
    10a2:	80 81       	ld	r24, Z
    10a4:	0e 94 17 08 	call	0x102e	; 0x102e <USART_SendByte>
			i++;
    10a8:	89 81       	ldd	r24, Y+1	; 0x01
    10aa:	8f 5f       	subi	r24, 0xFF	; 255
    10ac:	89 83       	std	Y+1, r24	; 0x01
void USART_SendString(const uint8 *Str){

	     uint8 i = 0;

		/* Send the whole string */
		while(Str[i] != '\0')
    10ae:	89 81       	ldd	r24, Y+1	; 0x01
    10b0:	28 2f       	mov	r18, r24
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	8a 81       	ldd	r24, Y+2	; 0x02
    10b6:	9b 81       	ldd	r25, Y+3	; 0x03
    10b8:	fc 01       	movw	r30, r24
    10ba:	e2 0f       	add	r30, r18
    10bc:	f3 1f       	adc	r31, r19
    10be:	80 81       	ld	r24, Z
    10c0:	88 23       	and	r24, r24
    10c2:	39 f7       	brne	.-50     	; 0x1092 <USART_SendString+0x14>
			UART_sendByte(*Str);
			Str++;
		}

		*******************************************************************/
}
    10c4:	0f 90       	pop	r0
    10c6:	0f 90       	pop	r0
    10c8:	0f 90       	pop	r0
    10ca:	cf 91       	pop	r28
    10cc:	df 91       	pop	r29
    10ce:	08 95       	ret

000010d0 <USART_ReceiveString>:
 * [IN]    : String
 * [OUT]   : void
 * [Args]  : pointer to char
 * [RUTURN]: void
 */
void USART_ReceiveString(uint8 *Str){
    10d0:	0f 93       	push	r16
    10d2:	1f 93       	push	r17
    10d4:	df 93       	push	r29
    10d6:	cf 93       	push	r28
    10d8:	00 d0       	rcall	.+0      	; 0x10da <USART_ReceiveString+0xa>
    10da:	0f 92       	push	r0
    10dc:	cd b7       	in	r28, 0x3d	; 61
    10de:	de b7       	in	r29, 0x3e	; 62
    10e0:	9b 83       	std	Y+3, r25	; 0x03
    10e2:	8a 83       	std	Y+2, r24	; 0x02

	    uint8 i = 0;
    10e4:	19 82       	std	Y+1, r1	; 0x01

		/* Receive the first byte */
		Str[i] = USART_ReceiveByte();
    10e6:	89 81       	ldd	r24, Y+1	; 0x01
    10e8:	28 2f       	mov	r18, r24
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	8a 81       	ldd	r24, Y+2	; 0x02
    10ee:	9b 81       	ldd	r25, Y+3	; 0x03
    10f0:	8c 01       	movw	r16, r24
    10f2:	02 0f       	add	r16, r18
    10f4:	13 1f       	adc	r17, r19
    10f6:	0e 94 2e 08 	call	0x105c	; 0x105c <USART_ReceiveByte>
    10fa:	f8 01       	movw	r30, r16
    10fc:	80 83       	st	Z, r24
    10fe:	0f c0       	rjmp	.+30     	; 0x111e <USART_ReceiveString+0x4e>

		/* Receive the whole string until the '#' */
		while(Str[i] != '#')
		{
			i++;
    1100:	89 81       	ldd	r24, Y+1	; 0x01
    1102:	8f 5f       	subi	r24, 0xFF	; 255
    1104:	89 83       	std	Y+1, r24	; 0x01
			Str[i] = USART_ReceiveByte();
    1106:	89 81       	ldd	r24, Y+1	; 0x01
    1108:	28 2f       	mov	r18, r24
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	8a 81       	ldd	r24, Y+2	; 0x02
    110e:	9b 81       	ldd	r25, Y+3	; 0x03
    1110:	8c 01       	movw	r16, r24
    1112:	02 0f       	add	r16, r18
    1114:	13 1f       	adc	r17, r19
    1116:	0e 94 2e 08 	call	0x105c	; 0x105c <USART_ReceiveByte>
    111a:	f8 01       	movw	r30, r16
    111c:	80 83       	st	Z, r24

		/* Receive the first byte */
		Str[i] = USART_ReceiveByte();

		/* Receive the whole string until the '#' */
		while(Str[i] != '#')
    111e:	89 81       	ldd	r24, Y+1	; 0x01
    1120:	28 2f       	mov	r18, r24
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	8a 81       	ldd	r24, Y+2	; 0x02
    1126:	9b 81       	ldd	r25, Y+3	; 0x03
    1128:	fc 01       	movw	r30, r24
    112a:	e2 0f       	add	r30, r18
    112c:	f3 1f       	adc	r31, r19
    112e:	80 81       	ld	r24, Z
    1130:	83 32       	cpi	r24, 0x23	; 35
    1132:	31 f7       	brne	.-52     	; 0x1100 <USART_ReceiveString+0x30>
			i++;
			Str[i] = USART_ReceiveByte();
		}

		/* After receiving the whole string plus the '#', replace the '#' with '\0' */
		Str[i] = '\0';
    1134:	89 81       	ldd	r24, Y+1	; 0x01
    1136:	28 2f       	mov	r18, r24
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	8a 81       	ldd	r24, Y+2	; 0x02
    113c:	9b 81       	ldd	r25, Y+3	; 0x03
    113e:	fc 01       	movw	r30, r24
    1140:	e2 0f       	add	r30, r18
    1142:	f3 1f       	adc	r31, r19
    1144:	10 82       	st	Z, r1
}
    1146:	0f 90       	pop	r0
    1148:	0f 90       	pop	r0
    114a:	0f 90       	pop	r0
    114c:	cf 91       	pop	r28
    114e:	df 91       	pop	r29
    1150:	1f 91       	pop	r17
    1152:	0f 91       	pop	r16
    1154:	08 95       	ret

00001156 <USART_SetCallBack>:
 * [IN]    : take address function required to call
 * [OUT]   : void
 * [Args]  : pointer to fun
 * [RUTURN]: void
 */
void USART_SetCallBack(void(*ptr_to_fun)(void)){
    1156:	df 93       	push	r29
    1158:	cf 93       	push	r28
    115a:	00 d0       	rcall	.+0      	; 0x115c <USART_SetCallBack+0x6>
    115c:	cd b7       	in	r28, 0x3d	; 61
    115e:	de b7       	in	r29, 0x3e	; 62
    1160:	9a 83       	std	Y+2, r25	; 0x02
    1162:	89 83       	std	Y+1, r24	; 0x01

	g_USART_Ptr_To_Fun = ptr_to_fun ;
    1164:	89 81       	ldd	r24, Y+1	; 0x01
    1166:	9a 81       	ldd	r25, Y+2	; 0x02
    1168:	90 93 7f 01 	sts	0x017F, r25
    116c:	80 93 7e 01 	sts	0x017E, r24
}
    1170:	0f 90       	pop	r0
    1172:	0f 90       	pop	r0
    1174:	cf 91       	pop	r28
    1176:	df 91       	pop	r29
    1178:	08 95       	ret

0000117a <TWI_init>:

#include "../../utils/common_macros.h"
#include <avr/io.h>

void TWI_init(void)
{
    117a:	df 93       	push	r29
    117c:	cf 93       	push	r28
    117e:	cd b7       	in	r28, 0x3d	; 61
    1180:	de b7       	in	r29, 0x3e	; 62
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = 0x02;
    1182:	e0 e2       	ldi	r30, 0x20	; 32
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	82 e0       	ldi	r24, 0x02	; 2
    1188:	80 83       	st	Z, r24
	TWSR = 0x00;
    118a:	e1 e2       	ldi	r30, 0x21	; 33
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = 0b00000010; // my address = 0x01 :) 
    1190:	e2 e2       	ldi	r30, 0x22	; 34
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	82 e0       	ldi	r24, 0x02	; 2
    1196:	80 83       	st	Z, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    1198:	e6 e5       	ldi	r30, 0x56	; 86
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	84 e0       	ldi	r24, 0x04	; 4
    119e:	80 83       	st	Z, r24
}
    11a0:	cf 91       	pop	r28
    11a2:	df 91       	pop	r29
    11a4:	08 95       	ret

000011a6 <TWI_start>:

void TWI_start(void)
{
    11a6:	df 93       	push	r29
    11a8:	cf 93       	push	r28
    11aa:	cd b7       	in	r28, 0x3d	; 61
    11ac:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    11ae:	e6 e5       	ldi	r30, 0x56	; 86
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	84 ea       	ldi	r24, 0xA4	; 164
    11b4:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    11b6:	e6 e5       	ldi	r30, 0x56	; 86
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	88 23       	and	r24, r24
    11be:	dc f7       	brge	.-10     	; 0x11b6 <TWI_start+0x10>
}
    11c0:	cf 91       	pop	r28
    11c2:	df 91       	pop	r29
    11c4:	08 95       	ret

000011c6 <TWI_stop>:

void TWI_stop(void)
{
    11c6:	df 93       	push	r29
    11c8:	cf 93       	push	r28
    11ca:	cd b7       	in	r28, 0x3d	; 61
    11cc:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    11ce:	e6 e5       	ldi	r30, 0x56	; 86
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	84 e9       	ldi	r24, 0x94	; 148
    11d4:	80 83       	st	Z, r24
}
    11d6:	cf 91       	pop	r28
    11d8:	df 91       	pop	r29
    11da:	08 95       	ret

000011dc <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    11dc:	df 93       	push	r29
    11de:	cf 93       	push	r28
    11e0:	0f 92       	push	r0
    11e2:	cd b7       	in	r28, 0x3d	; 61
    11e4:	de b7       	in	r29, 0x3e	; 62
    11e6:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    11e8:	e3 e2       	ldi	r30, 0x23	; 35
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	89 81       	ldd	r24, Y+1	; 0x01
    11ee:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    11f0:	e6 e5       	ldi	r30, 0x56	; 86
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	84 e8       	ldi	r24, 0x84	; 132
    11f6:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    11f8:	e6 e5       	ldi	r30, 0x56	; 86
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	88 23       	and	r24, r24
    1200:	dc f7       	brge	.-10     	; 0x11f8 <TWI_writeByte+0x1c>
}
    1202:	0f 90       	pop	r0
    1204:	cf 91       	pop	r28
    1206:	df 91       	pop	r29
    1208:	08 95       	ret

0000120a <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    120a:	df 93       	push	r29
    120c:	cf 93       	push	r28
    120e:	cd b7       	in	r28, 0x3d	; 61
    1210:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1212:	e6 e5       	ldi	r30, 0x56	; 86
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	84 ec       	ldi	r24, 0xC4	; 196
    1218:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    121a:	e6 e5       	ldi	r30, 0x56	; 86
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	88 23       	and	r24, r24
    1222:	dc f7       	brge	.-10     	; 0x121a <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    1224:	e3 e2       	ldi	r30, 0x23	; 35
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	80 81       	ld	r24, Z
}
    122a:	cf 91       	pop	r28
    122c:	df 91       	pop	r29
    122e:	08 95       	ret

00001230 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    1230:	df 93       	push	r29
    1232:	cf 93       	push	r28
    1234:	cd b7       	in	r28, 0x3d	; 61
    1236:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1238:	e6 e5       	ldi	r30, 0x56	; 86
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	84 e8       	ldi	r24, 0x84	; 132
    123e:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1240:	e6 e5       	ldi	r30, 0x56	; 86
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	88 23       	and	r24, r24
    1248:	dc f7       	brge	.-10     	; 0x1240 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    124a:	e3 e2       	ldi	r30, 0x23	; 35
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	80 81       	ld	r24, Z
}
    1250:	cf 91       	pop	r28
    1252:	df 91       	pop	r29
    1254:	08 95       	ret

00001256 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    1256:	df 93       	push	r29
    1258:	cf 93       	push	r28
    125a:	0f 92       	push	r0
    125c:	cd b7       	in	r28, 0x3d	; 61
    125e:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    1260:	e1 e2       	ldi	r30, 0x21	; 33
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	80 81       	ld	r24, Z
    1266:	88 7f       	andi	r24, 0xF8	; 248
    1268:	89 83       	std	Y+1, r24	; 0x01
    return status;
    126a:	89 81       	ldd	r24, Y+1	; 0x01
}
    126c:	0f 90       	pop	r0
    126e:	cf 91       	pop	r28
    1270:	df 91       	pop	r29
    1272:	08 95       	ret

00001274 <__vector_9>:

/*
 * [Description]: Here The ISR's specific For TIMER0
 */

ISR(TIMER0_OVF_vect){
    1274:	1f 92       	push	r1
    1276:	0f 92       	push	r0
    1278:	0f b6       	in	r0, 0x3f	; 63
    127a:	0f 92       	push	r0
    127c:	11 24       	eor	r1, r1
    127e:	2f 93       	push	r18
    1280:	3f 93       	push	r19
    1282:	4f 93       	push	r20
    1284:	5f 93       	push	r21
    1286:	6f 93       	push	r22
    1288:	7f 93       	push	r23
    128a:	8f 93       	push	r24
    128c:	9f 93       	push	r25
    128e:	af 93       	push	r26
    1290:	bf 93       	push	r27
    1292:	ef 93       	push	r30
    1294:	ff 93       	push	r31
    1296:	df 93       	push	r29
    1298:	cf 93       	push	r28
    129a:	cd b7       	in	r28, 0x3d	; 61
    129c:	de b7       	in	r29, 0x3e	; 62
	 /* Call the Call Back function in the application after the Event is Occur */

	if(g_Ptr_To_Fun_0 != NULL_PTR){
    129e:	80 91 80 01 	lds	r24, 0x0180
    12a2:	90 91 81 01 	lds	r25, 0x0181
    12a6:	00 97       	sbiw	r24, 0x00	; 0
    12a8:	29 f0       	breq	.+10     	; 0x12b4 <__vector_9+0x40>
		/* This is called --> Call Back Notification */
		/* another method to call the function using pointer to function g_Ptr_To_Fun_0(); */
		(g_Ptr_To_Fun_0)();
    12aa:	e0 91 80 01 	lds	r30, 0x0180
    12ae:	f0 91 81 01 	lds	r31, 0x0181
    12b2:	09 95       	icall
	}
}
    12b4:	cf 91       	pop	r28
    12b6:	df 91       	pop	r29
    12b8:	ff 91       	pop	r31
    12ba:	ef 91       	pop	r30
    12bc:	bf 91       	pop	r27
    12be:	af 91       	pop	r26
    12c0:	9f 91       	pop	r25
    12c2:	8f 91       	pop	r24
    12c4:	7f 91       	pop	r23
    12c6:	6f 91       	pop	r22
    12c8:	5f 91       	pop	r21
    12ca:	4f 91       	pop	r20
    12cc:	3f 91       	pop	r19
    12ce:	2f 91       	pop	r18
    12d0:	0f 90       	pop	r0
    12d2:	0f be       	out	0x3f, r0	; 63
    12d4:	0f 90       	pop	r0
    12d6:	1f 90       	pop	r1
    12d8:	18 95       	reti

000012da <__vector_19>:

ISR(TIMER0_COMP_vect){
    12da:	1f 92       	push	r1
    12dc:	0f 92       	push	r0
    12de:	0f b6       	in	r0, 0x3f	; 63
    12e0:	0f 92       	push	r0
    12e2:	11 24       	eor	r1, r1
    12e4:	2f 93       	push	r18
    12e6:	3f 93       	push	r19
    12e8:	4f 93       	push	r20
    12ea:	5f 93       	push	r21
    12ec:	6f 93       	push	r22
    12ee:	7f 93       	push	r23
    12f0:	8f 93       	push	r24
    12f2:	9f 93       	push	r25
    12f4:	af 93       	push	r26
    12f6:	bf 93       	push	r27
    12f8:	ef 93       	push	r30
    12fa:	ff 93       	push	r31
    12fc:	df 93       	push	r29
    12fe:	cf 93       	push	r28
    1300:	cd b7       	in	r28, 0x3d	; 61
    1302:	de b7       	in	r29, 0x3e	; 62
	if(g_Ptr_To_Fun_0 != NULL_PTR){
    1304:	80 91 80 01 	lds	r24, 0x0180
    1308:	90 91 81 01 	lds	r25, 0x0181
    130c:	00 97       	sbiw	r24, 0x00	; 0
    130e:	29 f0       	breq	.+10     	; 0x131a <__vector_19+0x40>
		(g_Ptr_To_Fun_0)();
    1310:	e0 91 80 01 	lds	r30, 0x0180
    1314:	f0 91 81 01 	lds	r31, 0x0181
    1318:	09 95       	icall
	}
}
    131a:	cf 91       	pop	r28
    131c:	df 91       	pop	r29
    131e:	ff 91       	pop	r31
    1320:	ef 91       	pop	r30
    1322:	bf 91       	pop	r27
    1324:	af 91       	pop	r26
    1326:	9f 91       	pop	r25
    1328:	8f 91       	pop	r24
    132a:	7f 91       	pop	r23
    132c:	6f 91       	pop	r22
    132e:	5f 91       	pop	r21
    1330:	4f 91       	pop	r20
    1332:	3f 91       	pop	r19
    1334:	2f 91       	pop	r18
    1336:	0f 90       	pop	r0
    1338:	0f be       	out	0x3f, r0	; 63
    133a:	0f 90       	pop	r0
    133c:	1f 90       	pop	r1
    133e:	18 95       	reti

00001340 <__vector_4>:
/*******************************************************************************
 *                                 TIMER2_ISR
 *******************************************************************************/
ISR(TIMER2_OVF_vect){
    1340:	1f 92       	push	r1
    1342:	0f 92       	push	r0
    1344:	0f b6       	in	r0, 0x3f	; 63
    1346:	0f 92       	push	r0
    1348:	11 24       	eor	r1, r1
    134a:	2f 93       	push	r18
    134c:	3f 93       	push	r19
    134e:	4f 93       	push	r20
    1350:	5f 93       	push	r21
    1352:	6f 93       	push	r22
    1354:	7f 93       	push	r23
    1356:	8f 93       	push	r24
    1358:	9f 93       	push	r25
    135a:	af 93       	push	r26
    135c:	bf 93       	push	r27
    135e:	ef 93       	push	r30
    1360:	ff 93       	push	r31
    1362:	df 93       	push	r29
    1364:	cf 93       	push	r28
    1366:	cd b7       	in	r28, 0x3d	; 61
    1368:	de b7       	in	r29, 0x3e	; 62
	if(g_Ptr_To_Fun_2 != NULL_PTR){
    136a:	80 91 84 01 	lds	r24, 0x0184
    136e:	90 91 85 01 	lds	r25, 0x0185
    1372:	00 97       	sbiw	r24, 0x00	; 0
    1374:	29 f0       	breq	.+10     	; 0x1380 <__vector_4+0x40>
		(g_Ptr_To_Fun_2)();
    1376:	e0 91 84 01 	lds	r30, 0x0184
    137a:	f0 91 85 01 	lds	r31, 0x0185
    137e:	09 95       	icall
	}
}
    1380:	cf 91       	pop	r28
    1382:	df 91       	pop	r29
    1384:	ff 91       	pop	r31
    1386:	ef 91       	pop	r30
    1388:	bf 91       	pop	r27
    138a:	af 91       	pop	r26
    138c:	9f 91       	pop	r25
    138e:	8f 91       	pop	r24
    1390:	7f 91       	pop	r23
    1392:	6f 91       	pop	r22
    1394:	5f 91       	pop	r21
    1396:	4f 91       	pop	r20
    1398:	3f 91       	pop	r19
    139a:	2f 91       	pop	r18
    139c:	0f 90       	pop	r0
    139e:	0f be       	out	0x3f, r0	; 63
    13a0:	0f 90       	pop	r0
    13a2:	1f 90       	pop	r1
    13a4:	18 95       	reti

000013a6 <__vector_3>:

ISR(TIMER2_COMP_vect){
    13a6:	1f 92       	push	r1
    13a8:	0f 92       	push	r0
    13aa:	0f b6       	in	r0, 0x3f	; 63
    13ac:	0f 92       	push	r0
    13ae:	11 24       	eor	r1, r1
    13b0:	2f 93       	push	r18
    13b2:	3f 93       	push	r19
    13b4:	4f 93       	push	r20
    13b6:	5f 93       	push	r21
    13b8:	6f 93       	push	r22
    13ba:	7f 93       	push	r23
    13bc:	8f 93       	push	r24
    13be:	9f 93       	push	r25
    13c0:	af 93       	push	r26
    13c2:	bf 93       	push	r27
    13c4:	ef 93       	push	r30
    13c6:	ff 93       	push	r31
    13c8:	df 93       	push	r29
    13ca:	cf 93       	push	r28
    13cc:	cd b7       	in	r28, 0x3d	; 61
    13ce:	de b7       	in	r29, 0x3e	; 62
	if(g_Ptr_To_Fun_2 != NULL_PTR){
    13d0:	80 91 84 01 	lds	r24, 0x0184
    13d4:	90 91 85 01 	lds	r25, 0x0185
    13d8:	00 97       	sbiw	r24, 0x00	; 0
    13da:	29 f0       	breq	.+10     	; 0x13e6 <__vector_3+0x40>
		(g_Ptr_To_Fun_2)();
    13dc:	e0 91 84 01 	lds	r30, 0x0184
    13e0:	f0 91 85 01 	lds	r31, 0x0185
    13e4:	09 95       	icall
	}
}
    13e6:	cf 91       	pop	r28
    13e8:	df 91       	pop	r29
    13ea:	ff 91       	pop	r31
    13ec:	ef 91       	pop	r30
    13ee:	bf 91       	pop	r27
    13f0:	af 91       	pop	r26
    13f2:	9f 91       	pop	r25
    13f4:	8f 91       	pop	r24
    13f6:	7f 91       	pop	r23
    13f8:	6f 91       	pop	r22
    13fa:	5f 91       	pop	r21
    13fc:	4f 91       	pop	r20
    13fe:	3f 91       	pop	r19
    1400:	2f 91       	pop	r18
    1402:	0f 90       	pop	r0
    1404:	0f be       	out	0x3f, r0	; 63
    1406:	0f 90       	pop	r0
    1408:	1f 90       	pop	r1
    140a:	18 95       	reti

0000140c <__vector_8>:
/*******************************************************************************
 *                                 TIMER1_ISR
 *******************************************************************************/
ISR(TIMER1_OVF_vect){
    140c:	1f 92       	push	r1
    140e:	0f 92       	push	r0
    1410:	0f b6       	in	r0, 0x3f	; 63
    1412:	0f 92       	push	r0
    1414:	11 24       	eor	r1, r1
    1416:	2f 93       	push	r18
    1418:	3f 93       	push	r19
    141a:	4f 93       	push	r20
    141c:	5f 93       	push	r21
    141e:	6f 93       	push	r22
    1420:	7f 93       	push	r23
    1422:	8f 93       	push	r24
    1424:	9f 93       	push	r25
    1426:	af 93       	push	r26
    1428:	bf 93       	push	r27
    142a:	ef 93       	push	r30
    142c:	ff 93       	push	r31
    142e:	df 93       	push	r29
    1430:	cf 93       	push	r28
    1432:	cd b7       	in	r28, 0x3d	; 61
    1434:	de b7       	in	r29, 0x3e	; 62
	if(g_Ptr_To_Fun_1 != NULL_PTR){
    1436:	80 91 82 01 	lds	r24, 0x0182
    143a:	90 91 83 01 	lds	r25, 0x0183
    143e:	00 97       	sbiw	r24, 0x00	; 0
    1440:	29 f0       	breq	.+10     	; 0x144c <__vector_8+0x40>
		(g_Ptr_To_Fun_1)();
    1442:	e0 91 82 01 	lds	r30, 0x0182
    1446:	f0 91 83 01 	lds	r31, 0x0183
    144a:	09 95       	icall
	}
}
    144c:	cf 91       	pop	r28
    144e:	df 91       	pop	r29
    1450:	ff 91       	pop	r31
    1452:	ef 91       	pop	r30
    1454:	bf 91       	pop	r27
    1456:	af 91       	pop	r26
    1458:	9f 91       	pop	r25
    145a:	8f 91       	pop	r24
    145c:	7f 91       	pop	r23
    145e:	6f 91       	pop	r22
    1460:	5f 91       	pop	r21
    1462:	4f 91       	pop	r20
    1464:	3f 91       	pop	r19
    1466:	2f 91       	pop	r18
    1468:	0f 90       	pop	r0
    146a:	0f be       	out	0x3f, r0	; 63
    146c:	0f 90       	pop	r0
    146e:	1f 90       	pop	r1
    1470:	18 95       	reti

00001472 <__vector_6>:

ISR(TIMER1_COMPA_vect){
    1472:	1f 92       	push	r1
    1474:	0f 92       	push	r0
    1476:	0f b6       	in	r0, 0x3f	; 63
    1478:	0f 92       	push	r0
    147a:	11 24       	eor	r1, r1
    147c:	2f 93       	push	r18
    147e:	3f 93       	push	r19
    1480:	4f 93       	push	r20
    1482:	5f 93       	push	r21
    1484:	6f 93       	push	r22
    1486:	7f 93       	push	r23
    1488:	8f 93       	push	r24
    148a:	9f 93       	push	r25
    148c:	af 93       	push	r26
    148e:	bf 93       	push	r27
    1490:	ef 93       	push	r30
    1492:	ff 93       	push	r31
    1494:	df 93       	push	r29
    1496:	cf 93       	push	r28
    1498:	cd b7       	in	r28, 0x3d	; 61
    149a:	de b7       	in	r29, 0x3e	; 62
	if(g_Ptr_To_Fun_1 != NULL_PTR){
    149c:	80 91 82 01 	lds	r24, 0x0182
    14a0:	90 91 83 01 	lds	r25, 0x0183
    14a4:	00 97       	sbiw	r24, 0x00	; 0
    14a6:	29 f0       	breq	.+10     	; 0x14b2 <__vector_6+0x40>
		(g_Ptr_To_Fun_1)();
    14a8:	e0 91 82 01 	lds	r30, 0x0182
    14ac:	f0 91 83 01 	lds	r31, 0x0183
    14b0:	09 95       	icall
	}
}
    14b2:	cf 91       	pop	r28
    14b4:	df 91       	pop	r29
    14b6:	ff 91       	pop	r31
    14b8:	ef 91       	pop	r30
    14ba:	bf 91       	pop	r27
    14bc:	af 91       	pop	r26
    14be:	9f 91       	pop	r25
    14c0:	8f 91       	pop	r24
    14c2:	7f 91       	pop	r23
    14c4:	6f 91       	pop	r22
    14c6:	5f 91       	pop	r21
    14c8:	4f 91       	pop	r20
    14ca:	3f 91       	pop	r19
    14cc:	2f 91       	pop	r18
    14ce:	0f 90       	pop	r0
    14d0:	0f be       	out	0x3f, r0	; 63
    14d2:	0f 90       	pop	r0
    14d4:	1f 90       	pop	r1
    14d6:	18 95       	reti

000014d8 <__vector_7>:

ISR(TIMER1_COMPB_vect){
    14d8:	1f 92       	push	r1
    14da:	0f 92       	push	r0
    14dc:	0f b6       	in	r0, 0x3f	; 63
    14de:	0f 92       	push	r0
    14e0:	11 24       	eor	r1, r1
    14e2:	2f 93       	push	r18
    14e4:	3f 93       	push	r19
    14e6:	4f 93       	push	r20
    14e8:	5f 93       	push	r21
    14ea:	6f 93       	push	r22
    14ec:	7f 93       	push	r23
    14ee:	8f 93       	push	r24
    14f0:	9f 93       	push	r25
    14f2:	af 93       	push	r26
    14f4:	bf 93       	push	r27
    14f6:	ef 93       	push	r30
    14f8:	ff 93       	push	r31
    14fa:	df 93       	push	r29
    14fc:	cf 93       	push	r28
    14fe:	cd b7       	in	r28, 0x3d	; 61
    1500:	de b7       	in	r29, 0x3e	; 62
	if(g_Ptr_To_Fun_1 != NULL_PTR){
    1502:	80 91 82 01 	lds	r24, 0x0182
    1506:	90 91 83 01 	lds	r25, 0x0183
    150a:	00 97       	sbiw	r24, 0x00	; 0
    150c:	29 f0       	breq	.+10     	; 0x1518 <__vector_7+0x40>
		(g_Ptr_To_Fun_1)();
    150e:	e0 91 82 01 	lds	r30, 0x0182
    1512:	f0 91 83 01 	lds	r31, 0x0183
    1516:	09 95       	icall
	}
}
    1518:	cf 91       	pop	r28
    151a:	df 91       	pop	r29
    151c:	ff 91       	pop	r31
    151e:	ef 91       	pop	r30
    1520:	bf 91       	pop	r27
    1522:	af 91       	pop	r26
    1524:	9f 91       	pop	r25
    1526:	8f 91       	pop	r24
    1528:	7f 91       	pop	r23
    152a:	6f 91       	pop	r22
    152c:	5f 91       	pop	r21
    152e:	4f 91       	pop	r20
    1530:	3f 91       	pop	r19
    1532:	2f 91       	pop	r18
    1534:	0f 90       	pop	r0
    1536:	0f be       	out	0x3f, r0	; 63
    1538:	0f 90       	pop	r0
    153a:	1f 90       	pop	r1
    153c:	18 95       	reti

0000153e <TIMER_Init>:
#define TIMER1_OC1_SPECIAL_TOGGLE_FastPWM_msk        0x06
#define TIMER1_OC1_SPECIAL_TOGGLE_Phase_Correct_msk  0x07



void TIMER_Init(void){
    153e:	df 93       	push	r29
    1540:	cf 93       	push	r28
    1542:	cd b7       	in	r28, 0x3d	; 61
    1544:	de b7       	in	r29, 0x3e	; 62
	case TIMER1_Mode_Pwm_PhaseCorrect_10_bit_msk:
		CLEAR_BIT(TCCR1A,TIMER1_Mode_Clr_msk);
		SET_BIT(TCCR1A,TIMER1_Mode_Pwm_PhaseCorrect_10_bit_msk);
		break;
	case TIMER1_Mode_Ctc_msk:
		CLEAR_BIT(TCCR1A,TIMER1_Mode_Clr_msk);
    1546:	af e4       	ldi	r26, 0x4F	; 79
    1548:	b0 e0       	ldi	r27, 0x00	; 0
    154a:	ef e4       	ldi	r30, 0x4F	; 79
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	80 81       	ld	r24, Z
    1550:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TIMER1_Mode_Ctc_msk);
    1552:	af e4       	ldi	r26, 0x4F	; 79
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	ef e4       	ldi	r30, 0x4F	; 79
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	80 61       	ori	r24, 0x10	; 16
    155e:	8c 93       	st	X, r24
		break;
	}


#if TIMER1_Mode_Selector == TIMER1_Mode_Ctc_msk
	SET_BIT(TCCR1A,FOC1A);
    1560:	af e4       	ldi	r26, 0x4F	; 79
    1562:	b0 e0       	ldi	r27, 0x00	; 0
    1564:	ef e4       	ldi	r30, 0x4F	; 79
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	80 81       	ld	r24, Z
    156a:	88 60       	ori	r24, 0x08	; 8
    156c:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,FOC1B);
    156e:	af e4       	ldi	r26, 0x4F	; 79
    1570:	b0 e0       	ldi	r27, 0x00	; 0
    1572:	ef e4       	ldi	r30, 0x4F	; 79
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	80 81       	ld	r24, Z
    1578:	84 60       	ori	r24, 0x04	; 4
    157a:	8c 93       	st	X, r24
#if TIMER1_OC1A_Select == ENABLE
	SET_BIT(DDRD,PD5);
    157c:	a1 e3       	ldi	r26, 0x31	; 49
    157e:	b0 e0       	ldi	r27, 0x00	; 0
    1580:	e1 e3       	ldi	r30, 0x31	; 49
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	80 81       	ld	r24, Z
    1586:	80 62       	ori	r24, 0x20	; 32
    1588:	8c 93       	st	X, r24
#if TIMER1_OC1_Behavior_Selector == TIMER1_OC1_TOGGLE_msk
	SET_BIT(TCCR1A,COM1A0);
    158a:	af e4       	ldi	r26, 0x4F	; 79
    158c:	b0 e0       	ldi	r27, 0x00	; 0
    158e:	ef e4       	ldi	r30, 0x4F	; 79
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	80 81       	ld	r24, Z
    1594:	80 64       	ori	r24, 0x40	; 64
    1596:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,COM1A1);
#endif
#endif

#if TIMER1_OC1B_Select == ENABLE
	SET_BIT(DDRD,PD4);
    1598:	a1 e3       	ldi	r26, 0x31	; 49
    159a:	b0 e0       	ldi	r27, 0x00	; 0
    159c:	e1 e3       	ldi	r30, 0x31	; 49
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	80 81       	ld	r24, Z
    15a2:	80 61       	ori	r24, 0x10	; 16
    15a4:	8c 93       	st	X, r24
#if TIMER1_OC1_Behavior_Selector == TIMER1_OC1_TOGGLE_msk
	SET_BIT(TCCR1A,COM1B0);
    15a6:	af e4       	ldi	r26, 0x4F	; 79
    15a8:	b0 e0       	ldi	r27, 0x00	; 0
    15aa:	ef e4       	ldi	r30, 0x4F	; 79
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	80 81       	ld	r24, Z
    15b0:	80 61       	ori	r24, 0x10	; 16
    15b2:	8c 93       	st	X, r24



	switch(TIMER1_PreScaler_Selector){
	case TIMER1_Clk_With_No_PreScaler_msk:
		SET_BIT(TCCR0,CS10);
    15b4:	a3 e5       	ldi	r26, 0x53	; 83
    15b6:	b0 e0       	ldi	r27, 0x00	; 0
    15b8:	e3 e5       	ldi	r30, 0x53	; 83
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	80 81       	ld	r24, Z
    15be:	81 60       	ori	r24, 0x01	; 1
    15c0:	8c 93       	st	X, r24
		break;
	}


	/* Initial value for Timer/Counter0 */
	TCNT1 = TIMER1_Initial_Value;
    15c2:	ec e4       	ldi	r30, 0x4C	; 76
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	11 82       	std	Z+1, r1	; 0x01
    15c8:	10 82       	st	Z, r1

	/* Compare value for Timer/Counter0 */
	OCR1A = TIMER1_CompareA_Value;
    15ca:	ea e4       	ldi	r30, 0x4A	; 74
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	11 82       	std	Z+1, r1	; 0x01
    15d0:	10 82       	st	Z, r1
	OCR1B = TIMER1_CompareB_Value;
    15d2:	e8 e4       	ldi	r30, 0x48	; 72
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	11 82       	std	Z+1, r1	; 0x01
    15d8:	10 82       	st	Z, r1
#endif



	/* To enable TIMER's Interrupt */
	TIMER_EnableInterrupt();
    15da:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <TIMER_EnableInterrupt>
}
    15de:	cf 91       	pop	r28
    15e0:	df 91       	pop	r29
    15e2:	08 95       	ret

000015e4 <TIMER_EnableInterrupt>:
  *                  Depend on Timer That you made it Enable.
  * [Args]  : void
  * [RUTURN]: Void
  */

void TIMER_EnableInterrupt(void){
    15e4:	df 93       	push	r29
    15e6:	cf 93       	push	r28
    15e8:	cd b7       	in	r28, 0x3d	; 61
    15ea:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,OCIE1B);
#endif
#endif


}
    15ec:	cf 91       	pop	r28
    15ee:	df 91       	pop	r29
    15f0:	08 95       	ret

000015f2 <TIMER0_SetCallBack>:





void TIMER0_SetCallBack(void (*Ptr_To_fun)(void)){
    15f2:	df 93       	push	r29
    15f4:	cf 93       	push	r28
    15f6:	00 d0       	rcall	.+0      	; 0x15f8 <TIMER0_SetCallBack+0x6>
    15f8:	cd b7       	in	r28, 0x3d	; 61
    15fa:	de b7       	in	r29, 0x3e	; 62
    15fc:	9a 83       	std	Y+2, r25	; 0x02
    15fe:	89 83       	std	Y+1, r24	; 0x01
	g_Ptr_To_Fun_0=Ptr_To_fun;
    1600:	89 81       	ldd	r24, Y+1	; 0x01
    1602:	9a 81       	ldd	r25, Y+2	; 0x02
    1604:	90 93 81 01 	sts	0x0181, r25
    1608:	80 93 80 01 	sts	0x0180, r24
}
    160c:	0f 90       	pop	r0
    160e:	0f 90       	pop	r0
    1610:	cf 91       	pop	r28
    1612:	df 91       	pop	r29
    1614:	08 95       	ret

00001616 <TIMER1_SetCallBack>:


void TIMER1_SetCallBack(void (*Ptr_To_fun)(void)){
    1616:	df 93       	push	r29
    1618:	cf 93       	push	r28
    161a:	00 d0       	rcall	.+0      	; 0x161c <TIMER1_SetCallBack+0x6>
    161c:	cd b7       	in	r28, 0x3d	; 61
    161e:	de b7       	in	r29, 0x3e	; 62
    1620:	9a 83       	std	Y+2, r25	; 0x02
    1622:	89 83       	std	Y+1, r24	; 0x01
	g_Ptr_To_Fun_1=Ptr_To_fun;
    1624:	89 81       	ldd	r24, Y+1	; 0x01
    1626:	9a 81       	ldd	r25, Y+2	; 0x02
    1628:	90 93 83 01 	sts	0x0183, r25
    162c:	80 93 82 01 	sts	0x0182, r24
}
    1630:	0f 90       	pop	r0
    1632:	0f 90       	pop	r0
    1634:	cf 91       	pop	r28
    1636:	df 91       	pop	r29
    1638:	08 95       	ret

0000163a <TIMER2_SetCallBack>:


void TIMER2_SetCallBack(void (*Ptr_To_fun)(void)){
    163a:	df 93       	push	r29
    163c:	cf 93       	push	r28
    163e:	00 d0       	rcall	.+0      	; 0x1640 <TIMER2_SetCallBack+0x6>
    1640:	cd b7       	in	r28, 0x3d	; 61
    1642:	de b7       	in	r29, 0x3e	; 62
    1644:	9a 83       	std	Y+2, r25	; 0x02
    1646:	89 83       	std	Y+1, r24	; 0x01
	g_Ptr_To_Fun_2=Ptr_To_fun;
    1648:	89 81       	ldd	r24, Y+1	; 0x01
    164a:	9a 81       	ldd	r25, Y+2	; 0x02
    164c:	90 93 85 01 	sts	0x0185, r25
    1650:	80 93 84 01 	sts	0x0184, r24
}
    1654:	0f 90       	pop	r0
    1656:	0f 90       	pop	r0
    1658:	cf 91       	pop	r28
    165a:	df 91       	pop	r29
    165c:	08 95       	ret

0000165e <TIMER_Deinit>:


void TIMER_Deinit(void){
    165e:	df 93       	push	r29
    1660:	cf 93       	push	r28
    1662:	cd b7       	in	r28, 0x3d	; 61
    1664:	de b7       	in	r29, 0x3e	; 62

	/* TIMER0 De-init */
	TCCR0 = 0;
    1666:	e3 e5       	ldi	r30, 0x53	; 83
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	10 82       	st	Z, r1
	/* TIMER2 De-init */
	TCCR2 = 0;
    166c:	e5 e4       	ldi	r30, 0x45	; 69
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	10 82       	st	Z, r1

	/* TIMER1 De-init */
	TCCR1A = 0;
    1672:	ef e4       	ldi	r30, 0x4F	; 79
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	10 82       	st	Z, r1
}
    1678:	cf 91       	pop	r28
    167a:	df 91       	pop	r29
    167c:	08 95       	ret

0000167e <__vector_5>:
static volatile void (*g_CallBack_ptr)(void)= NULL_PTR;

/*******************************************************************************
 *                                ISR
 *******************************************************************************/
ISR(TIMER1_CAPT_vect){
    167e:	1f 92       	push	r1
    1680:	0f 92       	push	r0
    1682:	0f b6       	in	r0, 0x3f	; 63
    1684:	0f 92       	push	r0
    1686:	11 24       	eor	r1, r1
    1688:	2f 93       	push	r18
    168a:	3f 93       	push	r19
    168c:	4f 93       	push	r20
    168e:	5f 93       	push	r21
    1690:	6f 93       	push	r22
    1692:	7f 93       	push	r23
    1694:	8f 93       	push	r24
    1696:	9f 93       	push	r25
    1698:	af 93       	push	r26
    169a:	bf 93       	push	r27
    169c:	ef 93       	push	r30
    169e:	ff 93       	push	r31
    16a0:	df 93       	push	r29
    16a2:	cf 93       	push	r28
    16a4:	cd b7       	in	r28, 0x3d	; 61
    16a6:	de b7       	in	r29, 0x3e	; 62

	/* Call the Call Back function in the application after the edge is detected */
	if(g_CallBack_ptr != NULL_PTR){
    16a8:	80 91 86 01 	lds	r24, 0x0186
    16ac:	90 91 87 01 	lds	r25, 0x0187
    16b0:	00 97       	sbiw	r24, 0x00	; 0
    16b2:	29 f0       	breq	.+10     	; 0x16be <__vector_5+0x40>
		/* Call Back Notification */
		/* another method to call the function using pointer to function g_callBackPtr(); */
		(g_CallBack_ptr)();
    16b4:	e0 91 86 01 	lds	r30, 0x0186
    16b8:	f0 91 87 01 	lds	r31, 0x0187
    16bc:	09 95       	icall
	}
}
    16be:	cf 91       	pop	r28
    16c0:	df 91       	pop	r29
    16c2:	ff 91       	pop	r31
    16c4:	ef 91       	pop	r30
    16c6:	bf 91       	pop	r27
    16c8:	af 91       	pop	r26
    16ca:	9f 91       	pop	r25
    16cc:	8f 91       	pop	r24
    16ce:	7f 91       	pop	r23
    16d0:	6f 91       	pop	r22
    16d2:	5f 91       	pop	r21
    16d4:	4f 91       	pop	r20
    16d6:	3f 91       	pop	r19
    16d8:	2f 91       	pop	r18
    16da:	0f 90       	pop	r0
    16dc:	0f be       	out	0x3f, r0	; 63
    16de:	0f 90       	pop	r0
    16e0:	1f 90       	pop	r1
    16e2:	18 95       	reti

000016e4 <ICU_Init>:
 * 3- Enable the ICU Interrupt .
 * 4- Initialize Timer1 Registers .
 *
 */

void ICU_Init(const ICU_ConfigType *config_Ptr){
    16e4:	df 93       	push	r29
    16e6:	cf 93       	push	r28
    16e8:	00 d0       	rcall	.+0      	; 0x16ea <ICU_Init+0x6>
    16ea:	cd b7       	in	r28, 0x3d	; 61
    16ec:	de b7       	in	r29, 0x3e	; 62
    16ee:	9a 83       	std	Y+2, r25	; 0x02
    16f0:	89 83       	std	Y+1, r24	; 0x01

	/* Configure ICP1/(PD6) as Input pin direction */
	DDRD &=~(1<<PD6);
    16f2:	a1 e3       	ldi	r26, 0x31	; 49
    16f4:	b0 e0       	ldi	r27, 0x00	; 0
    16f6:	e1 e3       	ldi	r30, 0x31	; 49
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	80 81       	ld	r24, Z
    16fc:	8f 7b       	andi	r24, 0xBF	; 191
    16fe:	8c 93       	st	X, r24

	/* always Timer1 operates in normal mode ( default mode )
	 * but need to set FOC1A/FOC1B pins in non-pwm mode
	 * */
	TCCR1A = (1<<FOC1B) | (1<<FOC1A);
    1700:	ef e4       	ldi	r30, 0x4F	; 79
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	8c e0       	ldi	r24, 0x0C	; 12
    1706:	80 83       	st	Z, r24

	/* configure the required edge detection */
	TCCR1B = (TCCR1B & 0xBF)| ((config_Ptr->edge) << 6 );
    1708:	ae e4       	ldi	r26, 0x4E	; 78
    170a:	b0 e0       	ldi	r27, 0x00	; 0
    170c:	ee e4       	ldi	r30, 0x4E	; 78
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	80 81       	ld	r24, Z
    1712:	28 2f       	mov	r18, r24
    1714:	2f 7b       	andi	r18, 0xBF	; 191
    1716:	e9 81       	ldd	r30, Y+1	; 0x01
    1718:	fa 81       	ldd	r31, Y+2	; 0x02
    171a:	80 81       	ld	r24, Z
    171c:	88 2f       	mov	r24, r24
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	00 24       	eor	r0, r0
    1722:	96 95       	lsr	r25
    1724:	87 95       	ror	r24
    1726:	07 94       	ror	r0
    1728:	96 95       	lsr	r25
    172a:	87 95       	ror	r24
    172c:	07 94       	ror	r0
    172e:	98 2f       	mov	r25, r24
    1730:	80 2d       	mov	r24, r0
    1732:	82 2b       	or	r24, r18
    1734:	8c 93       	st	X, r24

	/* configure the required Clock */
	TCCR1B = (TCCR1B & 0xF8)| (config_Ptr->clk);
    1736:	ae e4       	ldi	r26, 0x4E	; 78
    1738:	b0 e0       	ldi	r27, 0x00	; 0
    173a:	ee e4       	ldi	r30, 0x4E	; 78
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	80 81       	ld	r24, Z
    1740:	98 2f       	mov	r25, r24
    1742:	98 7f       	andi	r25, 0xF8	; 248
    1744:	e9 81       	ldd	r30, Y+1	; 0x01
    1746:	fa 81       	ldd	r31, Y+2	; 0x02
    1748:	81 81       	ldd	r24, Z+1	; 0x01
    174a:	89 2b       	or	r24, r25
    174c:	8c 93       	st	X, r24

	/* Initiate Timer1 value (TCNT1 register) */
	TCNT1=0;
    174e:	ec e4       	ldi	r30, 0x4C	; 76
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	11 82       	std	Z+1, r1	; 0x01
    1754:	10 82       	st	Z, r1

	/* Initiate ICR value */
	ICR1=0;
    1756:	e6 e4       	ldi	r30, 0x46	; 70
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	11 82       	std	Z+1, r1	; 0x01
    175c:	10 82       	st	Z, r1

	/* Enable ICU interrupt
	 * Will generate an interrupt when edge is detected on ICP1/PD6 pin
	 */
	TIMSK |=(1<< TICIE1);
    175e:	a9 e5       	ldi	r26, 0x59	; 89
    1760:	b0 e0       	ldi	r27, 0x00	; 0
    1762:	e9 e5       	ldi	r30, 0x59	; 89
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	80 81       	ld	r24, Z
    1768:	80 62       	ori	r24, 0x20	; 32
    176a:	8c 93       	st	X, r24

}
    176c:	0f 90       	pop	r0
    176e:	0f 90       	pop	r0
    1770:	cf 91       	pop	r28
    1772:	df 91       	pop	r29
    1774:	08 95       	ret

00001776 <ICU_SetCallBack>:
 * Description: Function take Address fun (void function(void)) To set callback fun
 *              It used to Make Lower Layer like "MCAL"  call function at Upper layer like "OS" .
 *              CallBack Fun Usually is function with no arguments and no return value .
 *
 */
void ICU_SetCallBack(void(*Ptr_To_Fun)(void)){
    1776:	df 93       	push	r29
    1778:	cf 93       	push	r28
    177a:	00 d0       	rcall	.+0      	; 0x177c <ICU_SetCallBack+0x6>
    177c:	cd b7       	in	r28, 0x3d	; 61
    177e:	de b7       	in	r29, 0x3e	; 62
    1780:	9a 83       	std	Y+2, r25	; 0x02
    1782:	89 83       	std	Y+1, r24	; 0x01

	/* save the address of the call back function in a static global variable */
	g_CallBack_ptr = Ptr_To_Fun;
    1784:	89 81       	ldd	r24, Y+1	; 0x01
    1786:	9a 81       	ldd	r25, Y+2	; 0x02
    1788:	90 93 87 01 	sts	0x0187, r25
    178c:	80 93 86 01 	sts	0x0186, r24
}
    1790:	0f 90       	pop	r0
    1792:	0f 90       	pop	r0
    1794:	cf 91       	pop	r28
    1796:	df 91       	pop	r29
    1798:	08 95       	ret

0000179a <ICU_GetInputCaptureValue>:
 * Description: Function To get the Timer1 Value when the Input is capture
 *              The Value is loaded or stored at ICR1 register (16 bit register) .
 *
 */

uint16 ICU_GetInputCaptureValue(void){
    179a:	df 93       	push	r29
    179c:	cf 93       	push	r28
    179e:	cd b7       	in	r28, 0x3d	; 61
    17a0:	de b7       	in	r29, 0x3e	; 62

	/* return the value of ICR1 register */
	return (uint16)ICR1;
    17a2:	e6 e4       	ldi	r30, 0x46	; 70
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	80 81       	ld	r24, Z
    17a8:	91 81       	ldd	r25, Z+1	; 0x01
}
    17aa:	cf 91       	pop	r28
    17ac:	df 91       	pop	r29
    17ae:	08 95       	ret

000017b0 <ICU_SetEdgeDetectionType>:


/*
 * Description: Function To set the required edge detection  (Rising or Falling)
 */
void ICU_SetEdgeDetectionType(const ICU_EdgeType edge){
    17b0:	df 93       	push	r29
    17b2:	cf 93       	push	r28
    17b4:	0f 92       	push	r0
    17b6:	cd b7       	in	r28, 0x3d	; 61
    17b8:	de b7       	in	r29, 0x3e	; 62
    17ba:	89 83       	std	Y+1, r24	; 0x01

	/* Set the required edge detection */
	TCCR1B = (TCCR1B & 0xBF)| ((edge) << 6 );
    17bc:	ae e4       	ldi	r26, 0x4E	; 78
    17be:	b0 e0       	ldi	r27, 0x00	; 0
    17c0:	ee e4       	ldi	r30, 0x4E	; 78
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	80 81       	ld	r24, Z
    17c6:	28 2f       	mov	r18, r24
    17c8:	2f 7b       	andi	r18, 0xBF	; 191
    17ca:	89 81       	ldd	r24, Y+1	; 0x01
    17cc:	88 2f       	mov	r24, r24
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	00 24       	eor	r0, r0
    17d2:	96 95       	lsr	r25
    17d4:	87 95       	ror	r24
    17d6:	07 94       	ror	r0
    17d8:	96 95       	lsr	r25
    17da:	87 95       	ror	r24
    17dc:	07 94       	ror	r0
    17de:	98 2f       	mov	r25, r24
    17e0:	80 2d       	mov	r24, r0
    17e2:	82 2b       	or	r24, r18
    17e4:	8c 93       	st	X, r24
}
    17e6:	0f 90       	pop	r0
    17e8:	cf 91       	pop	r28
    17ea:	df 91       	pop	r29
    17ec:	08 95       	ret

000017ee <ICU_ClearTimerValue>:


/*
 * Description: Function to clear the Timer1 value to start count from ZERO
 */
void ICU_ClearTimerValue(void){
    17ee:	df 93       	push	r29
    17f0:	cf 93       	push	r28
    17f2:	cd b7       	in	r28, 0x3d	; 61
    17f4:	de b7       	in	r29, 0x3e	; 62

	/* Clear Timer1 value to make it count from Zero */
	TCNT1 =0;
    17f6:	ec e4       	ldi	r30, 0x4C	; 76
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	11 82       	std	Z+1, r1	; 0x01
    17fc:	10 82       	st	Z, r1
}
    17fe:	cf 91       	pop	r28
    1800:	df 91       	pop	r29
    1802:	08 95       	ret

00001804 <ICU_DeInit>:


/*
 * Description: Function To Disable Timer1 to stop the ICU Driver or module
 */
void ICU_DeInit(void){
    1804:	df 93       	push	r29
    1806:	cf 93       	push	r28
    1808:	cd b7       	in	r28, 0x3d	; 61
    180a:	de b7       	in	r29, 0x3e	; 62

	/* Clear All Timer1 Registers
	 * Will return Timer1 registers for default state
	 */

	TCCR1A =0;
    180c:	ef e4       	ldi	r30, 0x4F	; 79
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	10 82       	st	Z, r1
	TCCR1B =0;
    1812:	ee e4       	ldi	r30, 0x4E	; 78
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	10 82       	st	Z, r1
	TCNT1=0;
    1818:	ec e4       	ldi	r30, 0x4C	; 76
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	11 82       	std	Z+1, r1	; 0x01
    181e:	10 82       	st	Z, r1
	ICR1=0;
    1820:	e6 e4       	ldi	r30, 0x46	; 70
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	11 82       	std	Z+1, r1	; 0x01
    1826:	10 82       	st	Z, r1

	/* Disable the Input Capture interrupt */
	TIMSK &= ~(1<<TICIE1);
    1828:	a9 e5       	ldi	r26, 0x59	; 89
    182a:	b0 e0       	ldi	r27, 0x00	; 0
    182c:	e9 e5       	ldi	r30, 0x59	; 89
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	80 81       	ld	r24, Z
    1832:	8f 7d       	andi	r24, 0xDF	; 223
    1834:	8c 93       	st	X, r24

}
    1836:	cf 91       	pop	r28
    1838:	df 91       	pop	r29
    183a:	08 95       	ret

0000183c <GPIO_setPinDir>:
 * Setup the direction of a certain pin in a certain port  .
 * The direction of pin required input/output .
 * If the port number or pin number are not correct , the function will not handle the request.
 */
void GPIO_setPinDir(uint8 port_num ,uint8 pin_num ,GPIO_PinDirection direction)
{
    183c:	df 93       	push	r29
    183e:	cf 93       	push	r28
    1840:	00 d0       	rcall	.+0      	; 0x1842 <GPIO_setPinDir+0x6>
    1842:	00 d0       	rcall	.+0      	; 0x1844 <GPIO_setPinDir+0x8>
    1844:	0f 92       	push	r0
    1846:	cd b7       	in	r28, 0x3d	; 61
    1848:	de b7       	in	r29, 0x3e	; 62
    184a:	89 83       	std	Y+1, r24	; 0x01
    184c:	6a 83       	std	Y+2, r22	; 0x02
    184e:	4b 83       	std	Y+3, r20	; 0x03
	if((port_num >= NUM_OF_PORTS) || (pin_num >= NUM_OF_PINS_PER_PORT))
    1850:	89 81       	ldd	r24, Y+1	; 0x01
    1852:	84 30       	cpi	r24, 0x04	; 4
    1854:	08 f0       	brcs	.+2      	; 0x1858 <GPIO_setPinDir+0x1c>
    1856:	d5 c0       	rjmp	.+426    	; 0x1a02 <GPIO_setPinDir+0x1c6>
    1858:	8a 81       	ldd	r24, Y+2	; 0x02
    185a:	88 30       	cpi	r24, 0x08	; 8
    185c:	08 f0       	brcs	.+2      	; 0x1860 <GPIO_setPinDir+0x24>
    185e:	d1 c0       	rjmp	.+418    	; 0x1a02 <GPIO_setPinDir+0x1c6>
	{
		/* Do nothing */
	}
	else
	{
		switch(port_num)
    1860:	89 81       	ldd	r24, Y+1	; 0x01
    1862:	28 2f       	mov	r18, r24
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	3d 83       	std	Y+5, r19	; 0x05
    1868:	2c 83       	std	Y+4, r18	; 0x04
    186a:	8c 81       	ldd	r24, Y+4	; 0x04
    186c:	9d 81       	ldd	r25, Y+5	; 0x05
    186e:	81 30       	cpi	r24, 0x01	; 1
    1870:	91 05       	cpc	r25, r1
    1872:	09 f4       	brne	.+2      	; 0x1876 <GPIO_setPinDir+0x3a>
    1874:	43 c0       	rjmp	.+134    	; 0x18fc <GPIO_setPinDir+0xc0>
    1876:	2c 81       	ldd	r18, Y+4	; 0x04
    1878:	3d 81       	ldd	r19, Y+5	; 0x05
    187a:	22 30       	cpi	r18, 0x02	; 2
    187c:	31 05       	cpc	r19, r1
    187e:	2c f4       	brge	.+10     	; 0x188a <GPIO_setPinDir+0x4e>
    1880:	8c 81       	ldd	r24, Y+4	; 0x04
    1882:	9d 81       	ldd	r25, Y+5	; 0x05
    1884:	00 97       	sbiw	r24, 0x00	; 0
    1886:	71 f0       	breq	.+28     	; 0x18a4 <GPIO_setPinDir+0x68>
    1888:	bc c0       	rjmp	.+376    	; 0x1a02 <GPIO_setPinDir+0x1c6>
    188a:	2c 81       	ldd	r18, Y+4	; 0x04
    188c:	3d 81       	ldd	r19, Y+5	; 0x05
    188e:	22 30       	cpi	r18, 0x02	; 2
    1890:	31 05       	cpc	r19, r1
    1892:	09 f4       	brne	.+2      	; 0x1896 <GPIO_setPinDir+0x5a>
    1894:	5f c0       	rjmp	.+190    	; 0x1954 <GPIO_setPinDir+0x118>
    1896:	8c 81       	ldd	r24, Y+4	; 0x04
    1898:	9d 81       	ldd	r25, Y+5	; 0x05
    189a:	83 30       	cpi	r24, 0x03	; 3
    189c:	91 05       	cpc	r25, r1
    189e:	09 f4       	brne	.+2      	; 0x18a2 <GPIO_setPinDir+0x66>
    18a0:	85 c0       	rjmp	.+266    	; 0x19ac <GPIO_setPinDir+0x170>
    18a2:	af c0       	rjmp	.+350    	; 0x1a02 <GPIO_setPinDir+0x1c6>
		{
		case PORTA_ID:
			if(direction==LOGIC_HIGH)
    18a4:	8b 81       	ldd	r24, Y+3	; 0x03
    18a6:	81 30       	cpi	r24, 0x01	; 1
    18a8:	a1 f4       	brne	.+40     	; 0x18d2 <GPIO_setPinDir+0x96>
			{
				SET_BIT(DDRA,pin_num);
    18aa:	aa e3       	ldi	r26, 0x3A	; 58
    18ac:	b0 e0       	ldi	r27, 0x00	; 0
    18ae:	ea e3       	ldi	r30, 0x3A	; 58
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	80 81       	ld	r24, Z
    18b4:	48 2f       	mov	r20, r24
    18b6:	8a 81       	ldd	r24, Y+2	; 0x02
    18b8:	28 2f       	mov	r18, r24
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	81 e0       	ldi	r24, 0x01	; 1
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	02 2e       	mov	r0, r18
    18c2:	02 c0       	rjmp	.+4      	; 0x18c8 <GPIO_setPinDir+0x8c>
    18c4:	88 0f       	add	r24, r24
    18c6:	99 1f       	adc	r25, r25
    18c8:	0a 94       	dec	r0
    18ca:	e2 f7       	brpl	.-8      	; 0x18c4 <GPIO_setPinDir+0x88>
    18cc:	84 2b       	or	r24, r20
    18ce:	8c 93       	st	X, r24
    18d0:	98 c0       	rjmp	.+304    	; 0x1a02 <GPIO_setPinDir+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    18d2:	aa e3       	ldi	r26, 0x3A	; 58
    18d4:	b0 e0       	ldi	r27, 0x00	; 0
    18d6:	ea e3       	ldi	r30, 0x3A	; 58
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	80 81       	ld	r24, Z
    18dc:	48 2f       	mov	r20, r24
    18de:	8a 81       	ldd	r24, Y+2	; 0x02
    18e0:	28 2f       	mov	r18, r24
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	02 2e       	mov	r0, r18
    18ea:	02 c0       	rjmp	.+4      	; 0x18f0 <GPIO_setPinDir+0xb4>
    18ec:	88 0f       	add	r24, r24
    18ee:	99 1f       	adc	r25, r25
    18f0:	0a 94       	dec	r0
    18f2:	e2 f7       	brpl	.-8      	; 0x18ec <GPIO_setPinDir+0xb0>
    18f4:	80 95       	com	r24
    18f6:	84 23       	and	r24, r20
    18f8:	8c 93       	st	X, r24
    18fa:	83 c0       	rjmp	.+262    	; 0x1a02 <GPIO_setPinDir+0x1c6>
			}

			break;
		case PORTB_ID:
			if(direction==LOGIC_HIGH)
    18fc:	8b 81       	ldd	r24, Y+3	; 0x03
    18fe:	81 30       	cpi	r24, 0x01	; 1
    1900:	a1 f4       	brne	.+40     	; 0x192a <GPIO_setPinDir+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1902:	a7 e3       	ldi	r26, 0x37	; 55
    1904:	b0 e0       	ldi	r27, 0x00	; 0
    1906:	e7 e3       	ldi	r30, 0x37	; 55
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	80 81       	ld	r24, Z
    190c:	48 2f       	mov	r20, r24
    190e:	8a 81       	ldd	r24, Y+2	; 0x02
    1910:	28 2f       	mov	r18, r24
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	02 2e       	mov	r0, r18
    191a:	02 c0       	rjmp	.+4      	; 0x1920 <GPIO_setPinDir+0xe4>
    191c:	88 0f       	add	r24, r24
    191e:	99 1f       	adc	r25, r25
    1920:	0a 94       	dec	r0
    1922:	e2 f7       	brpl	.-8      	; 0x191c <GPIO_setPinDir+0xe0>
    1924:	84 2b       	or	r24, r20
    1926:	8c 93       	st	X, r24
    1928:	6c c0       	rjmp	.+216    	; 0x1a02 <GPIO_setPinDir+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    192a:	a7 e3       	ldi	r26, 0x37	; 55
    192c:	b0 e0       	ldi	r27, 0x00	; 0
    192e:	e7 e3       	ldi	r30, 0x37	; 55
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	80 81       	ld	r24, Z
    1934:	48 2f       	mov	r20, r24
    1936:	8a 81       	ldd	r24, Y+2	; 0x02
    1938:	28 2f       	mov	r18, r24
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	81 e0       	ldi	r24, 0x01	; 1
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	02 2e       	mov	r0, r18
    1942:	02 c0       	rjmp	.+4      	; 0x1948 <GPIO_setPinDir+0x10c>
    1944:	88 0f       	add	r24, r24
    1946:	99 1f       	adc	r25, r25
    1948:	0a 94       	dec	r0
    194a:	e2 f7       	brpl	.-8      	; 0x1944 <GPIO_setPinDir+0x108>
    194c:	80 95       	com	r24
    194e:	84 23       	and	r24, r20
    1950:	8c 93       	st	X, r24
    1952:	57 c0       	rjmp	.+174    	; 0x1a02 <GPIO_setPinDir+0x1c6>
			}

			break;
		case PORTC_ID:
			if(direction==LOGIC_HIGH)
    1954:	8b 81       	ldd	r24, Y+3	; 0x03
    1956:	81 30       	cpi	r24, 0x01	; 1
    1958:	a1 f4       	brne	.+40     	; 0x1982 <GPIO_setPinDir+0x146>
			{
				SET_BIT(DDRC,pin_num);
    195a:	a4 e3       	ldi	r26, 0x34	; 52
    195c:	b0 e0       	ldi	r27, 0x00	; 0
    195e:	e4 e3       	ldi	r30, 0x34	; 52
    1960:	f0 e0       	ldi	r31, 0x00	; 0
    1962:	80 81       	ld	r24, Z
    1964:	48 2f       	mov	r20, r24
    1966:	8a 81       	ldd	r24, Y+2	; 0x02
    1968:	28 2f       	mov	r18, r24
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	81 e0       	ldi	r24, 0x01	; 1
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	02 2e       	mov	r0, r18
    1972:	02 c0       	rjmp	.+4      	; 0x1978 <GPIO_setPinDir+0x13c>
    1974:	88 0f       	add	r24, r24
    1976:	99 1f       	adc	r25, r25
    1978:	0a 94       	dec	r0
    197a:	e2 f7       	brpl	.-8      	; 0x1974 <GPIO_setPinDir+0x138>
    197c:	84 2b       	or	r24, r20
    197e:	8c 93       	st	X, r24
    1980:	40 c0       	rjmp	.+128    	; 0x1a02 <GPIO_setPinDir+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1982:	a4 e3       	ldi	r26, 0x34	; 52
    1984:	b0 e0       	ldi	r27, 0x00	; 0
    1986:	e4 e3       	ldi	r30, 0x34	; 52
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	80 81       	ld	r24, Z
    198c:	48 2f       	mov	r20, r24
    198e:	8a 81       	ldd	r24, Y+2	; 0x02
    1990:	28 2f       	mov	r18, r24
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	02 2e       	mov	r0, r18
    199a:	02 c0       	rjmp	.+4      	; 0x19a0 <GPIO_setPinDir+0x164>
    199c:	88 0f       	add	r24, r24
    199e:	99 1f       	adc	r25, r25
    19a0:	0a 94       	dec	r0
    19a2:	e2 f7       	brpl	.-8      	; 0x199c <GPIO_setPinDir+0x160>
    19a4:	80 95       	com	r24
    19a6:	84 23       	and	r24, r20
    19a8:	8c 93       	st	X, r24
    19aa:	2b c0       	rjmp	.+86     	; 0x1a02 <GPIO_setPinDir+0x1c6>
			}

			break;
		case PORTD_ID:
			if(direction==LOGIC_HIGH)
    19ac:	8b 81       	ldd	r24, Y+3	; 0x03
    19ae:	81 30       	cpi	r24, 0x01	; 1
    19b0:	a1 f4       	brne	.+40     	; 0x19da <GPIO_setPinDir+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    19b2:	a1 e3       	ldi	r26, 0x31	; 49
    19b4:	b0 e0       	ldi	r27, 0x00	; 0
    19b6:	e1 e3       	ldi	r30, 0x31	; 49
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	80 81       	ld	r24, Z
    19bc:	48 2f       	mov	r20, r24
    19be:	8a 81       	ldd	r24, Y+2	; 0x02
    19c0:	28 2f       	mov	r18, r24
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	02 2e       	mov	r0, r18
    19ca:	02 c0       	rjmp	.+4      	; 0x19d0 <GPIO_setPinDir+0x194>
    19cc:	88 0f       	add	r24, r24
    19ce:	99 1f       	adc	r25, r25
    19d0:	0a 94       	dec	r0
    19d2:	e2 f7       	brpl	.-8      	; 0x19cc <GPIO_setPinDir+0x190>
    19d4:	84 2b       	or	r24, r20
    19d6:	8c 93       	st	X, r24
    19d8:	14 c0       	rjmp	.+40     	; 0x1a02 <GPIO_setPinDir+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    19da:	a1 e3       	ldi	r26, 0x31	; 49
    19dc:	b0 e0       	ldi	r27, 0x00	; 0
    19de:	e1 e3       	ldi	r30, 0x31	; 49
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	80 81       	ld	r24, Z
    19e4:	48 2f       	mov	r20, r24
    19e6:	8a 81       	ldd	r24, Y+2	; 0x02
    19e8:	28 2f       	mov	r18, r24
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	81 e0       	ldi	r24, 0x01	; 1
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	02 2e       	mov	r0, r18
    19f2:	02 c0       	rjmp	.+4      	; 0x19f8 <GPIO_setPinDir+0x1bc>
    19f4:	88 0f       	add	r24, r24
    19f6:	99 1f       	adc	r25, r25
    19f8:	0a 94       	dec	r0
    19fa:	e2 f7       	brpl	.-8      	; 0x19f4 <GPIO_setPinDir+0x1b8>
    19fc:	80 95       	com	r24
    19fe:	84 23       	and	r24, r20
    1a00:	8c 93       	st	X, r24
			}

			break;
		}
	}
}
    1a02:	0f 90       	pop	r0
    1a04:	0f 90       	pop	r0
    1a06:	0f 90       	pop	r0
    1a08:	0f 90       	pop	r0
    1a0a:	0f 90       	pop	r0
    1a0c:	cf 91       	pop	r28
    1a0e:	df 91       	pop	r29
    1a10:	08 95       	ret

00001a12 <GPIO_readPin>:
	}
	return data.BITS.BIT0;
}*/

STD_LevelType GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1a12:	df 93       	push	r29
    1a14:	cf 93       	push	r28
    1a16:	00 d0       	rcall	.+0      	; 0x1a18 <GPIO_readPin+0x6>
    1a18:	00 d0       	rcall	.+0      	; 0x1a1a <GPIO_readPin+0x8>
    1a1a:	0f 92       	push	r0
    1a1c:	cd b7       	in	r28, 0x3d	; 61
    1a1e:	de b7       	in	r29, 0x3e	; 62
    1a20:	8a 83       	std	Y+2, r24	; 0x02
    1a22:	6b 83       	std	Y+3, r22	; 0x03
	uint8 data;
	if((port_num >= NUM_OF_PORTS)||(pin_num >= NUM_OF_PINS_PER_PORT))
    1a24:	8a 81       	ldd	r24, Y+2	; 0x02
    1a26:	84 30       	cpi	r24, 0x04	; 4
    1a28:	08 f0       	brcs	.+2      	; 0x1a2c <GPIO_readPin+0x1a>
    1a2a:	84 c0       	rjmp	.+264    	; 0x1b34 <GPIO_readPin+0x122>
    1a2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2e:	88 30       	cpi	r24, 0x08	; 8
    1a30:	08 f0       	brcs	.+2      	; 0x1a34 <GPIO_readPin+0x22>
    1a32:	80 c0       	rjmp	.+256    	; 0x1b34 <GPIO_readPin+0x122>
	{
		/* Do nothing */
	}
	else
	{
		switch(port_num)
    1a34:	8a 81       	ldd	r24, Y+2	; 0x02
    1a36:	28 2f       	mov	r18, r24
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	3d 83       	std	Y+5, r19	; 0x05
    1a3c:	2c 83       	std	Y+4, r18	; 0x04
    1a3e:	4c 81       	ldd	r20, Y+4	; 0x04
    1a40:	5d 81       	ldd	r21, Y+5	; 0x05
    1a42:	41 30       	cpi	r20, 0x01	; 1
    1a44:	51 05       	cpc	r21, r1
    1a46:	79 f1       	breq	.+94     	; 0x1aa6 <GPIO_readPin+0x94>
    1a48:	8c 81       	ldd	r24, Y+4	; 0x04
    1a4a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a4c:	82 30       	cpi	r24, 0x02	; 2
    1a4e:	91 05       	cpc	r25, r1
    1a50:	34 f4       	brge	.+12     	; 0x1a5e <GPIO_readPin+0x4c>
    1a52:	2c 81       	ldd	r18, Y+4	; 0x04
    1a54:	3d 81       	ldd	r19, Y+5	; 0x05
    1a56:	21 15       	cp	r18, r1
    1a58:	31 05       	cpc	r19, r1
    1a5a:	69 f0       	breq	.+26     	; 0x1a76 <GPIO_readPin+0x64>
    1a5c:	6b c0       	rjmp	.+214    	; 0x1b34 <GPIO_readPin+0x122>
    1a5e:	4c 81       	ldd	r20, Y+4	; 0x04
    1a60:	5d 81       	ldd	r21, Y+5	; 0x05
    1a62:	42 30       	cpi	r20, 0x02	; 2
    1a64:	51 05       	cpc	r21, r1
    1a66:	b9 f1       	breq	.+110    	; 0x1ad6 <GPIO_readPin+0xc4>
    1a68:	8c 81       	ldd	r24, Y+4	; 0x04
    1a6a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a6c:	83 30       	cpi	r24, 0x03	; 3
    1a6e:	91 05       	cpc	r25, r1
    1a70:	09 f4       	brne	.+2      	; 0x1a74 <GPIO_readPin+0x62>
    1a72:	49 c0       	rjmp	.+146    	; 0x1b06 <GPIO_readPin+0xf4>
    1a74:	5f c0       	rjmp	.+190    	; 0x1b34 <GPIO_readPin+0x122>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1a76:	e9 e3       	ldi	r30, 0x39	; 57
    1a78:	f0 e0       	ldi	r31, 0x00	; 0
    1a7a:	80 81       	ld	r24, Z
    1a7c:	28 2f       	mov	r18, r24
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	8b 81       	ldd	r24, Y+3	; 0x03
    1a82:	88 2f       	mov	r24, r24
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	a9 01       	movw	r20, r18
    1a88:	02 c0       	rjmp	.+4      	; 0x1a8e <GPIO_readPin+0x7c>
    1a8a:	55 95       	asr	r21
    1a8c:	47 95       	ror	r20
    1a8e:	8a 95       	dec	r24
    1a90:	e2 f7       	brpl	.-8      	; 0x1a8a <GPIO_readPin+0x78>
    1a92:	ca 01       	movw	r24, r20
    1a94:	81 70       	andi	r24, 0x01	; 1
    1a96:	90 70       	andi	r25, 0x00	; 0
    1a98:	88 23       	and	r24, r24
    1a9a:	19 f0       	breq	.+6      	; 0x1aa2 <GPIO_readPin+0x90>
			{
				data =LOGIC_HIGH;
    1a9c:	81 e0       	ldi	r24, 0x01	; 1
    1a9e:	89 83       	std	Y+1, r24	; 0x01
    1aa0:	49 c0       	rjmp	.+146    	; 0x1b34 <GPIO_readPin+0x122>
			}
			else
			{
				data =LOGIC_LOW;
    1aa2:	19 82       	std	Y+1, r1	; 0x01
    1aa4:	47 c0       	rjmp	.+142    	; 0x1b34 <GPIO_readPin+0x122>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1aa6:	e6 e3       	ldi	r30, 0x36	; 54
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	80 81       	ld	r24, Z
    1aac:	28 2f       	mov	r18, r24
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab2:	88 2f       	mov	r24, r24
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	a9 01       	movw	r20, r18
    1ab8:	02 c0       	rjmp	.+4      	; 0x1abe <GPIO_readPin+0xac>
    1aba:	55 95       	asr	r21
    1abc:	47 95       	ror	r20
    1abe:	8a 95       	dec	r24
    1ac0:	e2 f7       	brpl	.-8      	; 0x1aba <GPIO_readPin+0xa8>
    1ac2:	ca 01       	movw	r24, r20
    1ac4:	81 70       	andi	r24, 0x01	; 1
    1ac6:	90 70       	andi	r25, 0x00	; 0
    1ac8:	88 23       	and	r24, r24
    1aca:	19 f0       	breq	.+6      	; 0x1ad2 <GPIO_readPin+0xc0>
			{
				data=LOGIC_HIGH;
    1acc:	81 e0       	ldi	r24, 0x01	; 1
    1ace:	89 83       	std	Y+1, r24	; 0x01
    1ad0:	31 c0       	rjmp	.+98     	; 0x1b34 <GPIO_readPin+0x122>
			}
			else
			{
				data=LOGIC_LOW;
    1ad2:	19 82       	std	Y+1, r1	; 0x01
    1ad4:	2f c0       	rjmp	.+94     	; 0x1b34 <GPIO_readPin+0x122>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1ad6:	e3 e3       	ldi	r30, 0x33	; 51
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	80 81       	ld	r24, Z
    1adc:	28 2f       	mov	r18, r24
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae2:	88 2f       	mov	r24, r24
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	a9 01       	movw	r20, r18
    1ae8:	02 c0       	rjmp	.+4      	; 0x1aee <GPIO_readPin+0xdc>
    1aea:	55 95       	asr	r21
    1aec:	47 95       	ror	r20
    1aee:	8a 95       	dec	r24
    1af0:	e2 f7       	brpl	.-8      	; 0x1aea <GPIO_readPin+0xd8>
    1af2:	ca 01       	movw	r24, r20
    1af4:	81 70       	andi	r24, 0x01	; 1
    1af6:	90 70       	andi	r25, 0x00	; 0
    1af8:	88 23       	and	r24, r24
    1afa:	19 f0       	breq	.+6      	; 0x1b02 <GPIO_readPin+0xf0>
			{
				data=LOGIC_HIGH;
    1afc:	81 e0       	ldi	r24, 0x01	; 1
    1afe:	89 83       	std	Y+1, r24	; 0x01
    1b00:	19 c0       	rjmp	.+50     	; 0x1b34 <GPIO_readPin+0x122>
			}
			else
			{
				data=LOGIC_LOW;
    1b02:	19 82       	std	Y+1, r1	; 0x01
    1b04:	17 c0       	rjmp	.+46     	; 0x1b34 <GPIO_readPin+0x122>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1b06:	e0 e3       	ldi	r30, 0x30	; 48
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	80 81       	ld	r24, Z
    1b0c:	28 2f       	mov	r18, r24
    1b0e:	30 e0       	ldi	r19, 0x00	; 0
    1b10:	8b 81       	ldd	r24, Y+3	; 0x03
    1b12:	88 2f       	mov	r24, r24
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	a9 01       	movw	r20, r18
    1b18:	02 c0       	rjmp	.+4      	; 0x1b1e <GPIO_readPin+0x10c>
    1b1a:	55 95       	asr	r21
    1b1c:	47 95       	ror	r20
    1b1e:	8a 95       	dec	r24
    1b20:	e2 f7       	brpl	.-8      	; 0x1b1a <GPIO_readPin+0x108>
    1b22:	ca 01       	movw	r24, r20
    1b24:	81 70       	andi	r24, 0x01	; 1
    1b26:	90 70       	andi	r25, 0x00	; 0
    1b28:	88 23       	and	r24, r24
    1b2a:	19 f0       	breq	.+6      	; 0x1b32 <GPIO_readPin+0x120>
			{
				data=LOGIC_HIGH;
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	89 83       	std	Y+1, r24	; 0x01
    1b30:	01 c0       	rjmp	.+2      	; 0x1b34 <GPIO_readPin+0x122>
			}
			else
			{
				data=LOGIC_LOW;
    1b32:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}
	return data;
    1b34:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b36:	0f 90       	pop	r0
    1b38:	0f 90       	pop	r0
    1b3a:	0f 90       	pop	r0
    1b3c:	0f 90       	pop	r0
    1b3e:	0f 90       	pop	r0
    1b40:	cf 91       	pop	r28
    1b42:	df 91       	pop	r29
    1b44:	08 95       	ret

00001b46 <GPIO_writePin>:
 * Description:
 * Write value on the pin , should the value be logic high or logic low .
 * If the port number or pin number are not correct , the function can not handle the request.
 */
void GPIO_writePin(uint8 port_num ,uint8 pin_num , STD_LevelType level)
{
    1b46:	df 93       	push	r29
    1b48:	cf 93       	push	r28
    1b4a:	00 d0       	rcall	.+0      	; 0x1b4c <GPIO_writePin+0x6>
    1b4c:	00 d0       	rcall	.+0      	; 0x1b4e <GPIO_writePin+0x8>
    1b4e:	0f 92       	push	r0
    1b50:	cd b7       	in	r28, 0x3d	; 61
    1b52:	de b7       	in	r29, 0x3e	; 62
    1b54:	89 83       	std	Y+1, r24	; 0x01
    1b56:	6a 83       	std	Y+2, r22	; 0x02
    1b58:	4b 83       	std	Y+3, r20	; 0x03
	if((port_num >= NUM_OF_PORTS)||(pin_num >= NUM_OF_PINS_PER_PORT))
    1b5a:	89 81       	ldd	r24, Y+1	; 0x01
    1b5c:	84 30       	cpi	r24, 0x04	; 4
    1b5e:	08 f0       	brcs	.+2      	; 0x1b62 <GPIO_writePin+0x1c>
    1b60:	d5 c0       	rjmp	.+426    	; 0x1d0c <GPIO_writePin+0x1c6>
    1b62:	8a 81       	ldd	r24, Y+2	; 0x02
    1b64:	88 30       	cpi	r24, 0x08	; 8
    1b66:	08 f0       	brcs	.+2      	; 0x1b6a <GPIO_writePin+0x24>
    1b68:	d1 c0       	rjmp	.+418    	; 0x1d0c <GPIO_writePin+0x1c6>
	{
		/* Do nothing */
	}
	else
	{
		switch(port_num)
    1b6a:	89 81       	ldd	r24, Y+1	; 0x01
    1b6c:	28 2f       	mov	r18, r24
    1b6e:	30 e0       	ldi	r19, 0x00	; 0
    1b70:	3d 83       	std	Y+5, r19	; 0x05
    1b72:	2c 83       	std	Y+4, r18	; 0x04
    1b74:	8c 81       	ldd	r24, Y+4	; 0x04
    1b76:	9d 81       	ldd	r25, Y+5	; 0x05
    1b78:	81 30       	cpi	r24, 0x01	; 1
    1b7a:	91 05       	cpc	r25, r1
    1b7c:	09 f4       	brne	.+2      	; 0x1b80 <GPIO_writePin+0x3a>
    1b7e:	43 c0       	rjmp	.+134    	; 0x1c06 <GPIO_writePin+0xc0>
    1b80:	2c 81       	ldd	r18, Y+4	; 0x04
    1b82:	3d 81       	ldd	r19, Y+5	; 0x05
    1b84:	22 30       	cpi	r18, 0x02	; 2
    1b86:	31 05       	cpc	r19, r1
    1b88:	2c f4       	brge	.+10     	; 0x1b94 <GPIO_writePin+0x4e>
    1b8a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b8c:	9d 81       	ldd	r25, Y+5	; 0x05
    1b8e:	00 97       	sbiw	r24, 0x00	; 0
    1b90:	71 f0       	breq	.+28     	; 0x1bae <GPIO_writePin+0x68>
    1b92:	bc c0       	rjmp	.+376    	; 0x1d0c <GPIO_writePin+0x1c6>
    1b94:	2c 81       	ldd	r18, Y+4	; 0x04
    1b96:	3d 81       	ldd	r19, Y+5	; 0x05
    1b98:	22 30       	cpi	r18, 0x02	; 2
    1b9a:	31 05       	cpc	r19, r1
    1b9c:	09 f4       	brne	.+2      	; 0x1ba0 <GPIO_writePin+0x5a>
    1b9e:	5f c0       	rjmp	.+190    	; 0x1c5e <GPIO_writePin+0x118>
    1ba0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ba2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ba4:	83 30       	cpi	r24, 0x03	; 3
    1ba6:	91 05       	cpc	r25, r1
    1ba8:	09 f4       	brne	.+2      	; 0x1bac <GPIO_writePin+0x66>
    1baa:	85 c0       	rjmp	.+266    	; 0x1cb6 <GPIO_writePin+0x170>
    1bac:	af c0       	rjmp	.+350    	; 0x1d0c <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(level==LOGIC_HIGH){
    1bae:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb0:	81 30       	cpi	r24, 0x01	; 1
    1bb2:	a1 f4       	brne	.+40     	; 0x1bdc <GPIO_writePin+0x96>
				SET_BIT(PORTA,pin_num);
    1bb4:	ab e3       	ldi	r26, 0x3B	; 59
    1bb6:	b0 e0       	ldi	r27, 0x00	; 0
    1bb8:	eb e3       	ldi	r30, 0x3B	; 59
    1bba:	f0 e0       	ldi	r31, 0x00	; 0
    1bbc:	80 81       	ld	r24, Z
    1bbe:	48 2f       	mov	r20, r24
    1bc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc2:	28 2f       	mov	r18, r24
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	02 2e       	mov	r0, r18
    1bcc:	02 c0       	rjmp	.+4      	; 0x1bd2 <GPIO_writePin+0x8c>
    1bce:	88 0f       	add	r24, r24
    1bd0:	99 1f       	adc	r25, r25
    1bd2:	0a 94       	dec	r0
    1bd4:	e2 f7       	brpl	.-8      	; 0x1bce <GPIO_writePin+0x88>
    1bd6:	84 2b       	or	r24, r20
    1bd8:	8c 93       	st	X, r24
    1bda:	98 c0       	rjmp	.+304    	; 0x1d0c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1bdc:	ab e3       	ldi	r26, 0x3B	; 59
    1bde:	b0 e0       	ldi	r27, 0x00	; 0
    1be0:	eb e3       	ldi	r30, 0x3B	; 59
    1be2:	f0 e0       	ldi	r31, 0x00	; 0
    1be4:	80 81       	ld	r24, Z
    1be6:	48 2f       	mov	r20, r24
    1be8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bea:	28 2f       	mov	r18, r24
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	81 e0       	ldi	r24, 0x01	; 1
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	02 2e       	mov	r0, r18
    1bf4:	02 c0       	rjmp	.+4      	; 0x1bfa <GPIO_writePin+0xb4>
    1bf6:	88 0f       	add	r24, r24
    1bf8:	99 1f       	adc	r25, r25
    1bfa:	0a 94       	dec	r0
    1bfc:	e2 f7       	brpl	.-8      	; 0x1bf6 <GPIO_writePin+0xb0>
    1bfe:	80 95       	com	r24
    1c00:	84 23       	and	r24, r20
    1c02:	8c 93       	st	X, r24
    1c04:	83 c0       	rjmp	.+262    	; 0x1d0c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(level==LOGIC_HIGH){
    1c06:	8b 81       	ldd	r24, Y+3	; 0x03
    1c08:	81 30       	cpi	r24, 0x01	; 1
    1c0a:	a1 f4       	brne	.+40     	; 0x1c34 <GPIO_writePin+0xee>
				SET_BIT(PORTB,pin_num);
    1c0c:	a8 e3       	ldi	r26, 0x38	; 56
    1c0e:	b0 e0       	ldi	r27, 0x00	; 0
    1c10:	e8 e3       	ldi	r30, 0x38	; 56
    1c12:	f0 e0       	ldi	r31, 0x00	; 0
    1c14:	80 81       	ld	r24, Z
    1c16:	48 2f       	mov	r20, r24
    1c18:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1a:	28 2f       	mov	r18, r24
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	81 e0       	ldi	r24, 0x01	; 1
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	02 2e       	mov	r0, r18
    1c24:	02 c0       	rjmp	.+4      	; 0x1c2a <GPIO_writePin+0xe4>
    1c26:	88 0f       	add	r24, r24
    1c28:	99 1f       	adc	r25, r25
    1c2a:	0a 94       	dec	r0
    1c2c:	e2 f7       	brpl	.-8      	; 0x1c26 <GPIO_writePin+0xe0>
    1c2e:	84 2b       	or	r24, r20
    1c30:	8c 93       	st	X, r24
    1c32:	6c c0       	rjmp	.+216    	; 0x1d0c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1c34:	a8 e3       	ldi	r26, 0x38	; 56
    1c36:	b0 e0       	ldi	r27, 0x00	; 0
    1c38:	e8 e3       	ldi	r30, 0x38	; 56
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	80 81       	ld	r24, Z
    1c3e:	48 2f       	mov	r20, r24
    1c40:	8a 81       	ldd	r24, Y+2	; 0x02
    1c42:	28 2f       	mov	r18, r24
    1c44:	30 e0       	ldi	r19, 0x00	; 0
    1c46:	81 e0       	ldi	r24, 0x01	; 1
    1c48:	90 e0       	ldi	r25, 0x00	; 0
    1c4a:	02 2e       	mov	r0, r18
    1c4c:	02 c0       	rjmp	.+4      	; 0x1c52 <GPIO_writePin+0x10c>
    1c4e:	88 0f       	add	r24, r24
    1c50:	99 1f       	adc	r25, r25
    1c52:	0a 94       	dec	r0
    1c54:	e2 f7       	brpl	.-8      	; 0x1c4e <GPIO_writePin+0x108>
    1c56:	80 95       	com	r24
    1c58:	84 23       	and	r24, r20
    1c5a:	8c 93       	st	X, r24
    1c5c:	57 c0       	rjmp	.+174    	; 0x1d0c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(level==LOGIC_HIGH){
    1c5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c60:	81 30       	cpi	r24, 0x01	; 1
    1c62:	a1 f4       	brne	.+40     	; 0x1c8c <GPIO_writePin+0x146>
				SET_BIT(PORTC,pin_num);
    1c64:	a5 e3       	ldi	r26, 0x35	; 53
    1c66:	b0 e0       	ldi	r27, 0x00	; 0
    1c68:	e5 e3       	ldi	r30, 0x35	; 53
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	80 81       	ld	r24, Z
    1c6e:	48 2f       	mov	r20, r24
    1c70:	8a 81       	ldd	r24, Y+2	; 0x02
    1c72:	28 2f       	mov	r18, r24
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	81 e0       	ldi	r24, 0x01	; 1
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	02 2e       	mov	r0, r18
    1c7c:	02 c0       	rjmp	.+4      	; 0x1c82 <GPIO_writePin+0x13c>
    1c7e:	88 0f       	add	r24, r24
    1c80:	99 1f       	adc	r25, r25
    1c82:	0a 94       	dec	r0
    1c84:	e2 f7       	brpl	.-8      	; 0x1c7e <GPIO_writePin+0x138>
    1c86:	84 2b       	or	r24, r20
    1c88:	8c 93       	st	X, r24
    1c8a:	40 c0       	rjmp	.+128    	; 0x1d0c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1c8c:	a5 e3       	ldi	r26, 0x35	; 53
    1c8e:	b0 e0       	ldi	r27, 0x00	; 0
    1c90:	e5 e3       	ldi	r30, 0x35	; 53
    1c92:	f0 e0       	ldi	r31, 0x00	; 0
    1c94:	80 81       	ld	r24, Z
    1c96:	48 2f       	mov	r20, r24
    1c98:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9a:	28 2f       	mov	r18, r24
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	02 2e       	mov	r0, r18
    1ca4:	02 c0       	rjmp	.+4      	; 0x1caa <GPIO_writePin+0x164>
    1ca6:	88 0f       	add	r24, r24
    1ca8:	99 1f       	adc	r25, r25
    1caa:	0a 94       	dec	r0
    1cac:	e2 f7       	brpl	.-8      	; 0x1ca6 <GPIO_writePin+0x160>
    1cae:	80 95       	com	r24
    1cb0:	84 23       	and	r24, r20
    1cb2:	8c 93       	st	X, r24
    1cb4:	2b c0       	rjmp	.+86     	; 0x1d0c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(level==LOGIC_HIGH){
    1cb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb8:	81 30       	cpi	r24, 0x01	; 1
    1cba:	a1 f4       	brne	.+40     	; 0x1ce4 <GPIO_writePin+0x19e>
				SET_BIT(PORTD,pin_num);
    1cbc:	a2 e3       	ldi	r26, 0x32	; 50
    1cbe:	b0 e0       	ldi	r27, 0x00	; 0
    1cc0:	e2 e3       	ldi	r30, 0x32	; 50
    1cc2:	f0 e0       	ldi	r31, 0x00	; 0
    1cc4:	80 81       	ld	r24, Z
    1cc6:	48 2f       	mov	r20, r24
    1cc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cca:	28 2f       	mov	r18, r24
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	81 e0       	ldi	r24, 0x01	; 1
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	02 2e       	mov	r0, r18
    1cd4:	02 c0       	rjmp	.+4      	; 0x1cda <GPIO_writePin+0x194>
    1cd6:	88 0f       	add	r24, r24
    1cd8:	99 1f       	adc	r25, r25
    1cda:	0a 94       	dec	r0
    1cdc:	e2 f7       	brpl	.-8      	; 0x1cd6 <GPIO_writePin+0x190>
    1cde:	84 2b       	or	r24, r20
    1ce0:	8c 93       	st	X, r24
    1ce2:	14 c0       	rjmp	.+40     	; 0x1d0c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1ce4:	a2 e3       	ldi	r26, 0x32	; 50
    1ce6:	b0 e0       	ldi	r27, 0x00	; 0
    1ce8:	e2 e3       	ldi	r30, 0x32	; 50
    1cea:	f0 e0       	ldi	r31, 0x00	; 0
    1cec:	80 81       	ld	r24, Z
    1cee:	48 2f       	mov	r20, r24
    1cf0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf2:	28 2f       	mov	r18, r24
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	81 e0       	ldi	r24, 0x01	; 1
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	02 2e       	mov	r0, r18
    1cfc:	02 c0       	rjmp	.+4      	; 0x1d02 <GPIO_writePin+0x1bc>
    1cfe:	88 0f       	add	r24, r24
    1d00:	99 1f       	adc	r25, r25
    1d02:	0a 94       	dec	r0
    1d04:	e2 f7       	brpl	.-8      	; 0x1cfe <GPIO_writePin+0x1b8>
    1d06:	80 95       	com	r24
    1d08:	84 23       	and	r24, r20
    1d0a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1d0c:	0f 90       	pop	r0
    1d0e:	0f 90       	pop	r0
    1d10:	0f 90       	pop	r0
    1d12:	0f 90       	pop	r0
    1d14:	0f 90       	pop	r0
    1d16:	cf 91       	pop	r28
    1d18:	df 91       	pop	r29
    1d1a:	08 95       	ret

00001d1c <GPIO_setPortDir>:
 * Setup the direction of a certain Port.
 * The direction of port required input/output .
 * If the port number is not correct , the function will not handle the request.
 */
void GPIO_setPortDir(uint8 port_num, GPIO_PortDirection direction)
{
    1d1c:	df 93       	push	r29
    1d1e:	cf 93       	push	r28
    1d20:	00 d0       	rcall	.+0      	; 0x1d22 <GPIO_setPortDir+0x6>
    1d22:	00 d0       	rcall	.+0      	; 0x1d24 <GPIO_setPortDir+0x8>
    1d24:	cd b7       	in	r28, 0x3d	; 61
    1d26:	de b7       	in	r29, 0x3e	; 62
    1d28:	89 83       	std	Y+1, r24	; 0x01
    1d2a:	6a 83       	std	Y+2, r22	; 0x02
	if((port_num >= NUM_OF_PORTS))
    1d2c:	89 81       	ldd	r24, Y+1	; 0x01
    1d2e:	84 30       	cpi	r24, 0x04	; 4
    1d30:	08 f0       	brcs	.+2      	; 0x1d34 <GPIO_setPortDir+0x18>
    1d32:	52 c0       	rjmp	.+164    	; 0x1dd8 <GPIO_setPortDir+0xbc>
	{
		/* Do nothing */
	}
	else
	{
		switch(port_num)
    1d34:	89 81       	ldd	r24, Y+1	; 0x01
    1d36:	28 2f       	mov	r18, r24
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	3c 83       	std	Y+4, r19	; 0x04
    1d3c:	2b 83       	std	Y+3, r18	; 0x03
    1d3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d40:	9c 81       	ldd	r25, Y+4	; 0x04
    1d42:	81 30       	cpi	r24, 0x01	; 1
    1d44:	91 05       	cpc	r25, r1
    1d46:	11 f1       	breq	.+68     	; 0x1d8c <GPIO_setPortDir+0x70>
    1d48:	2b 81       	ldd	r18, Y+3	; 0x03
    1d4a:	3c 81       	ldd	r19, Y+4	; 0x04
    1d4c:	22 30       	cpi	r18, 0x02	; 2
    1d4e:	31 05       	cpc	r19, r1
    1d50:	2c f4       	brge	.+10     	; 0x1d5c <GPIO_setPortDir+0x40>
    1d52:	8b 81       	ldd	r24, Y+3	; 0x03
    1d54:	9c 81       	ldd	r25, Y+4	; 0x04
    1d56:	00 97       	sbiw	r24, 0x00	; 0
    1d58:	61 f0       	breq	.+24     	; 0x1d72 <GPIO_setPortDir+0x56>
    1d5a:	3e c0       	rjmp	.+124    	; 0x1dd8 <GPIO_setPortDir+0xbc>
    1d5c:	2b 81       	ldd	r18, Y+3	; 0x03
    1d5e:	3c 81       	ldd	r19, Y+4	; 0x04
    1d60:	22 30       	cpi	r18, 0x02	; 2
    1d62:	31 05       	cpc	r19, r1
    1d64:	01 f1       	breq	.+64     	; 0x1da6 <GPIO_setPortDir+0x8a>
    1d66:	8b 81       	ldd	r24, Y+3	; 0x03
    1d68:	9c 81       	ldd	r25, Y+4	; 0x04
    1d6a:	83 30       	cpi	r24, 0x03	; 3
    1d6c:	91 05       	cpc	r25, r1
    1d6e:	41 f1       	breq	.+80     	; 0x1dc0 <GPIO_setPortDir+0xa4>
    1d70:	33 c0       	rjmp	.+102    	; 0x1dd8 <GPIO_setPortDir+0xbc>
		{
		case PORTA_ID:
			if(direction==LOGIC_HIGH)
    1d72:	8a 81       	ldd	r24, Y+2	; 0x02
    1d74:	81 30       	cpi	r24, 0x01	; 1
    1d76:	29 f4       	brne	.+10     	; 0x1d82 <GPIO_setPortDir+0x66>
			{
				DDRA= direction;
    1d78:	ea e3       	ldi	r30, 0x3A	; 58
    1d7a:	f0 e0       	ldi	r31, 0x00	; 0
    1d7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7e:	80 83       	st	Z, r24
    1d80:	2b c0       	rjmp	.+86     	; 0x1dd8 <GPIO_setPortDir+0xbc>
			}
			else
			{
				DDRA= direction;
    1d82:	ea e3       	ldi	r30, 0x3A	; 58
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	8a 81       	ldd	r24, Y+2	; 0x02
    1d88:	80 83       	st	Z, r24
    1d8a:	26 c0       	rjmp	.+76     	; 0x1dd8 <GPIO_setPortDir+0xbc>
			}

			break;
		case PORTB_ID:
			if(direction==LOGIC_HIGH)
    1d8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8e:	81 30       	cpi	r24, 0x01	; 1
    1d90:	29 f4       	brne	.+10     	; 0x1d9c <GPIO_setPortDir+0x80>
			{
				DDRB= direction;
    1d92:	e7 e3       	ldi	r30, 0x37	; 55
    1d94:	f0 e0       	ldi	r31, 0x00	; 0
    1d96:	8a 81       	ldd	r24, Y+2	; 0x02
    1d98:	80 83       	st	Z, r24
    1d9a:	1e c0       	rjmp	.+60     	; 0x1dd8 <GPIO_setPortDir+0xbc>
			}
			else
			{
				DDRB= direction;
    1d9c:	e7 e3       	ldi	r30, 0x37	; 55
    1d9e:	f0 e0       	ldi	r31, 0x00	; 0
    1da0:	8a 81       	ldd	r24, Y+2	; 0x02
    1da2:	80 83       	st	Z, r24
    1da4:	19 c0       	rjmp	.+50     	; 0x1dd8 <GPIO_setPortDir+0xbc>
			}

			break;
		case PORTC_ID:
			if(direction==LOGIC_HIGH)
    1da6:	8a 81       	ldd	r24, Y+2	; 0x02
    1da8:	81 30       	cpi	r24, 0x01	; 1
    1daa:	29 f4       	brne	.+10     	; 0x1db6 <GPIO_setPortDir+0x9a>
			{
				DDRC= direction;
    1dac:	e4 e3       	ldi	r30, 0x34	; 52
    1dae:	f0 e0       	ldi	r31, 0x00	; 0
    1db0:	8a 81       	ldd	r24, Y+2	; 0x02
    1db2:	80 83       	st	Z, r24
    1db4:	11 c0       	rjmp	.+34     	; 0x1dd8 <GPIO_setPortDir+0xbc>
			}
			else
			{
				DDRC= direction;
    1db6:	e4 e3       	ldi	r30, 0x34	; 52
    1db8:	f0 e0       	ldi	r31, 0x00	; 0
    1dba:	8a 81       	ldd	r24, Y+2	; 0x02
    1dbc:	80 83       	st	Z, r24
    1dbe:	0c c0       	rjmp	.+24     	; 0x1dd8 <GPIO_setPortDir+0xbc>
			}

			break;
		case PORTD_ID:
			if(direction==LOGIC_HIGH)
    1dc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc2:	81 30       	cpi	r24, 0x01	; 1
    1dc4:	29 f4       	brne	.+10     	; 0x1dd0 <GPIO_setPortDir+0xb4>
			{
				DDRD= direction;
    1dc6:	e1 e3       	ldi	r30, 0x31	; 49
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	8a 81       	ldd	r24, Y+2	; 0x02
    1dcc:	80 83       	st	Z, r24
    1dce:	04 c0       	rjmp	.+8      	; 0x1dd8 <GPIO_setPortDir+0xbc>
			}
			else
			{
				DDRD= direction;
    1dd0:	e1 e3       	ldi	r30, 0x31	; 49
    1dd2:	f0 e0       	ldi	r31, 0x00	; 0
    1dd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd6:	80 83       	st	Z, r24
			}

			break;
		}
	}
}
    1dd8:	0f 90       	pop	r0
    1dda:	0f 90       	pop	r0
    1ddc:	0f 90       	pop	r0
    1dde:	0f 90       	pop	r0
    1de0:	cf 91       	pop	r28
    1de2:	df 91       	pop	r29
    1de4:	08 95       	ret

00001de6 <GPIO_readPort>:
 * Description:
 * Read and return the value of port , should the value will be (0..255) .
 * If the port number or pin number are not correct , the function can not handle the request.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1de6:	df 93       	push	r29
    1de8:	cf 93       	push	r28
    1dea:	00 d0       	rcall	.+0      	; 0x1dec <GPIO_readPort+0x6>
    1dec:	00 d0       	rcall	.+0      	; 0x1dee <GPIO_readPort+0x8>
    1dee:	cd b7       	in	r28, 0x3d	; 61
    1df0:	de b7       	in	r29, 0x3e	; 62
    1df2:	8a 83       	std	Y+2, r24	; 0x02
	STD_reg_8bits data;
	if((port_num >= NUM_OF_PORTS))
    1df4:	8a 81       	ldd	r24, Y+2	; 0x02
    1df6:	84 30       	cpi	r24, 0x04	; 4
    1df8:	90 f5       	brcc	.+100    	; 0x1e5e <GPIO_readPort+0x78>
	{
		/* Do nothing */
	}
	else
	{
		switch(port_num)
    1dfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfc:	28 2f       	mov	r18, r24
    1dfe:	30 e0       	ldi	r19, 0x00	; 0
    1e00:	3c 83       	std	Y+4, r19	; 0x04
    1e02:	2b 83       	std	Y+3, r18	; 0x03
    1e04:	8b 81       	ldd	r24, Y+3	; 0x03
    1e06:	9c 81       	ldd	r25, Y+4	; 0x04
    1e08:	81 30       	cpi	r24, 0x01	; 1
    1e0a:	91 05       	cpc	r25, r1
    1e0c:	d1 f0       	breq	.+52     	; 0x1e42 <GPIO_readPort+0x5c>
    1e0e:	2b 81       	ldd	r18, Y+3	; 0x03
    1e10:	3c 81       	ldd	r19, Y+4	; 0x04
    1e12:	22 30       	cpi	r18, 0x02	; 2
    1e14:	31 05       	cpc	r19, r1
    1e16:	2c f4       	brge	.+10     	; 0x1e22 <GPIO_readPort+0x3c>
    1e18:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e1c:	00 97       	sbiw	r24, 0x00	; 0
    1e1e:	61 f0       	breq	.+24     	; 0x1e38 <GPIO_readPort+0x52>
    1e20:	1e c0       	rjmp	.+60     	; 0x1e5e <GPIO_readPort+0x78>
    1e22:	2b 81       	ldd	r18, Y+3	; 0x03
    1e24:	3c 81       	ldd	r19, Y+4	; 0x04
    1e26:	22 30       	cpi	r18, 0x02	; 2
    1e28:	31 05       	cpc	r19, r1
    1e2a:	81 f0       	breq	.+32     	; 0x1e4c <GPIO_readPort+0x66>
    1e2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e30:	83 30       	cpi	r24, 0x03	; 3
    1e32:	91 05       	cpc	r25, r1
    1e34:	81 f0       	breq	.+32     	; 0x1e56 <GPIO_readPort+0x70>
    1e36:	13 c0       	rjmp	.+38     	; 0x1e5e <GPIO_readPort+0x78>
		{
		case PORTA_ID:
			data.Data=PINA;
    1e38:	e9 e3       	ldi	r30, 0x39	; 57
    1e3a:	f0 e0       	ldi	r31, 0x00	; 0
    1e3c:	80 81       	ld	r24, Z
    1e3e:	89 83       	std	Y+1, r24	; 0x01
    1e40:	0e c0       	rjmp	.+28     	; 0x1e5e <GPIO_readPort+0x78>
			break;
		case PORTB_ID:
			data.Data=PINB;
    1e42:	e6 e3       	ldi	r30, 0x36	; 54
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	80 81       	ld	r24, Z
    1e48:	89 83       	std	Y+1, r24	; 0x01
    1e4a:	09 c0       	rjmp	.+18     	; 0x1e5e <GPIO_readPort+0x78>
			break;
		case PORTC_ID:
			data.Data=PINC;
    1e4c:	e3 e3       	ldi	r30, 0x33	; 51
    1e4e:	f0 e0       	ldi	r31, 0x00	; 0
    1e50:	80 81       	ld	r24, Z
    1e52:	89 83       	std	Y+1, r24	; 0x01
    1e54:	04 c0       	rjmp	.+8      	; 0x1e5e <GPIO_readPort+0x78>
			break;
		case PORTD_ID:
			data.Data=PIND;
    1e56:	e0 e3       	ldi	r30, 0x30	; 48
    1e58:	f0 e0       	ldi	r31, 0x00	; 0
    1e5a:	80 81       	ld	r24, Z
    1e5c:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return data.Data;
    1e5e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e60:	0f 90       	pop	r0
    1e62:	0f 90       	pop	r0
    1e64:	0f 90       	pop	r0
    1e66:	0f 90       	pop	r0
    1e68:	cf 91       	pop	r28
    1e6a:	df 91       	pop	r29
    1e6c:	08 95       	ret

00001e6e <GPIO_writePort>:
 * Description:
 * Write value on the Port , should the value be (0..255) .
 * If the port number is not correct , the function can not handle the request.
 */
void GPIO_writePort(uint8 port_num , uint8 value)
{
    1e6e:	df 93       	push	r29
    1e70:	cf 93       	push	r28
    1e72:	00 d0       	rcall	.+0      	; 0x1e74 <GPIO_writePort+0x6>
    1e74:	00 d0       	rcall	.+0      	; 0x1e76 <GPIO_writePort+0x8>
    1e76:	cd b7       	in	r28, 0x3d	; 61
    1e78:	de b7       	in	r29, 0x3e	; 62
    1e7a:	89 83       	std	Y+1, r24	; 0x01
    1e7c:	6a 83       	std	Y+2, r22	; 0x02
	if((port_num >= NUM_OF_PORTS))
    1e7e:	89 81       	ldd	r24, Y+1	; 0x01
    1e80:	84 30       	cpi	r24, 0x04	; 4
    1e82:	90 f5       	brcc	.+100    	; 0x1ee8 <GPIO_writePort+0x7a>
	{
		/* Do nothing */
	}
	else
	{
		switch(port_num)
    1e84:	89 81       	ldd	r24, Y+1	; 0x01
    1e86:	28 2f       	mov	r18, r24
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	3c 83       	std	Y+4, r19	; 0x04
    1e8c:	2b 83       	std	Y+3, r18	; 0x03
    1e8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e90:	9c 81       	ldd	r25, Y+4	; 0x04
    1e92:	81 30       	cpi	r24, 0x01	; 1
    1e94:	91 05       	cpc	r25, r1
    1e96:	d1 f0       	breq	.+52     	; 0x1ecc <GPIO_writePort+0x5e>
    1e98:	2b 81       	ldd	r18, Y+3	; 0x03
    1e9a:	3c 81       	ldd	r19, Y+4	; 0x04
    1e9c:	22 30       	cpi	r18, 0x02	; 2
    1e9e:	31 05       	cpc	r19, r1
    1ea0:	2c f4       	brge	.+10     	; 0x1eac <GPIO_writePort+0x3e>
    1ea2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ea6:	00 97       	sbiw	r24, 0x00	; 0
    1ea8:	61 f0       	breq	.+24     	; 0x1ec2 <GPIO_writePort+0x54>
    1eaa:	1e c0       	rjmp	.+60     	; 0x1ee8 <GPIO_writePort+0x7a>
    1eac:	2b 81       	ldd	r18, Y+3	; 0x03
    1eae:	3c 81       	ldd	r19, Y+4	; 0x04
    1eb0:	22 30       	cpi	r18, 0x02	; 2
    1eb2:	31 05       	cpc	r19, r1
    1eb4:	81 f0       	breq	.+32     	; 0x1ed6 <GPIO_writePort+0x68>
    1eb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eba:	83 30       	cpi	r24, 0x03	; 3
    1ebc:	91 05       	cpc	r25, r1
    1ebe:	81 f0       	breq	.+32     	; 0x1ee0 <GPIO_writePort+0x72>
    1ec0:	13 c0       	rjmp	.+38     	; 0x1ee8 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA=value;
    1ec2:	eb e3       	ldi	r30, 0x3B	; 59
    1ec4:	f0 e0       	ldi	r31, 0x00	; 0
    1ec6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec8:	80 83       	st	Z, r24
    1eca:	0e c0       	rjmp	.+28     	; 0x1ee8 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB=value;
    1ecc:	e8 e3       	ldi	r30, 0x38	; 56
    1ece:	f0 e0       	ldi	r31, 0x00	; 0
    1ed0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed2:	80 83       	st	Z, r24
    1ed4:	09 c0       	rjmp	.+18     	; 0x1ee8 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC=value;
    1ed6:	e5 e3       	ldi	r30, 0x35	; 53
    1ed8:	f0 e0       	ldi	r31, 0x00	; 0
    1eda:	8a 81       	ldd	r24, Y+2	; 0x02
    1edc:	80 83       	st	Z, r24
    1ede:	04 c0       	rjmp	.+8      	; 0x1ee8 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD=value;
    1ee0:	e2 e3       	ldi	r30, 0x32	; 50
    1ee2:	f0 e0       	ldi	r31, 0x00	; 0
    1ee4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee6:	80 83       	st	Z, r24
			break;
		}
	}
}
    1ee8:	0f 90       	pop	r0
    1eea:	0f 90       	pop	r0
    1eec:	0f 90       	pop	r0
    1eee:	0f 90       	pop	r0
    1ef0:	cf 91       	pop	r28
    1ef2:	df 91       	pop	r29
    1ef4:	08 95       	ret

00001ef6 <GPIO_flibPin>:
 * Description:
 * Flip the value of pin , if value of pin High will be LOW and vice versa .
 * If the port number and pin number are not correct , the function can not handle the request.
 */
void GPIO_flibPin(uint8 port_num , uint8 pin_num)
{
    1ef6:	df 93       	push	r29
    1ef8:	cf 93       	push	r28
    1efa:	00 d0       	rcall	.+0      	; 0x1efc <GPIO_flibPin+0x6>
    1efc:	00 d0       	rcall	.+0      	; 0x1efe <GPIO_flibPin+0x8>
    1efe:	cd b7       	in	r28, 0x3d	; 61
    1f00:	de b7       	in	r29, 0x3e	; 62
    1f02:	89 83       	std	Y+1, r24	; 0x01
    1f04:	6a 83       	std	Y+2, r22	; 0x02
	if((port_num >= NUM_OF_PORTS)||(pin_num >= NUM_OF_PINS_PER_PORT))
    1f06:	89 81       	ldd	r24, Y+1	; 0x01
    1f08:	84 30       	cpi	r24, 0x04	; 4
    1f0a:	08 f0       	brcs	.+2      	; 0x1f0e <GPIO_flibPin+0x18>
    1f0c:	72 c0       	rjmp	.+228    	; 0x1ff2 <GPIO_flibPin+0xfc>
    1f0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f10:	88 30       	cpi	r24, 0x08	; 8
    1f12:	08 f0       	brcs	.+2      	; 0x1f16 <GPIO_flibPin+0x20>
    1f14:	6e c0       	rjmp	.+220    	; 0x1ff2 <GPIO_flibPin+0xfc>
	{
		/* Do nothing */
	}
	else
	{
		switch(port_num){
    1f16:	89 81       	ldd	r24, Y+1	; 0x01
    1f18:	28 2f       	mov	r18, r24
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	3c 83       	std	Y+4, r19	; 0x04
    1f1e:	2b 83       	std	Y+3, r18	; 0x03
    1f20:	8b 81       	ldd	r24, Y+3	; 0x03
    1f22:	9c 81       	ldd	r25, Y+4	; 0x04
    1f24:	81 30       	cpi	r24, 0x01	; 1
    1f26:	91 05       	cpc	r25, r1
    1f28:	49 f1       	breq	.+82     	; 0x1f7c <GPIO_flibPin+0x86>
    1f2a:	2b 81       	ldd	r18, Y+3	; 0x03
    1f2c:	3c 81       	ldd	r19, Y+4	; 0x04
    1f2e:	22 30       	cpi	r18, 0x02	; 2
    1f30:	31 05       	cpc	r19, r1
    1f32:	2c f4       	brge	.+10     	; 0x1f3e <GPIO_flibPin+0x48>
    1f34:	8b 81       	ldd	r24, Y+3	; 0x03
    1f36:	9c 81       	ldd	r25, Y+4	; 0x04
    1f38:	00 97       	sbiw	r24, 0x00	; 0
    1f3a:	61 f0       	breq	.+24     	; 0x1f54 <GPIO_flibPin+0x5e>
    1f3c:	5a c0       	rjmp	.+180    	; 0x1ff2 <GPIO_flibPin+0xfc>
    1f3e:	2b 81       	ldd	r18, Y+3	; 0x03
    1f40:	3c 81       	ldd	r19, Y+4	; 0x04
    1f42:	22 30       	cpi	r18, 0x02	; 2
    1f44:	31 05       	cpc	r19, r1
    1f46:	71 f1       	breq	.+92     	; 0x1fa4 <GPIO_flibPin+0xae>
    1f48:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f4c:	83 30       	cpi	r24, 0x03	; 3
    1f4e:	91 05       	cpc	r25, r1
    1f50:	e9 f1       	breq	.+122    	; 0x1fcc <GPIO_flibPin+0xd6>
    1f52:	4f c0       	rjmp	.+158    	; 0x1ff2 <GPIO_flibPin+0xfc>
		case PORTA_ID:
			TOGGLE_BIT(PORTA,pin_num);
    1f54:	ab e3       	ldi	r26, 0x3B	; 59
    1f56:	b0 e0       	ldi	r27, 0x00	; 0
    1f58:	eb e3       	ldi	r30, 0x3B	; 59
    1f5a:	f0 e0       	ldi	r31, 0x00	; 0
    1f5c:	80 81       	ld	r24, Z
    1f5e:	48 2f       	mov	r20, r24
    1f60:	8a 81       	ldd	r24, Y+2	; 0x02
    1f62:	28 2f       	mov	r18, r24
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	81 e0       	ldi	r24, 0x01	; 1
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	02 2e       	mov	r0, r18
    1f6c:	02 c0       	rjmp	.+4      	; 0x1f72 <GPIO_flibPin+0x7c>
    1f6e:	88 0f       	add	r24, r24
    1f70:	99 1f       	adc	r25, r25
    1f72:	0a 94       	dec	r0
    1f74:	e2 f7       	brpl	.-8      	; 0x1f6e <GPIO_flibPin+0x78>
    1f76:	84 27       	eor	r24, r20
    1f78:	8c 93       	st	X, r24
    1f7a:	3b c0       	rjmp	.+118    	; 0x1ff2 <GPIO_flibPin+0xfc>
			break;
		case PORTB_ID:
			TOGGLE_BIT(PORTB,pin_num);
    1f7c:	a8 e3       	ldi	r26, 0x38	; 56
    1f7e:	b0 e0       	ldi	r27, 0x00	; 0
    1f80:	e8 e3       	ldi	r30, 0x38	; 56
    1f82:	f0 e0       	ldi	r31, 0x00	; 0
    1f84:	80 81       	ld	r24, Z
    1f86:	48 2f       	mov	r20, r24
    1f88:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8a:	28 2f       	mov	r18, r24
    1f8c:	30 e0       	ldi	r19, 0x00	; 0
    1f8e:	81 e0       	ldi	r24, 0x01	; 1
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	02 2e       	mov	r0, r18
    1f94:	02 c0       	rjmp	.+4      	; 0x1f9a <GPIO_flibPin+0xa4>
    1f96:	88 0f       	add	r24, r24
    1f98:	99 1f       	adc	r25, r25
    1f9a:	0a 94       	dec	r0
    1f9c:	e2 f7       	brpl	.-8      	; 0x1f96 <GPIO_flibPin+0xa0>
    1f9e:	84 27       	eor	r24, r20
    1fa0:	8c 93       	st	X, r24
    1fa2:	27 c0       	rjmp	.+78     	; 0x1ff2 <GPIO_flibPin+0xfc>
			break;
		case PORTC_ID:
			TOGGLE_BIT(PORTC,pin_num);
    1fa4:	a5 e3       	ldi	r26, 0x35	; 53
    1fa6:	b0 e0       	ldi	r27, 0x00	; 0
    1fa8:	e5 e3       	ldi	r30, 0x35	; 53
    1faa:	f0 e0       	ldi	r31, 0x00	; 0
    1fac:	80 81       	ld	r24, Z
    1fae:	48 2f       	mov	r20, r24
    1fb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb2:	28 2f       	mov	r18, r24
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	81 e0       	ldi	r24, 0x01	; 1
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	02 2e       	mov	r0, r18
    1fbc:	02 c0       	rjmp	.+4      	; 0x1fc2 <GPIO_flibPin+0xcc>
    1fbe:	88 0f       	add	r24, r24
    1fc0:	99 1f       	adc	r25, r25
    1fc2:	0a 94       	dec	r0
    1fc4:	e2 f7       	brpl	.-8      	; 0x1fbe <GPIO_flibPin+0xc8>
    1fc6:	84 27       	eor	r24, r20
    1fc8:	8c 93       	st	X, r24
    1fca:	13 c0       	rjmp	.+38     	; 0x1ff2 <GPIO_flibPin+0xfc>
			break;
		case PORTD_ID:
			TOGGLE_BIT(PORTD,pin_num);
    1fcc:	a2 e3       	ldi	r26, 0x32	; 50
    1fce:	b0 e0       	ldi	r27, 0x00	; 0
    1fd0:	e2 e3       	ldi	r30, 0x32	; 50
    1fd2:	f0 e0       	ldi	r31, 0x00	; 0
    1fd4:	80 81       	ld	r24, Z
    1fd6:	48 2f       	mov	r20, r24
    1fd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fda:	28 2f       	mov	r18, r24
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	81 e0       	ldi	r24, 0x01	; 1
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	02 2e       	mov	r0, r18
    1fe4:	02 c0       	rjmp	.+4      	; 0x1fea <GPIO_flibPin+0xf4>
    1fe6:	88 0f       	add	r24, r24
    1fe8:	99 1f       	adc	r25, r25
    1fea:	0a 94       	dec	r0
    1fec:	e2 f7       	brpl	.-8      	; 0x1fe6 <GPIO_flibPin+0xf0>
    1fee:	84 27       	eor	r24, r20
    1ff0:	8c 93       	st	X, r24
			break;
		}
	}
}
    1ff2:	0f 90       	pop	r0
    1ff4:	0f 90       	pop	r0
    1ff6:	0f 90       	pop	r0
    1ff8:	0f 90       	pop	r0
    1ffa:	cf 91       	pop	r28
    1ffc:	df 91       	pop	r29
    1ffe:	08 95       	ret

00002000 <GPIO_flibPort>:
 * Description:
 * Flip the value of port , if value of port High will be LOW and vice versa (0x0F=>0xF0) .
 * If the port number is not correct , the function can not handle the request.
 */
void GPIO_flibPort(uint8 port_num)
{
    2000:	df 93       	push	r29
    2002:	cf 93       	push	r28
    2004:	00 d0       	rcall	.+0      	; 0x2006 <GPIO_flibPort+0x6>
    2006:	0f 92       	push	r0
    2008:	cd b7       	in	r28, 0x3d	; 61
    200a:	de b7       	in	r29, 0x3e	; 62
    200c:	89 83       	std	Y+1, r24	; 0x01
	if((port_num >= NUM_OF_PORTS))
    200e:	89 81       	ldd	r24, Y+1	; 0x01
    2010:	84 30       	cpi	r24, 0x04	; 4
    2012:	08 f0       	brcs	.+2      	; 0x2016 <GPIO_flibPort+0x16>
    2014:	3e c0       	rjmp	.+124    	; 0x2092 <GPIO_flibPort+0x92>
	{
		/* Do nothing */
	}
	else
	{
		switch(port_num){
    2016:	89 81       	ldd	r24, Y+1	; 0x01
    2018:	28 2f       	mov	r18, r24
    201a:	30 e0       	ldi	r19, 0x00	; 0
    201c:	3b 83       	std	Y+3, r19	; 0x03
    201e:	2a 83       	std	Y+2, r18	; 0x02
    2020:	8a 81       	ldd	r24, Y+2	; 0x02
    2022:	9b 81       	ldd	r25, Y+3	; 0x03
    2024:	81 30       	cpi	r24, 0x01	; 1
    2026:	91 05       	cpc	r25, r1
    2028:	e9 f0       	breq	.+58     	; 0x2064 <GPIO_flibPort+0x64>
    202a:	2a 81       	ldd	r18, Y+2	; 0x02
    202c:	3b 81       	ldd	r19, Y+3	; 0x03
    202e:	22 30       	cpi	r18, 0x02	; 2
    2030:	31 05       	cpc	r19, r1
    2032:	2c f4       	brge	.+10     	; 0x203e <GPIO_flibPort+0x3e>
    2034:	8a 81       	ldd	r24, Y+2	; 0x02
    2036:	9b 81       	ldd	r25, Y+3	; 0x03
    2038:	00 97       	sbiw	r24, 0x00	; 0
    203a:	61 f0       	breq	.+24     	; 0x2054 <GPIO_flibPort+0x54>
    203c:	2a c0       	rjmp	.+84     	; 0x2092 <GPIO_flibPort+0x92>
    203e:	2a 81       	ldd	r18, Y+2	; 0x02
    2040:	3b 81       	ldd	r19, Y+3	; 0x03
    2042:	22 30       	cpi	r18, 0x02	; 2
    2044:	31 05       	cpc	r19, r1
    2046:	b1 f0       	breq	.+44     	; 0x2074 <GPIO_flibPort+0x74>
    2048:	8a 81       	ldd	r24, Y+2	; 0x02
    204a:	9b 81       	ldd	r25, Y+3	; 0x03
    204c:	83 30       	cpi	r24, 0x03	; 3
    204e:	91 05       	cpc	r25, r1
    2050:	c9 f0       	breq	.+50     	; 0x2084 <GPIO_flibPort+0x84>
    2052:	1f c0       	rjmp	.+62     	; 0x2092 <GPIO_flibPort+0x92>
		case PORTA_ID:
			PORTA=~PORTA;
    2054:	ab e3       	ldi	r26, 0x3B	; 59
    2056:	b0 e0       	ldi	r27, 0x00	; 0
    2058:	eb e3       	ldi	r30, 0x3B	; 59
    205a:	f0 e0       	ldi	r31, 0x00	; 0
    205c:	80 81       	ld	r24, Z
    205e:	80 95       	com	r24
    2060:	8c 93       	st	X, r24
    2062:	17 c0       	rjmp	.+46     	; 0x2092 <GPIO_flibPort+0x92>
			break;
		case PORTB_ID:
			PORTB=~PORTB;
    2064:	a8 e3       	ldi	r26, 0x38	; 56
    2066:	b0 e0       	ldi	r27, 0x00	; 0
    2068:	e8 e3       	ldi	r30, 0x38	; 56
    206a:	f0 e0       	ldi	r31, 0x00	; 0
    206c:	80 81       	ld	r24, Z
    206e:	80 95       	com	r24
    2070:	8c 93       	st	X, r24
    2072:	0f c0       	rjmp	.+30     	; 0x2092 <GPIO_flibPort+0x92>
			break;
		case PORTC_ID:
			PORTC=~PORTC;
    2074:	a5 e3       	ldi	r26, 0x35	; 53
    2076:	b0 e0       	ldi	r27, 0x00	; 0
    2078:	e5 e3       	ldi	r30, 0x35	; 53
    207a:	f0 e0       	ldi	r31, 0x00	; 0
    207c:	80 81       	ld	r24, Z
    207e:	80 95       	com	r24
    2080:	8c 93       	st	X, r24
    2082:	07 c0       	rjmp	.+14     	; 0x2092 <GPIO_flibPort+0x92>
			break;
		case PORTD_ID:
			PORTD=~PORTD;
    2084:	a2 e3       	ldi	r26, 0x32	; 50
    2086:	b0 e0       	ldi	r27, 0x00	; 0
    2088:	e2 e3       	ldi	r30, 0x32	; 50
    208a:	f0 e0       	ldi	r31, 0x00	; 0
    208c:	80 81       	ld	r24, Z
    208e:	80 95       	com	r24
    2090:	8c 93       	st	X, r24
			break;
		}
	}
}
    2092:	0f 90       	pop	r0
    2094:	0f 90       	pop	r0
    2096:	0f 90       	pop	r0
    2098:	cf 91       	pop	r28
    209a:	df 91       	pop	r29
    209c:	08 95       	ret

0000209e <__vector_14>:
static volatile void(*g_ADC_CallBack_Fun)(void)= NULL_PTR;
extern volatile uint16 g_ADC_var = 0;
/*******************************************************************************
 *                                   ISR
 *******************************************************************************/
ISR(ADC_vect){
    209e:	1f 92       	push	r1
    20a0:	0f 92       	push	r0
    20a2:	0f b6       	in	r0, 0x3f	; 63
    20a4:	0f 92       	push	r0
    20a6:	11 24       	eor	r1, r1
    20a8:	2f 93       	push	r18
    20aa:	3f 93       	push	r19
    20ac:	4f 93       	push	r20
    20ae:	5f 93       	push	r21
    20b0:	6f 93       	push	r22
    20b2:	7f 93       	push	r23
    20b4:	8f 93       	push	r24
    20b6:	9f 93       	push	r25
    20b8:	af 93       	push	r26
    20ba:	bf 93       	push	r27
    20bc:	ef 93       	push	r30
    20be:	ff 93       	push	r31
    20c0:	df 93       	push	r29
    20c2:	cf 93       	push	r28
    20c4:	cd b7       	in	r28, 0x3d	; 61
    20c6:	de b7       	in	r29, 0x3e	; 62
	 /* Save data from ADC data register in Extern global variable */
	g_ADC_var =ADC;
    20c8:	e4 e2       	ldi	r30, 0x24	; 36
    20ca:	f0 e0       	ldi	r31, 0x00	; 0
    20cc:	80 81       	ld	r24, Z
    20ce:	91 81       	ldd	r25, Z+1	; 0x01
    20d0:	90 93 8b 01 	sts	0x018B, r25
    20d4:	80 93 8a 01 	sts	0x018A, r24
	 /* Call the Call Back function in the application after the edge is detected */
	if(g_ADC_CallBack_Fun != NULL_PTR){
    20d8:	80 91 88 01 	lds	r24, 0x0188
    20dc:	90 91 89 01 	lds	r25, 0x0189
    20e0:	00 97       	sbiw	r24, 0x00	; 0
    20e2:	29 f0       	breq	.+10     	; 0x20ee <__vector_14+0x50>

		/* This is called --> Call Back Notification */
		/* another method to call the function using pointer to function g_callBackPtr(); */
		(g_ADC_CallBack_Fun)();
    20e4:	e0 91 88 01 	lds	r30, 0x0188
    20e8:	f0 91 89 01 	lds	r31, 0x0189
    20ec:	09 95       	icall
	}
}
    20ee:	cf 91       	pop	r28
    20f0:	df 91       	pop	r29
    20f2:	ff 91       	pop	r31
    20f4:	ef 91       	pop	r30
    20f6:	bf 91       	pop	r27
    20f8:	af 91       	pop	r26
    20fa:	9f 91       	pop	r25
    20fc:	8f 91       	pop	r24
    20fe:	7f 91       	pop	r23
    2100:	6f 91       	pop	r22
    2102:	5f 91       	pop	r21
    2104:	4f 91       	pop	r20
    2106:	3f 91       	pop	r19
    2108:	2f 91       	pop	r18
    210a:	0f 90       	pop	r0
    210c:	0f be       	out	0x3f, r0	; 63
    210e:	0f 90       	pop	r0
    2110:	1f 90       	pop	r1
    2112:	18 95       	reti

00002114 <ADC_Init>:
 *[Arg]   : Pointer to structure
 *[IN]    : Vref and Clk
 *[OUT]   : void
 *[Return]: void
 ------------------------------------------------------------------------------*/
void ADC_Init(ADC_Config *config){
    2114:	df 93       	push	r29
    2116:	cf 93       	push	r28
    2118:	00 d0       	rcall	.+0      	; 0x211a <ADC_Init+0x6>
    211a:	cd b7       	in	r28, 0x3d	; 61
    211c:	de b7       	in	r29, 0x3e	; 62
    211e:	9a 83       	std	Y+2, r25	; 0x02
    2120:	89 83       	std	Y+1, r24	; 0x01
	/* ADMUX Register Bits Description:
     * REFS1:0 = configured by user
	 * ADLAR   = 0 right adjusted
	 * MUX4:0  = 00000 to choose channel 0 as initialization
	 */
	ADMUX |= (config->vref << 6);
    2122:	a7 e2       	ldi	r26, 0x27	; 39
    2124:	b0 e0       	ldi	r27, 0x00	; 0
    2126:	e7 e2       	ldi	r30, 0x27	; 39
    2128:	f0 e0       	ldi	r31, 0x00	; 0
    212a:	80 81       	ld	r24, Z
    212c:	28 2f       	mov	r18, r24
    212e:	e9 81       	ldd	r30, Y+1	; 0x01
    2130:	fa 81       	ldd	r31, Y+2	; 0x02
    2132:	80 81       	ld	r24, Z
    2134:	88 2f       	mov	r24, r24
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	00 24       	eor	r0, r0
    213a:	96 95       	lsr	r25
    213c:	87 95       	ror	r24
    213e:	07 94       	ror	r0
    2140:	96 95       	lsr	r25
    2142:	87 95       	ror	r24
    2144:	07 94       	ror	r0
    2146:	98 2f       	mov	r25, r24
    2148:	80 2d       	mov	r24, r0
    214a:	82 2b       	or	r24, r18
    214c:	8c 93       	st	X, r24
	 * ADEN    = 1 Enable ADC
	 * ADIE    = 0 Disable ADC Interrupt
	 * ADATE   = 0 Disable Auto Trigger
	 * ADPS2:0 = configured by user  --> ADC must operate in range 50-200Khz
	 */
	ADCSRA |= (config->clk);
    214e:	a6 e2       	ldi	r26, 0x26	; 38
    2150:	b0 e0       	ldi	r27, 0x00	; 0
    2152:	e6 e2       	ldi	r30, 0x26	; 38
    2154:	f0 e0       	ldi	r31, 0x00	; 0
    2156:	90 81       	ld	r25, Z
    2158:	e9 81       	ldd	r30, Y+1	; 0x01
    215a:	fa 81       	ldd	r31, Y+2	; 0x02
    215c:	81 81       	ldd	r24, Z+1	; 0x01
    215e:	89 2b       	or	r24, r25
    2160:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADEN);
    2162:	a6 e2       	ldi	r26, 0x26	; 38
    2164:	b0 e0       	ldi	r27, 0x00	; 0
    2166:	e6 e2       	ldi	r30, 0x26	; 38
    2168:	f0 e0       	ldi	r31, 0x00	; 0
    216a:	80 81       	ld	r24, Z
    216c:	80 68       	ori	r24, 0x80	; 128
    216e:	8c 93       	st	X, r24
	 *         = 100 Timer0 Overflow
	 *         = 101 Timer1 compare match B
	 *         = 110 Timer1 Overflow
	 *         = 111 Timer1 Capture Event
	 */
	SFIOR = 0x00;  /* if you want use SFIOR must enable 'ADATE bit' from ADCSRA register */
    2170:	e0 e5       	ldi	r30, 0x50	; 80
    2172:	f0 e0       	ldi	r31, 0x00	; 0
    2174:	10 82       	st	Z, r1
}
    2176:	0f 90       	pop	r0
    2178:	0f 90       	pop	r0
    217a:	cf 91       	pop	r28
    217c:	df 91       	pop	r29
    217e:	08 95       	ret

00002180 <ADC_ReadChannel>:
 *[Arg]   : integer number (uint8)
 *[IN]    : number of ADC_pin
 *[OUT]   :
 *[Return]: number versus value Read from sensor (uint16)
 ------------------------------------------------------------------------------*/
uint16 ADC_ReadChannel(uint8 Channel_Num){
    2180:	df 93       	push	r29
    2182:	cf 93       	push	r28
    2184:	0f 92       	push	r0
    2186:	cd b7       	in	r28, 0x3d	; 61
    2188:	de b7       	in	r29, 0x3e	; 62
    218a:	89 83       	std	Y+1, r24	; 0x01
	Channel_Num &=0x07;     /* Input channel number must be from 0 --> 7 */
    218c:	89 81       	ldd	r24, Y+1	; 0x01
    218e:	87 70       	andi	r24, 0x07	; 7
    2190:	89 83       	std	Y+1, r24	; 0x01
	/* ADMUX Register Bits Description:
     * REFS1:0 = configured by user
	 * ADLAR   = 0 right adjusted
	 * MUX4:0  = 00000 to choose channel 0 as initialization
	 */
	ADMUX &= 0xE0;         /* Clear first 5 bits in the ADMUX before set the required channel */
    2192:	a7 e2       	ldi	r26, 0x27	; 39
    2194:	b0 e0       	ldi	r27, 0x00	; 0
    2196:	e7 e2       	ldi	r30, 0x27	; 39
    2198:	f0 e0       	ldi	r31, 0x00	; 0
    219a:	80 81       	ld	r24, Z
    219c:	80 7e       	andi	r24, 0xE0	; 224
    219e:	8c 93       	st	X, r24
	ADMUX |= (Channel_Num);/* Set the required channel */
    21a0:	a7 e2       	ldi	r26, 0x27	; 39
    21a2:	b0 e0       	ldi	r27, 0x00	; 0
    21a4:	e7 e2       	ldi	r30, 0x27	; 39
    21a6:	f0 e0       	ldi	r31, 0x00	; 0
    21a8:	90 81       	ld	r25, Z
    21aa:	89 81       	ldd	r24, Y+1	; 0x01
    21ac:	89 2b       	or	r24, r25
    21ae:	8c 93       	st	X, r24

#if ADC_Use_Interrupt == ENABLE
	ADCSRA |= (1<<ADIE);   /* Enable ADC Interrupt */
#endif
	ADCSRA |= (1<<ADSC);   /* Start Conversion */
    21b0:	a6 e2       	ldi	r26, 0x26	; 38
    21b2:	b0 e0       	ldi	r27, 0x00	; 0
    21b4:	e6 e2       	ldi	r30, 0x26	; 38
    21b6:	f0 e0       	ldi	r31, 0x00	; 0
    21b8:	80 81       	ld	r24, Z
    21ba:	80 64       	ori	r24, 0x40	; 64
    21bc:	8c 93       	st	X, r24

#if ADC_Use_Poling == ENABLE
	ADCSRA &= ~(1<<ADIE);               /* To be sure that ADC Interrupt Disable */
    21be:	a6 e2       	ldi	r26, 0x26	; 38
    21c0:	b0 e0       	ldi	r27, 0x00	; 0
    21c2:	e6 e2       	ldi	r30, 0x26	; 38
    21c4:	f0 e0       	ldi	r31, 0x00	; 0
    21c6:	80 81       	ld	r24, Z
    21c8:	87 7f       	andi	r24, 0xF7	; 247
    21ca:	8c 93       	st	X, r24
	while(BIT_IS_CLEAR(ADCSRA,ADIF)){}  /* I can wait The conversion to complete (just take 5 clk cycles) */
    21cc:	e6 e2       	ldi	r30, 0x26	; 38
    21ce:	f0 e0       	ldi	r31, 0x00	; 0
    21d0:	80 81       	ld	r24, Z
    21d2:	88 2f       	mov	r24, r24
    21d4:	90 e0       	ldi	r25, 0x00	; 0
    21d6:	80 71       	andi	r24, 0x10	; 16
    21d8:	90 70       	andi	r25, 0x00	; 0
    21da:	00 97       	sbiw	r24, 0x00	; 0
    21dc:	b9 f3       	breq	.-18     	; 0x21cc <ADC_ReadChannel+0x4c>
	  return ADC;                       /* This is ADC Data Register */
    21de:	e4 e2       	ldi	r30, 0x24	; 36
    21e0:	f0 e0       	ldi	r31, 0x00	; 0
    21e2:	80 81       	ld	r24, Z
    21e4:	91 81       	ldd	r25, Z+1	; 0x01
#endif
}
    21e6:	0f 90       	pop	r0
    21e8:	cf 91       	pop	r28
    21ea:	df 91       	pop	r29
    21ec:	08 95       	ret

000021ee <ADC_SetCallBack>:
 *[Arg]   : Pointer to Function
 *[IN]    : Address the function
 *[OUT]   : void
 *[Return]: void
 ------------------------------------------------------------------------------*/
void ADC_SetCallBack(void (*Ptr_To_Fun)(void)){
    21ee:	df 93       	push	r29
    21f0:	cf 93       	push	r28
    21f2:	00 d0       	rcall	.+0      	; 0x21f4 <ADC_SetCallBack+0x6>
    21f4:	cd b7       	in	r28, 0x3d	; 61
    21f6:	de b7       	in	r29, 0x3e	; 62
    21f8:	9a 83       	std	Y+2, r25	; 0x02
    21fa:	89 83       	std	Y+1, r24	; 0x01
	g_ADC_CallBack_Fun = Ptr_To_Fun;
    21fc:	89 81       	ldd	r24, Y+1	; 0x01
    21fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2200:	90 93 89 01 	sts	0x0189, r25
    2204:	80 93 88 01 	sts	0x0188, r24
}
    2208:	0f 90       	pop	r0
    220a:	0f 90       	pop	r0
    220c:	cf 91       	pop	r28
    220e:	df 91       	pop	r29
    2210:	08 95       	ret

00002212 <LM35_getTemperature>:
/*
 * Description :
 * Function responsible for calculate the temperature from the ADC digital value.
 */
uint8 LM35_getTemperature(void)
{
    2212:	df 93       	push	r29
    2214:	cf 93       	push	r28
    2216:	cd b7       	in	r28, 0x3d	; 61
    2218:	de b7       	in	r29, 0x3e	; 62
    221a:	2f 97       	sbiw	r28, 0x0f	; 15
    221c:	0f b6       	in	r0, 0x3f	; 63
    221e:	f8 94       	cli
    2220:	de bf       	out	0x3e, r29	; 62
    2222:	0f be       	out	0x3f, r0	; 63
    2224:	cd bf       	out	0x3d, r28	; 61
	uint8 temp_value = 0;
    2226:	1f 86       	std	Y+15, r1	; 0x0f

	/* Read ADC channel where the temperature sensor is connected */
	ADC_ReadChannel(SENSOR_CHANNEL_ID);
    2228:	82 e0       	ldi	r24, 0x02	; 2
    222a:	0e 94 c0 10 	call	0x2180	; 0x2180 <ADC_ReadChannel>
    222e:	80 e0       	ldi	r24, 0x00	; 0
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	a0 ea       	ldi	r26, 0xA0	; 160
    2234:	b0 e4       	ldi	r27, 0x40	; 64
    2236:	8b 87       	std	Y+11, r24	; 0x0b
    2238:	9c 87       	std	Y+12, r25	; 0x0c
    223a:	ad 87       	std	Y+13, r26	; 0x0d
    223c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    223e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2240:	7c 85       	ldd	r23, Y+12	; 0x0c
    2242:	8d 85       	ldd	r24, Y+13	; 0x0d
    2244:	9e 85       	ldd	r25, Y+14	; 0x0e
    2246:	20 e0       	ldi	r18, 0x00	; 0
    2248:	30 e0       	ldi	r19, 0x00	; 0
    224a:	4a ef       	ldi	r20, 0xFA	; 250
    224c:	54 e4       	ldi	r21, 0x44	; 68
    224e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2252:	dc 01       	movw	r26, r24
    2254:	cb 01       	movw	r24, r22
    2256:	8f 83       	std	Y+7, r24	; 0x07
    2258:	98 87       	std	Y+8, r25	; 0x08
    225a:	a9 87       	std	Y+9, r26	; 0x09
    225c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    225e:	6f 81       	ldd	r22, Y+7	; 0x07
    2260:	78 85       	ldd	r23, Y+8	; 0x08
    2262:	89 85       	ldd	r24, Y+9	; 0x09
    2264:	9a 85       	ldd	r25, Y+10	; 0x0a
    2266:	20 e0       	ldi	r18, 0x00	; 0
    2268:	30 e0       	ldi	r19, 0x00	; 0
    226a:	40 e8       	ldi	r20, 0x80	; 128
    226c:	5f e3       	ldi	r21, 0x3F	; 63
    226e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2272:	88 23       	and	r24, r24
    2274:	2c f4       	brge	.+10     	; 0x2280 <LM35_getTemperature+0x6e>
		__ticks = 1;
    2276:	81 e0       	ldi	r24, 0x01	; 1
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	9e 83       	std	Y+6, r25	; 0x06
    227c:	8d 83       	std	Y+5, r24	; 0x05
    227e:	3f c0       	rjmp	.+126    	; 0x22fe <LM35_getTemperature+0xec>
	else if (__tmp > 65535)
    2280:	6f 81       	ldd	r22, Y+7	; 0x07
    2282:	78 85       	ldd	r23, Y+8	; 0x08
    2284:	89 85       	ldd	r24, Y+9	; 0x09
    2286:	9a 85       	ldd	r25, Y+10	; 0x0a
    2288:	20 e0       	ldi	r18, 0x00	; 0
    228a:	3f ef       	ldi	r19, 0xFF	; 255
    228c:	4f e7       	ldi	r20, 0x7F	; 127
    228e:	57 e4       	ldi	r21, 0x47	; 71
    2290:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2294:	18 16       	cp	r1, r24
    2296:	4c f5       	brge	.+82     	; 0x22ea <LM35_getTemperature+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2298:	6b 85       	ldd	r22, Y+11	; 0x0b
    229a:	7c 85       	ldd	r23, Y+12	; 0x0c
    229c:	8d 85       	ldd	r24, Y+13	; 0x0d
    229e:	9e 85       	ldd	r25, Y+14	; 0x0e
    22a0:	20 e0       	ldi	r18, 0x00	; 0
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	40 e2       	ldi	r20, 0x20	; 32
    22a6:	51 e4       	ldi	r21, 0x41	; 65
    22a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ac:	dc 01       	movw	r26, r24
    22ae:	cb 01       	movw	r24, r22
    22b0:	bc 01       	movw	r22, r24
    22b2:	cd 01       	movw	r24, r26
    22b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22b8:	dc 01       	movw	r26, r24
    22ba:	cb 01       	movw	r24, r22
    22bc:	9e 83       	std	Y+6, r25	; 0x06
    22be:	8d 83       	std	Y+5, r24	; 0x05
    22c0:	0f c0       	rjmp	.+30     	; 0x22e0 <LM35_getTemperature+0xce>
    22c2:	88 ec       	ldi	r24, 0xC8	; 200
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	9c 83       	std	Y+4, r25	; 0x04
    22c8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    22ca:	8b 81       	ldd	r24, Y+3	; 0x03
    22cc:	9c 81       	ldd	r25, Y+4	; 0x04
    22ce:	01 97       	sbiw	r24, 0x01	; 1
    22d0:	f1 f7       	brne	.-4      	; 0x22ce <LM35_getTemperature+0xbc>
    22d2:	9c 83       	std	Y+4, r25	; 0x04
    22d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22d6:	8d 81       	ldd	r24, Y+5	; 0x05
    22d8:	9e 81       	ldd	r25, Y+6	; 0x06
    22da:	01 97       	sbiw	r24, 0x01	; 1
    22dc:	9e 83       	std	Y+6, r25	; 0x06
    22de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22e0:	8d 81       	ldd	r24, Y+5	; 0x05
    22e2:	9e 81       	ldd	r25, Y+6	; 0x06
    22e4:	00 97       	sbiw	r24, 0x00	; 0
    22e6:	69 f7       	brne	.-38     	; 0x22c2 <LM35_getTemperature+0xb0>
    22e8:	14 c0       	rjmp	.+40     	; 0x2312 <LM35_getTemperature+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22ea:	6f 81       	ldd	r22, Y+7	; 0x07
    22ec:	78 85       	ldd	r23, Y+8	; 0x08
    22ee:	89 85       	ldd	r24, Y+9	; 0x09
    22f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    22f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22f6:	dc 01       	movw	r26, r24
    22f8:	cb 01       	movw	r24, r22
    22fa:	9e 83       	std	Y+6, r25	; 0x06
    22fc:	8d 83       	std	Y+5, r24	; 0x05
    22fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2300:	9e 81       	ldd	r25, Y+6	; 0x06
    2302:	9a 83       	std	Y+2, r25	; 0x02
    2304:	89 83       	std	Y+1, r24	; 0x01
    2306:	89 81       	ldd	r24, Y+1	; 0x01
    2308:	9a 81       	ldd	r25, Y+2	; 0x02
    230a:	01 97       	sbiw	r24, 0x01	; 1
    230c:	f1 f7       	brne	.-4      	; 0x230a <LM35_getTemperature+0xf8>
    230e:	9a 83       	std	Y+2, r25	; 0x02
    2310:	89 83       	std	Y+1, r24	; 0x01

	/* Make delay for some time until g_adcResult value is updated with the ADC interrupt */
	_delay_ms(5);

	/* Calculate the temperature from the ADC value*/
	temp_value = (uint8)(((uint32)g_ADC_var*SENSOR_MAX_TEMPERATURE*ADC_REF_VOLT_VALUE)/(ADC_MAXIMUM_VALUE*SENSOR_MAX_VOLT_VALUE));
    2312:	80 91 8a 01 	lds	r24, 0x018A
    2316:	90 91 8b 01 	lds	r25, 0x018B
    231a:	cc 01       	movw	r24, r24
    231c:	a0 e0       	ldi	r26, 0x00	; 0
    231e:	b0 e0       	ldi	r27, 0x00	; 0
    2320:	2e ee       	ldi	r18, 0xEE	; 238
    2322:	32 e0       	ldi	r19, 0x02	; 2
    2324:	40 e0       	ldi	r20, 0x00	; 0
    2326:	50 e0       	ldi	r21, 0x00	; 0
    2328:	bc 01       	movw	r22, r24
    232a:	cd 01       	movw	r24, r26
    232c:	0e 94 3a 20 	call	0x4074	; 0x4074 <__mulsi3>
    2330:	dc 01       	movw	r26, r24
    2332:	cb 01       	movw	r24, r22
    2334:	bc 01       	movw	r22, r24
    2336:	cd 01       	movw	r24, r26
    2338:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    233c:	dc 01       	movw	r26, r24
    233e:	cb 01       	movw	r24, r22
    2340:	bc 01       	movw	r22, r24
    2342:	cd 01       	movw	r24, r26
    2344:	20 e0       	ldi	r18, 0x00	; 0
    2346:	30 ed       	ldi	r19, 0xD0	; 208
    2348:	4f eb       	ldi	r20, 0xBF	; 191
    234a:	54 e4       	ldi	r21, 0x44	; 68
    234c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2350:	dc 01       	movw	r26, r24
    2352:	cb 01       	movw	r24, r22
    2354:	bc 01       	movw	r22, r24
    2356:	cd 01       	movw	r24, r26
    2358:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    235c:	dc 01       	movw	r26, r24
    235e:	cb 01       	movw	r24, r22
    2360:	8f 87       	std	Y+15, r24	; 0x0f

	return temp_value;
    2362:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    2364:	2f 96       	adiw	r28, 0x0f	; 15
    2366:	0f b6       	in	r0, 0x3f	; 63
    2368:	f8 94       	cli
    236a:	de bf       	out	0x3e, r29	; 62
    236c:	0f be       	out	0x3f, r0	; 63
    236e:	cd bf       	out	0x3d, r28	; 61
    2370:	cf 91       	pop	r28
    2372:	df 91       	pop	r29
    2374:	08 95       	ret

00002376 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    2376:	df 93       	push	r29
    2378:	cf 93       	push	r28
    237a:	cd b7       	in	r28, 0x3d	; 61
    237c:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setPinDir(LCD_RS_PORT_ID,LCD_RS_PIN_ID,OUTPUT_PIN);
    237e:	80 e0       	ldi	r24, 0x00	; 0
    2380:	65 e0       	ldi	r22, 0x05	; 5
    2382:	41 e0       	ldi	r20, 0x01	; 1
    2384:	0e 94 1e 0c 	call	0x183c	; 0x183c <GPIO_setPinDir>
	GPIO_setPinDir(LCD_RW_PORT_ID,LCD_RW_PIN_ID,OUTPUT_PIN);
    2388:	80 e0       	ldi	r24, 0x00	; 0
    238a:	66 e0       	ldi	r22, 0x06	; 6
    238c:	41 e0       	ldi	r20, 0x01	; 1
    238e:	0e 94 1e 0c 	call	0x183c	; 0x183c <GPIO_setPinDir>
	GPIO_setPinDir(LCD_E_PORT_ID,LCD_E_PIN_ID,OUTPUT_PIN);
    2392:	80 e0       	ldi	r24, 0x00	; 0
    2394:	67 e0       	ldi	r22, 0x07	; 7
    2396:	41 e0       	ldi	r20, 0x01	; 1
    2398:	0e 94 1e 0c 	call	0x183c	; 0x183c <GPIO_setPinDir>

#if (LCD_DATA_BITS_MODE == 4)

	/* Configure 4 pins in the data port as output pins */
	GPIO_setPinDir(LCD_DATA_PORT_ID,LCD_FIRST_DATA_PIN_ID,OUTPUT_PIN);
    239c:	80 e0       	ldi	r24, 0x00	; 0
    239e:	60 e0       	ldi	r22, 0x00	; 0
    23a0:	41 e0       	ldi	r20, 0x01	; 1
    23a2:	0e 94 1e 0c 	call	0x183c	; 0x183c <GPIO_setPinDir>
	GPIO_setPinDir(LCD_DATA_PORT_ID,LCD_FIRST_DATA_PIN_ID+1,OUTPUT_PIN);
    23a6:	80 e0       	ldi	r24, 0x00	; 0
    23a8:	61 e0       	ldi	r22, 0x01	; 1
    23aa:	41 e0       	ldi	r20, 0x01	; 1
    23ac:	0e 94 1e 0c 	call	0x183c	; 0x183c <GPIO_setPinDir>
	GPIO_setPinDir(LCD_DATA_PORT_ID,LCD_FIRST_DATA_PIN_ID+2,OUTPUT_PIN);
    23b0:	80 e0       	ldi	r24, 0x00	; 0
    23b2:	62 e0       	ldi	r22, 0x02	; 2
    23b4:	41 e0       	ldi	r20, 0x01	; 1
    23b6:	0e 94 1e 0c 	call	0x183c	; 0x183c <GPIO_setPinDir>
	GPIO_setPinDir(LCD_DATA_PORT_ID,LCD_FIRST_DATA_PIN_ID+3,OUTPUT_PIN);
    23ba:	80 e0       	ldi	r24, 0x00	; 0
    23bc:	63 e0       	ldi	r22, 0x03	; 3
    23be:	41 e0       	ldi	r20, 0x01	; 1
    23c0:	0e 94 1e 0c 	call	0x183c	; 0x183c <GPIO_setPinDir>

	LCD_sendCommand(LCD_GO_TO_HOME);
    23c4:	82 e0       	ldi	r24, 0x02	; 2
    23c6:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
    23ca:	88 e2       	ldi	r24, 0x28	; 40
    23cc:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <LCD_sendCommand>
	/* Configure the data port as output port */
	GPIO_setPortDir(LCD_DATA_PORT_ID,OUTPUT_PORT);
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    23d0:	8c e0       	ldi	r24, 0x0C	; 12
    23d2:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    23d6:	81 e0       	ldi	r24, 0x01	; 1
    23d8:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <LCD_sendCommand>
}
    23dc:	cf 91       	pop	r28
    23de:	df 91       	pop	r29
    23e0:	08 95       	ret

000023e2 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    23e2:	0f 93       	push	r16
    23e4:	1f 93       	push	r17
    23e6:	df 93       	push	r29
    23e8:	cf 93       	push	r28
    23ea:	cd b7       	in	r28, 0x3d	; 61
    23ec:	de b7       	in	r29, 0x3e	; 62
    23ee:	c4 56       	subi	r28, 0x64	; 100
    23f0:	d0 40       	sbci	r29, 0x00	; 0
    23f2:	0f b6       	in	r0, 0x3f	; 63
    23f4:	f8 94       	cli
    23f6:	de bf       	out	0x3e, r29	; 62
    23f8:	0f be       	out	0x3f, r0	; 63
    23fa:	cd bf       	out	0x3d, r28	; 61
    23fc:	fe 01       	movw	r30, r28
    23fe:	ec 59       	subi	r30, 0x9C	; 156
    2400:	ff 4f       	sbci	r31, 0xFF	; 255
    2402:	80 83       	st	Z, r24
	uint8 lcd_port_value = 0;
    2404:	fe 01       	movw	r30, r28
    2406:	ed 59       	subi	r30, 0x9D	; 157
    2408:	ff 4f       	sbci	r31, 0xFF	; 255
    240a:	10 82       	st	Z, r1
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    240c:	80 e0       	ldi	r24, 0x00	; 0
    240e:	65 e0       	ldi	r22, 0x05	; 5
    2410:	40 e0       	ldi	r20, 0x00	; 0
    2412:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    2416:	80 e0       	ldi	r24, 0x00	; 0
    2418:	66 e0       	ldi	r22, 0x06	; 6
    241a:	40 e0       	ldi	r20, 0x00	; 0
    241c:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <GPIO_writePin>
    2420:	fe 01       	movw	r30, r28
    2422:	e1 5a       	subi	r30, 0xA1	; 161
    2424:	ff 4f       	sbci	r31, 0xFF	; 255
    2426:	80 e0       	ldi	r24, 0x00	; 0
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	a0 e8       	ldi	r26, 0x80	; 128
    242c:	bf e3       	ldi	r27, 0x3F	; 63
    242e:	80 83       	st	Z, r24
    2430:	91 83       	std	Z+1, r25	; 0x01
    2432:	a2 83       	std	Z+2, r26	; 0x02
    2434:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2436:	8e 01       	movw	r16, r28
    2438:	05 5a       	subi	r16, 0xA5	; 165
    243a:	1f 4f       	sbci	r17, 0xFF	; 255
    243c:	fe 01       	movw	r30, r28
    243e:	e1 5a       	subi	r30, 0xA1	; 161
    2440:	ff 4f       	sbci	r31, 0xFF	; 255
    2442:	60 81       	ld	r22, Z
    2444:	71 81       	ldd	r23, Z+1	; 0x01
    2446:	82 81       	ldd	r24, Z+2	; 0x02
    2448:	93 81       	ldd	r25, Z+3	; 0x03
    244a:	20 e0       	ldi	r18, 0x00	; 0
    244c:	30 e0       	ldi	r19, 0x00	; 0
    244e:	4a ef       	ldi	r20, 0xFA	; 250
    2450:	54 e4       	ldi	r21, 0x44	; 68
    2452:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2456:	dc 01       	movw	r26, r24
    2458:	cb 01       	movw	r24, r22
    245a:	f8 01       	movw	r30, r16
    245c:	80 83       	st	Z, r24
    245e:	91 83       	std	Z+1, r25	; 0x01
    2460:	a2 83       	std	Z+2, r26	; 0x02
    2462:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2464:	fe 01       	movw	r30, r28
    2466:	e5 5a       	subi	r30, 0xA5	; 165
    2468:	ff 4f       	sbci	r31, 0xFF	; 255
    246a:	60 81       	ld	r22, Z
    246c:	71 81       	ldd	r23, Z+1	; 0x01
    246e:	82 81       	ldd	r24, Z+2	; 0x02
    2470:	93 81       	ldd	r25, Z+3	; 0x03
    2472:	20 e0       	ldi	r18, 0x00	; 0
    2474:	30 e0       	ldi	r19, 0x00	; 0
    2476:	40 e8       	ldi	r20, 0x80	; 128
    2478:	5f e3       	ldi	r21, 0x3F	; 63
    247a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    247e:	88 23       	and	r24, r24
    2480:	44 f4       	brge	.+16     	; 0x2492 <LCD_sendCommand+0xb0>
		__ticks = 1;
    2482:	fe 01       	movw	r30, r28
    2484:	e7 5a       	subi	r30, 0xA7	; 167
    2486:	ff 4f       	sbci	r31, 0xFF	; 255
    2488:	81 e0       	ldi	r24, 0x01	; 1
    248a:	90 e0       	ldi	r25, 0x00	; 0
    248c:	91 83       	std	Z+1, r25	; 0x01
    248e:	80 83       	st	Z, r24
    2490:	64 c0       	rjmp	.+200    	; 0x255a <LCD_sendCommand+0x178>
	else if (__tmp > 65535)
    2492:	fe 01       	movw	r30, r28
    2494:	e5 5a       	subi	r30, 0xA5	; 165
    2496:	ff 4f       	sbci	r31, 0xFF	; 255
    2498:	60 81       	ld	r22, Z
    249a:	71 81       	ldd	r23, Z+1	; 0x01
    249c:	82 81       	ldd	r24, Z+2	; 0x02
    249e:	93 81       	ldd	r25, Z+3	; 0x03
    24a0:	20 e0       	ldi	r18, 0x00	; 0
    24a2:	3f ef       	ldi	r19, 0xFF	; 255
    24a4:	4f e7       	ldi	r20, 0x7F	; 127
    24a6:	57 e4       	ldi	r21, 0x47	; 71
    24a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24ac:	18 16       	cp	r1, r24
    24ae:	0c f0       	brlt	.+2      	; 0x24b2 <LCD_sendCommand+0xd0>
    24b0:	43 c0       	rjmp	.+134    	; 0x2538 <LCD_sendCommand+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24b2:	fe 01       	movw	r30, r28
    24b4:	e1 5a       	subi	r30, 0xA1	; 161
    24b6:	ff 4f       	sbci	r31, 0xFF	; 255
    24b8:	60 81       	ld	r22, Z
    24ba:	71 81       	ldd	r23, Z+1	; 0x01
    24bc:	82 81       	ldd	r24, Z+2	; 0x02
    24be:	93 81       	ldd	r25, Z+3	; 0x03
    24c0:	20 e0       	ldi	r18, 0x00	; 0
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	40 e2       	ldi	r20, 0x20	; 32
    24c6:	51 e4       	ldi	r21, 0x41	; 65
    24c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24cc:	dc 01       	movw	r26, r24
    24ce:	cb 01       	movw	r24, r22
    24d0:	8e 01       	movw	r16, r28
    24d2:	07 5a       	subi	r16, 0xA7	; 167
    24d4:	1f 4f       	sbci	r17, 0xFF	; 255
    24d6:	bc 01       	movw	r22, r24
    24d8:	cd 01       	movw	r24, r26
    24da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24de:	dc 01       	movw	r26, r24
    24e0:	cb 01       	movw	r24, r22
    24e2:	f8 01       	movw	r30, r16
    24e4:	91 83       	std	Z+1, r25	; 0x01
    24e6:	80 83       	st	Z, r24
    24e8:	1f c0       	rjmp	.+62     	; 0x2528 <LCD_sendCommand+0x146>
    24ea:	fe 01       	movw	r30, r28
    24ec:	e9 5a       	subi	r30, 0xA9	; 169
    24ee:	ff 4f       	sbci	r31, 0xFF	; 255
    24f0:	88 ec       	ldi	r24, 0xC8	; 200
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	91 83       	std	Z+1, r25	; 0x01
    24f6:	80 83       	st	Z, r24
    24f8:	fe 01       	movw	r30, r28
    24fa:	e9 5a       	subi	r30, 0xA9	; 169
    24fc:	ff 4f       	sbci	r31, 0xFF	; 255
    24fe:	80 81       	ld	r24, Z
    2500:	91 81       	ldd	r25, Z+1	; 0x01
    2502:	01 97       	sbiw	r24, 0x01	; 1
    2504:	f1 f7       	brne	.-4      	; 0x2502 <LCD_sendCommand+0x120>
    2506:	fe 01       	movw	r30, r28
    2508:	e9 5a       	subi	r30, 0xA9	; 169
    250a:	ff 4f       	sbci	r31, 0xFF	; 255
    250c:	91 83       	std	Z+1, r25	; 0x01
    250e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2510:	de 01       	movw	r26, r28
    2512:	a7 5a       	subi	r26, 0xA7	; 167
    2514:	bf 4f       	sbci	r27, 0xFF	; 255
    2516:	fe 01       	movw	r30, r28
    2518:	e7 5a       	subi	r30, 0xA7	; 167
    251a:	ff 4f       	sbci	r31, 0xFF	; 255
    251c:	80 81       	ld	r24, Z
    251e:	91 81       	ldd	r25, Z+1	; 0x01
    2520:	01 97       	sbiw	r24, 0x01	; 1
    2522:	11 96       	adiw	r26, 0x01	; 1
    2524:	9c 93       	st	X, r25
    2526:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2528:	fe 01       	movw	r30, r28
    252a:	e7 5a       	subi	r30, 0xA7	; 167
    252c:	ff 4f       	sbci	r31, 0xFF	; 255
    252e:	80 81       	ld	r24, Z
    2530:	91 81       	ldd	r25, Z+1	; 0x01
    2532:	00 97       	sbiw	r24, 0x00	; 0
    2534:	d1 f6       	brne	.-76     	; 0x24ea <LCD_sendCommand+0x108>
    2536:	27 c0       	rjmp	.+78     	; 0x2586 <LCD_sendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2538:	8e 01       	movw	r16, r28
    253a:	07 5a       	subi	r16, 0xA7	; 167
    253c:	1f 4f       	sbci	r17, 0xFF	; 255
    253e:	fe 01       	movw	r30, r28
    2540:	e5 5a       	subi	r30, 0xA5	; 165
    2542:	ff 4f       	sbci	r31, 0xFF	; 255
    2544:	60 81       	ld	r22, Z
    2546:	71 81       	ldd	r23, Z+1	; 0x01
    2548:	82 81       	ldd	r24, Z+2	; 0x02
    254a:	93 81       	ldd	r25, Z+3	; 0x03
    254c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2550:	dc 01       	movw	r26, r24
    2552:	cb 01       	movw	r24, r22
    2554:	f8 01       	movw	r30, r16
    2556:	91 83       	std	Z+1, r25	; 0x01
    2558:	80 83       	st	Z, r24
    255a:	de 01       	movw	r26, r28
    255c:	ab 5a       	subi	r26, 0xAB	; 171
    255e:	bf 4f       	sbci	r27, 0xFF	; 255
    2560:	fe 01       	movw	r30, r28
    2562:	e7 5a       	subi	r30, 0xA7	; 167
    2564:	ff 4f       	sbci	r31, 0xFF	; 255
    2566:	80 81       	ld	r24, Z
    2568:	91 81       	ldd	r25, Z+1	; 0x01
    256a:	8d 93       	st	X+, r24
    256c:	9c 93       	st	X, r25
    256e:	fe 01       	movw	r30, r28
    2570:	eb 5a       	subi	r30, 0xAB	; 171
    2572:	ff 4f       	sbci	r31, 0xFF	; 255
    2574:	80 81       	ld	r24, Z
    2576:	91 81       	ldd	r25, Z+1	; 0x01
    2578:	01 97       	sbiw	r24, 0x01	; 1
    257a:	f1 f7       	brne	.-4      	; 0x2578 <LCD_sendCommand+0x196>
    257c:	fe 01       	movw	r30, r28
    257e:	eb 5a       	subi	r30, 0xAB	; 171
    2580:	ff 4f       	sbci	r31, 0xFF	; 255
    2582:	91 83       	std	Z+1, r25	; 0x01
    2584:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2586:	80 e0       	ldi	r24, 0x00	; 0
    2588:	67 e0       	ldi	r22, 0x07	; 7
    258a:	41 e0       	ldi	r20, 0x01	; 1
    258c:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <GPIO_writePin>
    2590:	fe 01       	movw	r30, r28
    2592:	ef 5a       	subi	r30, 0xAF	; 175
    2594:	ff 4f       	sbci	r31, 0xFF	; 255
    2596:	80 e0       	ldi	r24, 0x00	; 0
    2598:	90 e0       	ldi	r25, 0x00	; 0
    259a:	a0 e8       	ldi	r26, 0x80	; 128
    259c:	bf e3       	ldi	r27, 0x3F	; 63
    259e:	80 83       	st	Z, r24
    25a0:	91 83       	std	Z+1, r25	; 0x01
    25a2:	a2 83       	std	Z+2, r26	; 0x02
    25a4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25a6:	8e 01       	movw	r16, r28
    25a8:	03 5b       	subi	r16, 0xB3	; 179
    25aa:	1f 4f       	sbci	r17, 0xFF	; 255
    25ac:	fe 01       	movw	r30, r28
    25ae:	ef 5a       	subi	r30, 0xAF	; 175
    25b0:	ff 4f       	sbci	r31, 0xFF	; 255
    25b2:	60 81       	ld	r22, Z
    25b4:	71 81       	ldd	r23, Z+1	; 0x01
    25b6:	82 81       	ldd	r24, Z+2	; 0x02
    25b8:	93 81       	ldd	r25, Z+3	; 0x03
    25ba:	20 e0       	ldi	r18, 0x00	; 0
    25bc:	30 e0       	ldi	r19, 0x00	; 0
    25be:	4a ef       	ldi	r20, 0xFA	; 250
    25c0:	54 e4       	ldi	r21, 0x44	; 68
    25c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25c6:	dc 01       	movw	r26, r24
    25c8:	cb 01       	movw	r24, r22
    25ca:	f8 01       	movw	r30, r16
    25cc:	80 83       	st	Z, r24
    25ce:	91 83       	std	Z+1, r25	; 0x01
    25d0:	a2 83       	std	Z+2, r26	; 0x02
    25d2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25d4:	fe 01       	movw	r30, r28
    25d6:	e3 5b       	subi	r30, 0xB3	; 179
    25d8:	ff 4f       	sbci	r31, 0xFF	; 255
    25da:	60 81       	ld	r22, Z
    25dc:	71 81       	ldd	r23, Z+1	; 0x01
    25de:	82 81       	ldd	r24, Z+2	; 0x02
    25e0:	93 81       	ldd	r25, Z+3	; 0x03
    25e2:	20 e0       	ldi	r18, 0x00	; 0
    25e4:	30 e0       	ldi	r19, 0x00	; 0
    25e6:	40 e8       	ldi	r20, 0x80	; 128
    25e8:	5f e3       	ldi	r21, 0x3F	; 63
    25ea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25ee:	88 23       	and	r24, r24
    25f0:	44 f4       	brge	.+16     	; 0x2602 <LCD_sendCommand+0x220>
		__ticks = 1;
    25f2:	fe 01       	movw	r30, r28
    25f4:	e5 5b       	subi	r30, 0xB5	; 181
    25f6:	ff 4f       	sbci	r31, 0xFF	; 255
    25f8:	81 e0       	ldi	r24, 0x01	; 1
    25fa:	90 e0       	ldi	r25, 0x00	; 0
    25fc:	91 83       	std	Z+1, r25	; 0x01
    25fe:	80 83       	st	Z, r24
    2600:	64 c0       	rjmp	.+200    	; 0x26ca <LCD_sendCommand+0x2e8>
	else if (__tmp > 65535)
    2602:	fe 01       	movw	r30, r28
    2604:	e3 5b       	subi	r30, 0xB3	; 179
    2606:	ff 4f       	sbci	r31, 0xFF	; 255
    2608:	60 81       	ld	r22, Z
    260a:	71 81       	ldd	r23, Z+1	; 0x01
    260c:	82 81       	ldd	r24, Z+2	; 0x02
    260e:	93 81       	ldd	r25, Z+3	; 0x03
    2610:	20 e0       	ldi	r18, 0x00	; 0
    2612:	3f ef       	ldi	r19, 0xFF	; 255
    2614:	4f e7       	ldi	r20, 0x7F	; 127
    2616:	57 e4       	ldi	r21, 0x47	; 71
    2618:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    261c:	18 16       	cp	r1, r24
    261e:	0c f0       	brlt	.+2      	; 0x2622 <LCD_sendCommand+0x240>
    2620:	43 c0       	rjmp	.+134    	; 0x26a8 <LCD_sendCommand+0x2c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2622:	fe 01       	movw	r30, r28
    2624:	ef 5a       	subi	r30, 0xAF	; 175
    2626:	ff 4f       	sbci	r31, 0xFF	; 255
    2628:	60 81       	ld	r22, Z
    262a:	71 81       	ldd	r23, Z+1	; 0x01
    262c:	82 81       	ldd	r24, Z+2	; 0x02
    262e:	93 81       	ldd	r25, Z+3	; 0x03
    2630:	20 e0       	ldi	r18, 0x00	; 0
    2632:	30 e0       	ldi	r19, 0x00	; 0
    2634:	40 e2       	ldi	r20, 0x20	; 32
    2636:	51 e4       	ldi	r21, 0x41	; 65
    2638:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    263c:	dc 01       	movw	r26, r24
    263e:	cb 01       	movw	r24, r22
    2640:	8e 01       	movw	r16, r28
    2642:	05 5b       	subi	r16, 0xB5	; 181
    2644:	1f 4f       	sbci	r17, 0xFF	; 255
    2646:	bc 01       	movw	r22, r24
    2648:	cd 01       	movw	r24, r26
    264a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    264e:	dc 01       	movw	r26, r24
    2650:	cb 01       	movw	r24, r22
    2652:	f8 01       	movw	r30, r16
    2654:	91 83       	std	Z+1, r25	; 0x01
    2656:	80 83       	st	Z, r24
    2658:	1f c0       	rjmp	.+62     	; 0x2698 <LCD_sendCommand+0x2b6>
    265a:	fe 01       	movw	r30, r28
    265c:	e7 5b       	subi	r30, 0xB7	; 183
    265e:	ff 4f       	sbci	r31, 0xFF	; 255
    2660:	88 ec       	ldi	r24, 0xC8	; 200
    2662:	90 e0       	ldi	r25, 0x00	; 0
    2664:	91 83       	std	Z+1, r25	; 0x01
    2666:	80 83       	st	Z, r24
    2668:	fe 01       	movw	r30, r28
    266a:	e7 5b       	subi	r30, 0xB7	; 183
    266c:	ff 4f       	sbci	r31, 0xFF	; 255
    266e:	80 81       	ld	r24, Z
    2670:	91 81       	ldd	r25, Z+1	; 0x01
    2672:	01 97       	sbiw	r24, 0x01	; 1
    2674:	f1 f7       	brne	.-4      	; 0x2672 <LCD_sendCommand+0x290>
    2676:	fe 01       	movw	r30, r28
    2678:	e7 5b       	subi	r30, 0xB7	; 183
    267a:	ff 4f       	sbci	r31, 0xFF	; 255
    267c:	91 83       	std	Z+1, r25	; 0x01
    267e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2680:	de 01       	movw	r26, r28
    2682:	a5 5b       	subi	r26, 0xB5	; 181
    2684:	bf 4f       	sbci	r27, 0xFF	; 255
    2686:	fe 01       	movw	r30, r28
    2688:	e5 5b       	subi	r30, 0xB5	; 181
    268a:	ff 4f       	sbci	r31, 0xFF	; 255
    268c:	80 81       	ld	r24, Z
    268e:	91 81       	ldd	r25, Z+1	; 0x01
    2690:	01 97       	sbiw	r24, 0x01	; 1
    2692:	11 96       	adiw	r26, 0x01	; 1
    2694:	9c 93       	st	X, r25
    2696:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2698:	fe 01       	movw	r30, r28
    269a:	e5 5b       	subi	r30, 0xB5	; 181
    269c:	ff 4f       	sbci	r31, 0xFF	; 255
    269e:	80 81       	ld	r24, Z
    26a0:	91 81       	ldd	r25, Z+1	; 0x01
    26a2:	00 97       	sbiw	r24, 0x00	; 0
    26a4:	d1 f6       	brne	.-76     	; 0x265a <LCD_sendCommand+0x278>
    26a6:	27 c0       	rjmp	.+78     	; 0x26f6 <LCD_sendCommand+0x314>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26a8:	8e 01       	movw	r16, r28
    26aa:	05 5b       	subi	r16, 0xB5	; 181
    26ac:	1f 4f       	sbci	r17, 0xFF	; 255
    26ae:	fe 01       	movw	r30, r28
    26b0:	e3 5b       	subi	r30, 0xB3	; 179
    26b2:	ff 4f       	sbci	r31, 0xFF	; 255
    26b4:	60 81       	ld	r22, Z
    26b6:	71 81       	ldd	r23, Z+1	; 0x01
    26b8:	82 81       	ldd	r24, Z+2	; 0x02
    26ba:	93 81       	ldd	r25, Z+3	; 0x03
    26bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c0:	dc 01       	movw	r26, r24
    26c2:	cb 01       	movw	r24, r22
    26c4:	f8 01       	movw	r30, r16
    26c6:	91 83       	std	Z+1, r25	; 0x01
    26c8:	80 83       	st	Z, r24
    26ca:	de 01       	movw	r26, r28
    26cc:	a9 5b       	subi	r26, 0xB9	; 185
    26ce:	bf 4f       	sbci	r27, 0xFF	; 255
    26d0:	fe 01       	movw	r30, r28
    26d2:	e5 5b       	subi	r30, 0xB5	; 181
    26d4:	ff 4f       	sbci	r31, 0xFF	; 255
    26d6:	80 81       	ld	r24, Z
    26d8:	91 81       	ldd	r25, Z+1	; 0x01
    26da:	8d 93       	st	X+, r24
    26dc:	9c 93       	st	X, r25
    26de:	fe 01       	movw	r30, r28
    26e0:	e9 5b       	subi	r30, 0xB9	; 185
    26e2:	ff 4f       	sbci	r31, 0xFF	; 255
    26e4:	80 81       	ld	r24, Z
    26e6:	91 81       	ldd	r25, Z+1	; 0x01
    26e8:	01 97       	sbiw	r24, 0x01	; 1
    26ea:	f1 f7       	brne	.-4      	; 0x26e8 <LCD_sendCommand+0x306>
    26ec:	fe 01       	movw	r30, r28
    26ee:	e9 5b       	subi	r30, 0xB9	; 185
    26f0:	ff 4f       	sbci	r31, 0xFF	; 255
    26f2:	91 83       	std	Z+1, r25	; 0x01
    26f4:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if (LCD_DATA_BITS_MODE == 4)
	/* out the last 4 bits of the required command to the data bus D4 --> D7 */
	lcd_port_value = GPIO_readPort(LCD_DATA_PORT_ID);
    26f6:	80 e0       	ldi	r24, 0x00	; 0
    26f8:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <GPIO_readPort>
    26fc:	fe 01       	movw	r30, r28
    26fe:	ed 59       	subi	r30, 0x9D	; 157
    2700:	ff 4f       	sbci	r31, 0xFF	; 255
    2702:	80 83       	st	Z, r24
#ifdef LCD_LAST_PORT_PINS
	lcd_port_value = (lcd_port_value & 0x0F) | (command & 0xF0);
#else
	lcd_port_value = (lcd_port_value & 0xF0) | ((command & 0xF0) >> 4);
    2704:	fe 01       	movw	r30, r28
    2706:	ed 59       	subi	r30, 0x9D	; 157
    2708:	ff 4f       	sbci	r31, 0xFF	; 255
    270a:	80 81       	ld	r24, Z
    270c:	98 2f       	mov	r25, r24
    270e:	90 7f       	andi	r25, 0xF0	; 240
    2710:	fe 01       	movw	r30, r28
    2712:	ec 59       	subi	r30, 0x9C	; 156
    2714:	ff 4f       	sbci	r31, 0xFF	; 255
    2716:	80 81       	ld	r24, Z
    2718:	82 95       	swap	r24
    271a:	8f 70       	andi	r24, 0x0F	; 15
    271c:	89 2b       	or	r24, r25
    271e:	fe 01       	movw	r30, r28
    2720:	ed 59       	subi	r30, 0x9D	; 157
    2722:	ff 4f       	sbci	r31, 0xFF	; 255
    2724:	80 83       	st	Z, r24
#endif
	GPIO_writePort(LCD_DATA_PORT_ID,lcd_port_value);
    2726:	fe 01       	movw	r30, r28
    2728:	ed 59       	subi	r30, 0x9D	; 157
    272a:	ff 4f       	sbci	r31, 0xFF	; 255
    272c:	80 e0       	ldi	r24, 0x00	; 0
    272e:	60 81       	ld	r22, Z
    2730:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <GPIO_writePort>
    2734:	fe 01       	movw	r30, r28
    2736:	ed 5b       	subi	r30, 0xBD	; 189
    2738:	ff 4f       	sbci	r31, 0xFF	; 255
    273a:	80 e0       	ldi	r24, 0x00	; 0
    273c:	90 e0       	ldi	r25, 0x00	; 0
    273e:	a0 e8       	ldi	r26, 0x80	; 128
    2740:	bf e3       	ldi	r27, 0x3F	; 63
    2742:	80 83       	st	Z, r24
    2744:	91 83       	std	Z+1, r25	; 0x01
    2746:	a2 83       	std	Z+2, r26	; 0x02
    2748:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    274a:	8e 01       	movw	r16, r28
    274c:	01 5c       	subi	r16, 0xC1	; 193
    274e:	1f 4f       	sbci	r17, 0xFF	; 255
    2750:	fe 01       	movw	r30, r28
    2752:	ed 5b       	subi	r30, 0xBD	; 189
    2754:	ff 4f       	sbci	r31, 0xFF	; 255
    2756:	60 81       	ld	r22, Z
    2758:	71 81       	ldd	r23, Z+1	; 0x01
    275a:	82 81       	ldd	r24, Z+2	; 0x02
    275c:	93 81       	ldd	r25, Z+3	; 0x03
    275e:	20 e0       	ldi	r18, 0x00	; 0
    2760:	30 e0       	ldi	r19, 0x00	; 0
    2762:	4a ef       	ldi	r20, 0xFA	; 250
    2764:	54 e4       	ldi	r21, 0x44	; 68
    2766:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    276a:	dc 01       	movw	r26, r24
    276c:	cb 01       	movw	r24, r22
    276e:	f8 01       	movw	r30, r16
    2770:	80 83       	st	Z, r24
    2772:	91 83       	std	Z+1, r25	; 0x01
    2774:	a2 83       	std	Z+2, r26	; 0x02
    2776:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2778:	fe 01       	movw	r30, r28
    277a:	ff 96       	adiw	r30, 0x3f	; 63
    277c:	60 81       	ld	r22, Z
    277e:	71 81       	ldd	r23, Z+1	; 0x01
    2780:	82 81       	ldd	r24, Z+2	; 0x02
    2782:	93 81       	ldd	r25, Z+3	; 0x03
    2784:	20 e0       	ldi	r18, 0x00	; 0
    2786:	30 e0       	ldi	r19, 0x00	; 0
    2788:	40 e8       	ldi	r20, 0x80	; 128
    278a:	5f e3       	ldi	r21, 0x3F	; 63
    278c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2790:	88 23       	and	r24, r24
    2792:	2c f4       	brge	.+10     	; 0x279e <LCD_sendCommand+0x3bc>
		__ticks = 1;
    2794:	81 e0       	ldi	r24, 0x01	; 1
    2796:	90 e0       	ldi	r25, 0x00	; 0
    2798:	9e af       	std	Y+62, r25	; 0x3e
    279a:	8d af       	std	Y+61, r24	; 0x3d
    279c:	46 c0       	rjmp	.+140    	; 0x282a <LCD_sendCommand+0x448>
	else if (__tmp > 65535)
    279e:	fe 01       	movw	r30, r28
    27a0:	ff 96       	adiw	r30, 0x3f	; 63
    27a2:	60 81       	ld	r22, Z
    27a4:	71 81       	ldd	r23, Z+1	; 0x01
    27a6:	82 81       	ldd	r24, Z+2	; 0x02
    27a8:	93 81       	ldd	r25, Z+3	; 0x03
    27aa:	20 e0       	ldi	r18, 0x00	; 0
    27ac:	3f ef       	ldi	r19, 0xFF	; 255
    27ae:	4f e7       	ldi	r20, 0x7F	; 127
    27b0:	57 e4       	ldi	r21, 0x47	; 71
    27b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27b6:	18 16       	cp	r1, r24
    27b8:	64 f5       	brge	.+88     	; 0x2812 <LCD_sendCommand+0x430>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27ba:	fe 01       	movw	r30, r28
    27bc:	ed 5b       	subi	r30, 0xBD	; 189
    27be:	ff 4f       	sbci	r31, 0xFF	; 255
    27c0:	60 81       	ld	r22, Z
    27c2:	71 81       	ldd	r23, Z+1	; 0x01
    27c4:	82 81       	ldd	r24, Z+2	; 0x02
    27c6:	93 81       	ldd	r25, Z+3	; 0x03
    27c8:	20 e0       	ldi	r18, 0x00	; 0
    27ca:	30 e0       	ldi	r19, 0x00	; 0
    27cc:	40 e2       	ldi	r20, 0x20	; 32
    27ce:	51 e4       	ldi	r21, 0x41	; 65
    27d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27d4:	dc 01       	movw	r26, r24
    27d6:	cb 01       	movw	r24, r22
    27d8:	bc 01       	movw	r22, r24
    27da:	cd 01       	movw	r24, r26
    27dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27e0:	dc 01       	movw	r26, r24
    27e2:	cb 01       	movw	r24, r22
    27e4:	9e af       	std	Y+62, r25	; 0x3e
    27e6:	8d af       	std	Y+61, r24	; 0x3d
    27e8:	0f c0       	rjmp	.+30     	; 0x2808 <LCD_sendCommand+0x426>
    27ea:	88 ec       	ldi	r24, 0xC8	; 200
    27ec:	90 e0       	ldi	r25, 0x00	; 0
    27ee:	9c af       	std	Y+60, r25	; 0x3c
    27f0:	8b af       	std	Y+59, r24	; 0x3b
    27f2:	8b ad       	ldd	r24, Y+59	; 0x3b
    27f4:	9c ad       	ldd	r25, Y+60	; 0x3c
    27f6:	01 97       	sbiw	r24, 0x01	; 1
    27f8:	f1 f7       	brne	.-4      	; 0x27f6 <LCD_sendCommand+0x414>
    27fa:	9c af       	std	Y+60, r25	; 0x3c
    27fc:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27fe:	8d ad       	ldd	r24, Y+61	; 0x3d
    2800:	9e ad       	ldd	r25, Y+62	; 0x3e
    2802:	01 97       	sbiw	r24, 0x01	; 1
    2804:	9e af       	std	Y+62, r25	; 0x3e
    2806:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2808:	8d ad       	ldd	r24, Y+61	; 0x3d
    280a:	9e ad       	ldd	r25, Y+62	; 0x3e
    280c:	00 97       	sbiw	r24, 0x00	; 0
    280e:	69 f7       	brne	.-38     	; 0x27ea <LCD_sendCommand+0x408>
    2810:	16 c0       	rjmp	.+44     	; 0x283e <LCD_sendCommand+0x45c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2812:	fe 01       	movw	r30, r28
    2814:	ff 96       	adiw	r30, 0x3f	; 63
    2816:	60 81       	ld	r22, Z
    2818:	71 81       	ldd	r23, Z+1	; 0x01
    281a:	82 81       	ldd	r24, Z+2	; 0x02
    281c:	93 81       	ldd	r25, Z+3	; 0x03
    281e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2822:	dc 01       	movw	r26, r24
    2824:	cb 01       	movw	r24, r22
    2826:	9e af       	std	Y+62, r25	; 0x3e
    2828:	8d af       	std	Y+61, r24	; 0x3d
    282a:	8d ad       	ldd	r24, Y+61	; 0x3d
    282c:	9e ad       	ldd	r25, Y+62	; 0x3e
    282e:	9a af       	std	Y+58, r25	; 0x3a
    2830:	89 af       	std	Y+57, r24	; 0x39
    2832:	89 ad       	ldd	r24, Y+57	; 0x39
    2834:	9a ad       	ldd	r25, Y+58	; 0x3a
    2836:	01 97       	sbiw	r24, 0x01	; 1
    2838:	f1 f7       	brne	.-4      	; 0x2836 <LCD_sendCommand+0x454>
    283a:	9a af       	std	Y+58, r25	; 0x3a
    283c:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    283e:	80 e0       	ldi	r24, 0x00	; 0
    2840:	67 e0       	ldi	r22, 0x07	; 7
    2842:	40 e0       	ldi	r20, 0x00	; 0
    2844:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <GPIO_writePin>
    2848:	80 e0       	ldi	r24, 0x00	; 0
    284a:	90 e0       	ldi	r25, 0x00	; 0
    284c:	a0 e8       	ldi	r26, 0x80	; 128
    284e:	bf e3       	ldi	r27, 0x3F	; 63
    2850:	8d ab       	std	Y+53, r24	; 0x35
    2852:	9e ab       	std	Y+54, r25	; 0x36
    2854:	af ab       	std	Y+55, r26	; 0x37
    2856:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2858:	6d a9       	ldd	r22, Y+53	; 0x35
    285a:	7e a9       	ldd	r23, Y+54	; 0x36
    285c:	8f a9       	ldd	r24, Y+55	; 0x37
    285e:	98 ad       	ldd	r25, Y+56	; 0x38
    2860:	20 e0       	ldi	r18, 0x00	; 0
    2862:	30 e0       	ldi	r19, 0x00	; 0
    2864:	4a ef       	ldi	r20, 0xFA	; 250
    2866:	54 e4       	ldi	r21, 0x44	; 68
    2868:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    286c:	dc 01       	movw	r26, r24
    286e:	cb 01       	movw	r24, r22
    2870:	89 ab       	std	Y+49, r24	; 0x31
    2872:	9a ab       	std	Y+50, r25	; 0x32
    2874:	ab ab       	std	Y+51, r26	; 0x33
    2876:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2878:	69 a9       	ldd	r22, Y+49	; 0x31
    287a:	7a a9       	ldd	r23, Y+50	; 0x32
    287c:	8b a9       	ldd	r24, Y+51	; 0x33
    287e:	9c a9       	ldd	r25, Y+52	; 0x34
    2880:	20 e0       	ldi	r18, 0x00	; 0
    2882:	30 e0       	ldi	r19, 0x00	; 0
    2884:	40 e8       	ldi	r20, 0x80	; 128
    2886:	5f e3       	ldi	r21, 0x3F	; 63
    2888:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    288c:	88 23       	and	r24, r24
    288e:	2c f4       	brge	.+10     	; 0x289a <LCD_sendCommand+0x4b8>
		__ticks = 1;
    2890:	81 e0       	ldi	r24, 0x01	; 1
    2892:	90 e0       	ldi	r25, 0x00	; 0
    2894:	98 ab       	std	Y+48, r25	; 0x30
    2896:	8f a7       	std	Y+47, r24	; 0x2f
    2898:	3f c0       	rjmp	.+126    	; 0x2918 <LCD_sendCommand+0x536>
	else if (__tmp > 65535)
    289a:	69 a9       	ldd	r22, Y+49	; 0x31
    289c:	7a a9       	ldd	r23, Y+50	; 0x32
    289e:	8b a9       	ldd	r24, Y+51	; 0x33
    28a0:	9c a9       	ldd	r25, Y+52	; 0x34
    28a2:	20 e0       	ldi	r18, 0x00	; 0
    28a4:	3f ef       	ldi	r19, 0xFF	; 255
    28a6:	4f e7       	ldi	r20, 0x7F	; 127
    28a8:	57 e4       	ldi	r21, 0x47	; 71
    28aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28ae:	18 16       	cp	r1, r24
    28b0:	4c f5       	brge	.+82     	; 0x2904 <LCD_sendCommand+0x522>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28b2:	6d a9       	ldd	r22, Y+53	; 0x35
    28b4:	7e a9       	ldd	r23, Y+54	; 0x36
    28b6:	8f a9       	ldd	r24, Y+55	; 0x37
    28b8:	98 ad       	ldd	r25, Y+56	; 0x38
    28ba:	20 e0       	ldi	r18, 0x00	; 0
    28bc:	30 e0       	ldi	r19, 0x00	; 0
    28be:	40 e2       	ldi	r20, 0x20	; 32
    28c0:	51 e4       	ldi	r21, 0x41	; 65
    28c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28c6:	dc 01       	movw	r26, r24
    28c8:	cb 01       	movw	r24, r22
    28ca:	bc 01       	movw	r22, r24
    28cc:	cd 01       	movw	r24, r26
    28ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28d2:	dc 01       	movw	r26, r24
    28d4:	cb 01       	movw	r24, r22
    28d6:	98 ab       	std	Y+48, r25	; 0x30
    28d8:	8f a7       	std	Y+47, r24	; 0x2f
    28da:	0f c0       	rjmp	.+30     	; 0x28fa <LCD_sendCommand+0x518>
    28dc:	88 ec       	ldi	r24, 0xC8	; 200
    28de:	90 e0       	ldi	r25, 0x00	; 0
    28e0:	9e a7       	std	Y+46, r25	; 0x2e
    28e2:	8d a7       	std	Y+45, r24	; 0x2d
    28e4:	8d a5       	ldd	r24, Y+45	; 0x2d
    28e6:	9e a5       	ldd	r25, Y+46	; 0x2e
    28e8:	01 97       	sbiw	r24, 0x01	; 1
    28ea:	f1 f7       	brne	.-4      	; 0x28e8 <LCD_sendCommand+0x506>
    28ec:	9e a7       	std	Y+46, r25	; 0x2e
    28ee:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28f0:	8f a5       	ldd	r24, Y+47	; 0x2f
    28f2:	98 a9       	ldd	r25, Y+48	; 0x30
    28f4:	01 97       	sbiw	r24, 0x01	; 1
    28f6:	98 ab       	std	Y+48, r25	; 0x30
    28f8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    28fc:	98 a9       	ldd	r25, Y+48	; 0x30
    28fe:	00 97       	sbiw	r24, 0x00	; 0
    2900:	69 f7       	brne	.-38     	; 0x28dc <LCD_sendCommand+0x4fa>
    2902:	14 c0       	rjmp	.+40     	; 0x292c <LCD_sendCommand+0x54a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2904:	69 a9       	ldd	r22, Y+49	; 0x31
    2906:	7a a9       	ldd	r23, Y+50	; 0x32
    2908:	8b a9       	ldd	r24, Y+51	; 0x33
    290a:	9c a9       	ldd	r25, Y+52	; 0x34
    290c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2910:	dc 01       	movw	r26, r24
    2912:	cb 01       	movw	r24, r22
    2914:	98 ab       	std	Y+48, r25	; 0x30
    2916:	8f a7       	std	Y+47, r24	; 0x2f
    2918:	8f a5       	ldd	r24, Y+47	; 0x2f
    291a:	98 a9       	ldd	r25, Y+48	; 0x30
    291c:	9c a7       	std	Y+44, r25	; 0x2c
    291e:	8b a7       	std	Y+43, r24	; 0x2b
    2920:	8b a5       	ldd	r24, Y+43	; 0x2b
    2922:	9c a5       	ldd	r25, Y+44	; 0x2c
    2924:	01 97       	sbiw	r24, 0x01	; 1
    2926:	f1 f7       	brne	.-4      	; 0x2924 <LCD_sendCommand+0x542>
    2928:	9c a7       	std	Y+44, r25	; 0x2c
    292a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    292c:	80 e0       	ldi	r24, 0x00	; 0
    292e:	67 e0       	ldi	r22, 0x07	; 7
    2930:	41 e0       	ldi	r20, 0x01	; 1
    2932:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <GPIO_writePin>
    2936:	80 e0       	ldi	r24, 0x00	; 0
    2938:	90 e0       	ldi	r25, 0x00	; 0
    293a:	a0 e8       	ldi	r26, 0x80	; 128
    293c:	bf e3       	ldi	r27, 0x3F	; 63
    293e:	8f a3       	std	Y+39, r24	; 0x27
    2940:	98 a7       	std	Y+40, r25	; 0x28
    2942:	a9 a7       	std	Y+41, r26	; 0x29
    2944:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2946:	6f a1       	ldd	r22, Y+39	; 0x27
    2948:	78 a5       	ldd	r23, Y+40	; 0x28
    294a:	89 a5       	ldd	r24, Y+41	; 0x29
    294c:	9a a5       	ldd	r25, Y+42	; 0x2a
    294e:	20 e0       	ldi	r18, 0x00	; 0
    2950:	30 e0       	ldi	r19, 0x00	; 0
    2952:	4a ef       	ldi	r20, 0xFA	; 250
    2954:	54 e4       	ldi	r21, 0x44	; 68
    2956:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    295a:	dc 01       	movw	r26, r24
    295c:	cb 01       	movw	r24, r22
    295e:	8b a3       	std	Y+35, r24	; 0x23
    2960:	9c a3       	std	Y+36, r25	; 0x24
    2962:	ad a3       	std	Y+37, r26	; 0x25
    2964:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2966:	6b a1       	ldd	r22, Y+35	; 0x23
    2968:	7c a1       	ldd	r23, Y+36	; 0x24
    296a:	8d a1       	ldd	r24, Y+37	; 0x25
    296c:	9e a1       	ldd	r25, Y+38	; 0x26
    296e:	20 e0       	ldi	r18, 0x00	; 0
    2970:	30 e0       	ldi	r19, 0x00	; 0
    2972:	40 e8       	ldi	r20, 0x80	; 128
    2974:	5f e3       	ldi	r21, 0x3F	; 63
    2976:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    297a:	88 23       	and	r24, r24
    297c:	2c f4       	brge	.+10     	; 0x2988 <LCD_sendCommand+0x5a6>
		__ticks = 1;
    297e:	81 e0       	ldi	r24, 0x01	; 1
    2980:	90 e0       	ldi	r25, 0x00	; 0
    2982:	9a a3       	std	Y+34, r25	; 0x22
    2984:	89 a3       	std	Y+33, r24	; 0x21
    2986:	3f c0       	rjmp	.+126    	; 0x2a06 <LCD_sendCommand+0x624>
	else if (__tmp > 65535)
    2988:	6b a1       	ldd	r22, Y+35	; 0x23
    298a:	7c a1       	ldd	r23, Y+36	; 0x24
    298c:	8d a1       	ldd	r24, Y+37	; 0x25
    298e:	9e a1       	ldd	r25, Y+38	; 0x26
    2990:	20 e0       	ldi	r18, 0x00	; 0
    2992:	3f ef       	ldi	r19, 0xFF	; 255
    2994:	4f e7       	ldi	r20, 0x7F	; 127
    2996:	57 e4       	ldi	r21, 0x47	; 71
    2998:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    299c:	18 16       	cp	r1, r24
    299e:	4c f5       	brge	.+82     	; 0x29f2 <LCD_sendCommand+0x610>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29a0:	6f a1       	ldd	r22, Y+39	; 0x27
    29a2:	78 a5       	ldd	r23, Y+40	; 0x28
    29a4:	89 a5       	ldd	r24, Y+41	; 0x29
    29a6:	9a a5       	ldd	r25, Y+42	; 0x2a
    29a8:	20 e0       	ldi	r18, 0x00	; 0
    29aa:	30 e0       	ldi	r19, 0x00	; 0
    29ac:	40 e2       	ldi	r20, 0x20	; 32
    29ae:	51 e4       	ldi	r21, 0x41	; 65
    29b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29b4:	dc 01       	movw	r26, r24
    29b6:	cb 01       	movw	r24, r22
    29b8:	bc 01       	movw	r22, r24
    29ba:	cd 01       	movw	r24, r26
    29bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29c0:	dc 01       	movw	r26, r24
    29c2:	cb 01       	movw	r24, r22
    29c4:	9a a3       	std	Y+34, r25	; 0x22
    29c6:	89 a3       	std	Y+33, r24	; 0x21
    29c8:	0f c0       	rjmp	.+30     	; 0x29e8 <LCD_sendCommand+0x606>
    29ca:	88 ec       	ldi	r24, 0xC8	; 200
    29cc:	90 e0       	ldi	r25, 0x00	; 0
    29ce:	98 a3       	std	Y+32, r25	; 0x20
    29d0:	8f 8f       	std	Y+31, r24	; 0x1f
    29d2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    29d4:	98 a1       	ldd	r25, Y+32	; 0x20
    29d6:	01 97       	sbiw	r24, 0x01	; 1
    29d8:	f1 f7       	brne	.-4      	; 0x29d6 <LCD_sendCommand+0x5f4>
    29da:	98 a3       	std	Y+32, r25	; 0x20
    29dc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29de:	89 a1       	ldd	r24, Y+33	; 0x21
    29e0:	9a a1       	ldd	r25, Y+34	; 0x22
    29e2:	01 97       	sbiw	r24, 0x01	; 1
    29e4:	9a a3       	std	Y+34, r25	; 0x22
    29e6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29e8:	89 a1       	ldd	r24, Y+33	; 0x21
    29ea:	9a a1       	ldd	r25, Y+34	; 0x22
    29ec:	00 97       	sbiw	r24, 0x00	; 0
    29ee:	69 f7       	brne	.-38     	; 0x29ca <LCD_sendCommand+0x5e8>
    29f0:	14 c0       	rjmp	.+40     	; 0x2a1a <LCD_sendCommand+0x638>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29f2:	6b a1       	ldd	r22, Y+35	; 0x23
    29f4:	7c a1       	ldd	r23, Y+36	; 0x24
    29f6:	8d a1       	ldd	r24, Y+37	; 0x25
    29f8:	9e a1       	ldd	r25, Y+38	; 0x26
    29fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29fe:	dc 01       	movw	r26, r24
    2a00:	cb 01       	movw	r24, r22
    2a02:	9a a3       	std	Y+34, r25	; 0x22
    2a04:	89 a3       	std	Y+33, r24	; 0x21
    2a06:	89 a1       	ldd	r24, Y+33	; 0x21
    2a08:	9a a1       	ldd	r25, Y+34	; 0x22
    2a0a:	9e 8f       	std	Y+30, r25	; 0x1e
    2a0c:	8d 8f       	std	Y+29, r24	; 0x1d
    2a0e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a10:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a12:	01 97       	sbiw	r24, 0x01	; 1
    2a14:	f1 f7       	brne	.-4      	; 0x2a12 <LCD_sendCommand+0x630>
    2a16:	9e 8f       	std	Y+30, r25	; 0x1e
    2a18:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	/* out the first 4 bits of the required command to the data bus D4 --> D7 */
	lcd_port_value = GPIO_readPort(LCD_DATA_PORT_ID);
    2a1a:	80 e0       	ldi	r24, 0x00	; 0
    2a1c:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <GPIO_readPort>
    2a20:	fe 01       	movw	r30, r28
    2a22:	ed 59       	subi	r30, 0x9D	; 157
    2a24:	ff 4f       	sbci	r31, 0xFF	; 255
    2a26:	80 83       	st	Z, r24
#ifdef LCD_LAST_PORT_PINS
	lcd_port_value = (lcd_port_value & 0x0F) | ((command & 0x0F) << 4);
#else
	lcd_port_value = (lcd_port_value & 0xF0) | (command & 0x0F);
    2a28:	fe 01       	movw	r30, r28
    2a2a:	ed 59       	subi	r30, 0x9D	; 157
    2a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2e:	80 81       	ld	r24, Z
    2a30:	98 2f       	mov	r25, r24
    2a32:	90 7f       	andi	r25, 0xF0	; 240
    2a34:	fe 01       	movw	r30, r28
    2a36:	ec 59       	subi	r30, 0x9C	; 156
    2a38:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3a:	80 81       	ld	r24, Z
    2a3c:	8f 70       	andi	r24, 0x0F	; 15
    2a3e:	89 2b       	or	r24, r25
    2a40:	fe 01       	movw	r30, r28
    2a42:	ed 59       	subi	r30, 0x9D	; 157
    2a44:	ff 4f       	sbci	r31, 0xFF	; 255
    2a46:	80 83       	st	Z, r24
#endif
	GPIO_writePort(LCD_DATA_PORT_ID,lcd_port_value);
    2a48:	fe 01       	movw	r30, r28
    2a4a:	ed 59       	subi	r30, 0x9D	; 157
    2a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4e:	80 e0       	ldi	r24, 0x00	; 0
    2a50:	60 81       	ld	r22, Z
    2a52:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <GPIO_writePort>
    2a56:	80 e0       	ldi	r24, 0x00	; 0
    2a58:	90 e0       	ldi	r25, 0x00	; 0
    2a5a:	a0 e8       	ldi	r26, 0x80	; 128
    2a5c:	bf e3       	ldi	r27, 0x3F	; 63
    2a5e:	89 8f       	std	Y+25, r24	; 0x19
    2a60:	9a 8f       	std	Y+26, r25	; 0x1a
    2a62:	ab 8f       	std	Y+27, r26	; 0x1b
    2a64:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a66:	69 8d       	ldd	r22, Y+25	; 0x19
    2a68:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a6a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a6c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a6e:	20 e0       	ldi	r18, 0x00	; 0
    2a70:	30 e0       	ldi	r19, 0x00	; 0
    2a72:	4a ef       	ldi	r20, 0xFA	; 250
    2a74:	54 e4       	ldi	r21, 0x44	; 68
    2a76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a7a:	dc 01       	movw	r26, r24
    2a7c:	cb 01       	movw	r24, r22
    2a7e:	8d 8b       	std	Y+21, r24	; 0x15
    2a80:	9e 8b       	std	Y+22, r25	; 0x16
    2a82:	af 8b       	std	Y+23, r26	; 0x17
    2a84:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a86:	6d 89       	ldd	r22, Y+21	; 0x15
    2a88:	7e 89       	ldd	r23, Y+22	; 0x16
    2a8a:	8f 89       	ldd	r24, Y+23	; 0x17
    2a8c:	98 8d       	ldd	r25, Y+24	; 0x18
    2a8e:	20 e0       	ldi	r18, 0x00	; 0
    2a90:	30 e0       	ldi	r19, 0x00	; 0
    2a92:	40 e8       	ldi	r20, 0x80	; 128
    2a94:	5f e3       	ldi	r21, 0x3F	; 63
    2a96:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a9a:	88 23       	and	r24, r24
    2a9c:	2c f4       	brge	.+10     	; 0x2aa8 <LCD_sendCommand+0x6c6>
		__ticks = 1;
    2a9e:	81 e0       	ldi	r24, 0x01	; 1
    2aa0:	90 e0       	ldi	r25, 0x00	; 0
    2aa2:	9c 8b       	std	Y+20, r25	; 0x14
    2aa4:	8b 8b       	std	Y+19, r24	; 0x13
    2aa6:	3f c0       	rjmp	.+126    	; 0x2b26 <LCD_sendCommand+0x744>
	else if (__tmp > 65535)
    2aa8:	6d 89       	ldd	r22, Y+21	; 0x15
    2aaa:	7e 89       	ldd	r23, Y+22	; 0x16
    2aac:	8f 89       	ldd	r24, Y+23	; 0x17
    2aae:	98 8d       	ldd	r25, Y+24	; 0x18
    2ab0:	20 e0       	ldi	r18, 0x00	; 0
    2ab2:	3f ef       	ldi	r19, 0xFF	; 255
    2ab4:	4f e7       	ldi	r20, 0x7F	; 127
    2ab6:	57 e4       	ldi	r21, 0x47	; 71
    2ab8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2abc:	18 16       	cp	r1, r24
    2abe:	4c f5       	brge	.+82     	; 0x2b12 <LCD_sendCommand+0x730>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ac0:	69 8d       	ldd	r22, Y+25	; 0x19
    2ac2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ac4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ac6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ac8:	20 e0       	ldi	r18, 0x00	; 0
    2aca:	30 e0       	ldi	r19, 0x00	; 0
    2acc:	40 e2       	ldi	r20, 0x20	; 32
    2ace:	51 e4       	ldi	r21, 0x41	; 65
    2ad0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ad4:	dc 01       	movw	r26, r24
    2ad6:	cb 01       	movw	r24, r22
    2ad8:	bc 01       	movw	r22, r24
    2ada:	cd 01       	movw	r24, r26
    2adc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ae0:	dc 01       	movw	r26, r24
    2ae2:	cb 01       	movw	r24, r22
    2ae4:	9c 8b       	std	Y+20, r25	; 0x14
    2ae6:	8b 8b       	std	Y+19, r24	; 0x13
    2ae8:	0f c0       	rjmp	.+30     	; 0x2b08 <LCD_sendCommand+0x726>
    2aea:	88 ec       	ldi	r24, 0xC8	; 200
    2aec:	90 e0       	ldi	r25, 0x00	; 0
    2aee:	9a 8b       	std	Y+18, r25	; 0x12
    2af0:	89 8b       	std	Y+17, r24	; 0x11
    2af2:	89 89       	ldd	r24, Y+17	; 0x11
    2af4:	9a 89       	ldd	r25, Y+18	; 0x12
    2af6:	01 97       	sbiw	r24, 0x01	; 1
    2af8:	f1 f7       	brne	.-4      	; 0x2af6 <LCD_sendCommand+0x714>
    2afa:	9a 8b       	std	Y+18, r25	; 0x12
    2afc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2afe:	8b 89       	ldd	r24, Y+19	; 0x13
    2b00:	9c 89       	ldd	r25, Y+20	; 0x14
    2b02:	01 97       	sbiw	r24, 0x01	; 1
    2b04:	9c 8b       	std	Y+20, r25	; 0x14
    2b06:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b08:	8b 89       	ldd	r24, Y+19	; 0x13
    2b0a:	9c 89       	ldd	r25, Y+20	; 0x14
    2b0c:	00 97       	sbiw	r24, 0x00	; 0
    2b0e:	69 f7       	brne	.-38     	; 0x2aea <LCD_sendCommand+0x708>
    2b10:	14 c0       	rjmp	.+40     	; 0x2b3a <LCD_sendCommand+0x758>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b12:	6d 89       	ldd	r22, Y+21	; 0x15
    2b14:	7e 89       	ldd	r23, Y+22	; 0x16
    2b16:	8f 89       	ldd	r24, Y+23	; 0x17
    2b18:	98 8d       	ldd	r25, Y+24	; 0x18
    2b1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b1e:	dc 01       	movw	r26, r24
    2b20:	cb 01       	movw	r24, r22
    2b22:	9c 8b       	std	Y+20, r25	; 0x14
    2b24:	8b 8b       	std	Y+19, r24	; 0x13
    2b26:	8b 89       	ldd	r24, Y+19	; 0x13
    2b28:	9c 89       	ldd	r25, Y+20	; 0x14
    2b2a:	98 8b       	std	Y+16, r25	; 0x10
    2b2c:	8f 87       	std	Y+15, r24	; 0x0f
    2b2e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b30:	98 89       	ldd	r25, Y+16	; 0x10
    2b32:	01 97       	sbiw	r24, 0x01	; 1
    2b34:	f1 f7       	brne	.-4      	; 0x2b32 <LCD_sendCommand+0x750>
    2b36:	98 8b       	std	Y+16, r25	; 0x10
    2b38:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2b3a:	80 e0       	ldi	r24, 0x00	; 0
    2b3c:	67 e0       	ldi	r22, 0x07	; 7
    2b3e:	40 e0       	ldi	r20, 0x00	; 0
    2b40:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <GPIO_writePin>
    2b44:	80 e0       	ldi	r24, 0x00	; 0
    2b46:	90 e0       	ldi	r25, 0x00	; 0
    2b48:	a0 e8       	ldi	r26, 0x80	; 128
    2b4a:	bf e3       	ldi	r27, 0x3F	; 63
    2b4c:	8b 87       	std	Y+11, r24	; 0x0b
    2b4e:	9c 87       	std	Y+12, r25	; 0x0c
    2b50:	ad 87       	std	Y+13, r26	; 0x0d
    2b52:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b54:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b56:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b58:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b5c:	20 e0       	ldi	r18, 0x00	; 0
    2b5e:	30 e0       	ldi	r19, 0x00	; 0
    2b60:	4a ef       	ldi	r20, 0xFA	; 250
    2b62:	54 e4       	ldi	r21, 0x44	; 68
    2b64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b68:	dc 01       	movw	r26, r24
    2b6a:	cb 01       	movw	r24, r22
    2b6c:	8f 83       	std	Y+7, r24	; 0x07
    2b6e:	98 87       	std	Y+8, r25	; 0x08
    2b70:	a9 87       	std	Y+9, r26	; 0x09
    2b72:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b74:	6f 81       	ldd	r22, Y+7	; 0x07
    2b76:	78 85       	ldd	r23, Y+8	; 0x08
    2b78:	89 85       	ldd	r24, Y+9	; 0x09
    2b7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b7c:	20 e0       	ldi	r18, 0x00	; 0
    2b7e:	30 e0       	ldi	r19, 0x00	; 0
    2b80:	40 e8       	ldi	r20, 0x80	; 128
    2b82:	5f e3       	ldi	r21, 0x3F	; 63
    2b84:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b88:	88 23       	and	r24, r24
    2b8a:	2c f4       	brge	.+10     	; 0x2b96 <LCD_sendCommand+0x7b4>
		__ticks = 1;
    2b8c:	81 e0       	ldi	r24, 0x01	; 1
    2b8e:	90 e0       	ldi	r25, 0x00	; 0
    2b90:	9e 83       	std	Y+6, r25	; 0x06
    2b92:	8d 83       	std	Y+5, r24	; 0x05
    2b94:	3f c0       	rjmp	.+126    	; 0x2c14 <LCD_sendCommand+0x832>
	else if (__tmp > 65535)
    2b96:	6f 81       	ldd	r22, Y+7	; 0x07
    2b98:	78 85       	ldd	r23, Y+8	; 0x08
    2b9a:	89 85       	ldd	r24, Y+9	; 0x09
    2b9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b9e:	20 e0       	ldi	r18, 0x00	; 0
    2ba0:	3f ef       	ldi	r19, 0xFF	; 255
    2ba2:	4f e7       	ldi	r20, 0x7F	; 127
    2ba4:	57 e4       	ldi	r21, 0x47	; 71
    2ba6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2baa:	18 16       	cp	r1, r24
    2bac:	4c f5       	brge	.+82     	; 0x2c00 <LCD_sendCommand+0x81e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bae:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bb0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bb4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bb6:	20 e0       	ldi	r18, 0x00	; 0
    2bb8:	30 e0       	ldi	r19, 0x00	; 0
    2bba:	40 e2       	ldi	r20, 0x20	; 32
    2bbc:	51 e4       	ldi	r21, 0x41	; 65
    2bbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bc2:	dc 01       	movw	r26, r24
    2bc4:	cb 01       	movw	r24, r22
    2bc6:	bc 01       	movw	r22, r24
    2bc8:	cd 01       	movw	r24, r26
    2bca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bce:	dc 01       	movw	r26, r24
    2bd0:	cb 01       	movw	r24, r22
    2bd2:	9e 83       	std	Y+6, r25	; 0x06
    2bd4:	8d 83       	std	Y+5, r24	; 0x05
    2bd6:	0f c0       	rjmp	.+30     	; 0x2bf6 <LCD_sendCommand+0x814>
    2bd8:	88 ec       	ldi	r24, 0xC8	; 200
    2bda:	90 e0       	ldi	r25, 0x00	; 0
    2bdc:	9c 83       	std	Y+4, r25	; 0x04
    2bde:	8b 83       	std	Y+3, r24	; 0x03
    2be0:	8b 81       	ldd	r24, Y+3	; 0x03
    2be2:	9c 81       	ldd	r25, Y+4	; 0x04
    2be4:	01 97       	sbiw	r24, 0x01	; 1
    2be6:	f1 f7       	brne	.-4      	; 0x2be4 <LCD_sendCommand+0x802>
    2be8:	9c 83       	std	Y+4, r25	; 0x04
    2bea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bec:	8d 81       	ldd	r24, Y+5	; 0x05
    2bee:	9e 81       	ldd	r25, Y+6	; 0x06
    2bf0:	01 97       	sbiw	r24, 0x01	; 1
    2bf2:	9e 83       	std	Y+6, r25	; 0x06
    2bf4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bf6:	8d 81       	ldd	r24, Y+5	; 0x05
    2bf8:	9e 81       	ldd	r25, Y+6	; 0x06
    2bfa:	00 97       	sbiw	r24, 0x00	; 0
    2bfc:	69 f7       	brne	.-38     	; 0x2bd8 <LCD_sendCommand+0x7f6>
    2bfe:	14 c0       	rjmp	.+40     	; 0x2c28 <LCD_sendCommand+0x846>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c00:	6f 81       	ldd	r22, Y+7	; 0x07
    2c02:	78 85       	ldd	r23, Y+8	; 0x08
    2c04:	89 85       	ldd	r24, Y+9	; 0x09
    2c06:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c0c:	dc 01       	movw	r26, r24
    2c0e:	cb 01       	movw	r24, r22
    2c10:	9e 83       	std	Y+6, r25	; 0x06
    2c12:	8d 83       	std	Y+5, r24	; 0x05
    2c14:	8d 81       	ldd	r24, Y+5	; 0x05
    2c16:	9e 81       	ldd	r25, Y+6	; 0x06
    2c18:	9a 83       	std	Y+2, r25	; 0x02
    2c1a:	89 83       	std	Y+1, r24	; 0x01
    2c1c:	89 81       	ldd	r24, Y+1	; 0x01
    2c1e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c20:	01 97       	sbiw	r24, 0x01	; 1
    2c22:	f1 f7       	brne	.-4      	; 0x2c20 <LCD_sendCommand+0x83e>
    2c24:	9a 83       	std	Y+2, r25	; 0x02
    2c26:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2c28:	cc 59       	subi	r28, 0x9C	; 156
    2c2a:	df 4f       	sbci	r29, 0xFF	; 255
    2c2c:	0f b6       	in	r0, 0x3f	; 63
    2c2e:	f8 94       	cli
    2c30:	de bf       	out	0x3e, r29	; 62
    2c32:	0f be       	out	0x3f, r0	; 63
    2c34:	cd bf       	out	0x3d, r28	; 61
    2c36:	cf 91       	pop	r28
    2c38:	df 91       	pop	r29
    2c3a:	1f 91       	pop	r17
    2c3c:	0f 91       	pop	r16
    2c3e:	08 95       	ret

00002c40 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2c40:	0f 93       	push	r16
    2c42:	1f 93       	push	r17
    2c44:	df 93       	push	r29
    2c46:	cf 93       	push	r28
    2c48:	cd b7       	in	r28, 0x3d	; 61
    2c4a:	de b7       	in	r29, 0x3e	; 62
    2c4c:	c4 56       	subi	r28, 0x64	; 100
    2c4e:	d0 40       	sbci	r29, 0x00	; 0
    2c50:	0f b6       	in	r0, 0x3f	; 63
    2c52:	f8 94       	cli
    2c54:	de bf       	out	0x3e, r29	; 62
    2c56:	0f be       	out	0x3f, r0	; 63
    2c58:	cd bf       	out	0x3d, r28	; 61
    2c5a:	fe 01       	movw	r30, r28
    2c5c:	ec 59       	subi	r30, 0x9C	; 156
    2c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c60:	80 83       	st	Z, r24
	uint8 lcd_port_value = 0;
    2c62:	fe 01       	movw	r30, r28
    2c64:	ed 59       	subi	r30, 0x9D	; 157
    2c66:	ff 4f       	sbci	r31, 0xFF	; 255
    2c68:	10 82       	st	Z, r1
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2c6a:	80 e0       	ldi	r24, 0x00	; 0
    2c6c:	65 e0       	ldi	r22, 0x05	; 5
    2c6e:	41 e0       	ldi	r20, 0x01	; 1
    2c70:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    2c74:	80 e0       	ldi	r24, 0x00	; 0
    2c76:	66 e0       	ldi	r22, 0x06	; 6
    2c78:	40 e0       	ldi	r20, 0x00	; 0
    2c7a:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <GPIO_writePin>
    2c7e:	fe 01       	movw	r30, r28
    2c80:	e1 5a       	subi	r30, 0xA1	; 161
    2c82:	ff 4f       	sbci	r31, 0xFF	; 255
    2c84:	80 e0       	ldi	r24, 0x00	; 0
    2c86:	90 e0       	ldi	r25, 0x00	; 0
    2c88:	a0 e8       	ldi	r26, 0x80	; 128
    2c8a:	bf e3       	ldi	r27, 0x3F	; 63
    2c8c:	80 83       	st	Z, r24
    2c8e:	91 83       	std	Z+1, r25	; 0x01
    2c90:	a2 83       	std	Z+2, r26	; 0x02
    2c92:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c94:	8e 01       	movw	r16, r28
    2c96:	05 5a       	subi	r16, 0xA5	; 165
    2c98:	1f 4f       	sbci	r17, 0xFF	; 255
    2c9a:	fe 01       	movw	r30, r28
    2c9c:	e1 5a       	subi	r30, 0xA1	; 161
    2c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca0:	60 81       	ld	r22, Z
    2ca2:	71 81       	ldd	r23, Z+1	; 0x01
    2ca4:	82 81       	ldd	r24, Z+2	; 0x02
    2ca6:	93 81       	ldd	r25, Z+3	; 0x03
    2ca8:	20 e0       	ldi	r18, 0x00	; 0
    2caa:	30 e0       	ldi	r19, 0x00	; 0
    2cac:	4a ef       	ldi	r20, 0xFA	; 250
    2cae:	54 e4       	ldi	r21, 0x44	; 68
    2cb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cb4:	dc 01       	movw	r26, r24
    2cb6:	cb 01       	movw	r24, r22
    2cb8:	f8 01       	movw	r30, r16
    2cba:	80 83       	st	Z, r24
    2cbc:	91 83       	std	Z+1, r25	; 0x01
    2cbe:	a2 83       	std	Z+2, r26	; 0x02
    2cc0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2cc2:	fe 01       	movw	r30, r28
    2cc4:	e5 5a       	subi	r30, 0xA5	; 165
    2cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc8:	60 81       	ld	r22, Z
    2cca:	71 81       	ldd	r23, Z+1	; 0x01
    2ccc:	82 81       	ldd	r24, Z+2	; 0x02
    2cce:	93 81       	ldd	r25, Z+3	; 0x03
    2cd0:	20 e0       	ldi	r18, 0x00	; 0
    2cd2:	30 e0       	ldi	r19, 0x00	; 0
    2cd4:	40 e8       	ldi	r20, 0x80	; 128
    2cd6:	5f e3       	ldi	r21, 0x3F	; 63
    2cd8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cdc:	88 23       	and	r24, r24
    2cde:	44 f4       	brge	.+16     	; 0x2cf0 <LCD_displayCharacter+0xb0>
		__ticks = 1;
    2ce0:	fe 01       	movw	r30, r28
    2ce2:	e7 5a       	subi	r30, 0xA7	; 167
    2ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce6:	81 e0       	ldi	r24, 0x01	; 1
    2ce8:	90 e0       	ldi	r25, 0x00	; 0
    2cea:	91 83       	std	Z+1, r25	; 0x01
    2cec:	80 83       	st	Z, r24
    2cee:	64 c0       	rjmp	.+200    	; 0x2db8 <LCD_displayCharacter+0x178>
	else if (__tmp > 65535)
    2cf0:	fe 01       	movw	r30, r28
    2cf2:	e5 5a       	subi	r30, 0xA5	; 165
    2cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf6:	60 81       	ld	r22, Z
    2cf8:	71 81       	ldd	r23, Z+1	; 0x01
    2cfa:	82 81       	ldd	r24, Z+2	; 0x02
    2cfc:	93 81       	ldd	r25, Z+3	; 0x03
    2cfe:	20 e0       	ldi	r18, 0x00	; 0
    2d00:	3f ef       	ldi	r19, 0xFF	; 255
    2d02:	4f e7       	ldi	r20, 0x7F	; 127
    2d04:	57 e4       	ldi	r21, 0x47	; 71
    2d06:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d0a:	18 16       	cp	r1, r24
    2d0c:	0c f0       	brlt	.+2      	; 0x2d10 <LCD_displayCharacter+0xd0>
    2d0e:	43 c0       	rjmp	.+134    	; 0x2d96 <LCD_displayCharacter+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d10:	fe 01       	movw	r30, r28
    2d12:	e1 5a       	subi	r30, 0xA1	; 161
    2d14:	ff 4f       	sbci	r31, 0xFF	; 255
    2d16:	60 81       	ld	r22, Z
    2d18:	71 81       	ldd	r23, Z+1	; 0x01
    2d1a:	82 81       	ldd	r24, Z+2	; 0x02
    2d1c:	93 81       	ldd	r25, Z+3	; 0x03
    2d1e:	20 e0       	ldi	r18, 0x00	; 0
    2d20:	30 e0       	ldi	r19, 0x00	; 0
    2d22:	40 e2       	ldi	r20, 0x20	; 32
    2d24:	51 e4       	ldi	r21, 0x41	; 65
    2d26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d2a:	dc 01       	movw	r26, r24
    2d2c:	cb 01       	movw	r24, r22
    2d2e:	8e 01       	movw	r16, r28
    2d30:	07 5a       	subi	r16, 0xA7	; 167
    2d32:	1f 4f       	sbci	r17, 0xFF	; 255
    2d34:	bc 01       	movw	r22, r24
    2d36:	cd 01       	movw	r24, r26
    2d38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d3c:	dc 01       	movw	r26, r24
    2d3e:	cb 01       	movw	r24, r22
    2d40:	f8 01       	movw	r30, r16
    2d42:	91 83       	std	Z+1, r25	; 0x01
    2d44:	80 83       	st	Z, r24
    2d46:	1f c0       	rjmp	.+62     	; 0x2d86 <LCD_displayCharacter+0x146>
    2d48:	fe 01       	movw	r30, r28
    2d4a:	e9 5a       	subi	r30, 0xA9	; 169
    2d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4e:	88 ec       	ldi	r24, 0xC8	; 200
    2d50:	90 e0       	ldi	r25, 0x00	; 0
    2d52:	91 83       	std	Z+1, r25	; 0x01
    2d54:	80 83       	st	Z, r24
    2d56:	fe 01       	movw	r30, r28
    2d58:	e9 5a       	subi	r30, 0xA9	; 169
    2d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5c:	80 81       	ld	r24, Z
    2d5e:	91 81       	ldd	r25, Z+1	; 0x01
    2d60:	01 97       	sbiw	r24, 0x01	; 1
    2d62:	f1 f7       	brne	.-4      	; 0x2d60 <LCD_displayCharacter+0x120>
    2d64:	fe 01       	movw	r30, r28
    2d66:	e9 5a       	subi	r30, 0xA9	; 169
    2d68:	ff 4f       	sbci	r31, 0xFF	; 255
    2d6a:	91 83       	std	Z+1, r25	; 0x01
    2d6c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d6e:	de 01       	movw	r26, r28
    2d70:	a7 5a       	subi	r26, 0xA7	; 167
    2d72:	bf 4f       	sbci	r27, 0xFF	; 255
    2d74:	fe 01       	movw	r30, r28
    2d76:	e7 5a       	subi	r30, 0xA7	; 167
    2d78:	ff 4f       	sbci	r31, 0xFF	; 255
    2d7a:	80 81       	ld	r24, Z
    2d7c:	91 81       	ldd	r25, Z+1	; 0x01
    2d7e:	01 97       	sbiw	r24, 0x01	; 1
    2d80:	11 96       	adiw	r26, 0x01	; 1
    2d82:	9c 93       	st	X, r25
    2d84:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d86:	fe 01       	movw	r30, r28
    2d88:	e7 5a       	subi	r30, 0xA7	; 167
    2d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d8c:	80 81       	ld	r24, Z
    2d8e:	91 81       	ldd	r25, Z+1	; 0x01
    2d90:	00 97       	sbiw	r24, 0x00	; 0
    2d92:	d1 f6       	brne	.-76     	; 0x2d48 <LCD_displayCharacter+0x108>
    2d94:	27 c0       	rjmp	.+78     	; 0x2de4 <LCD_displayCharacter+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d96:	8e 01       	movw	r16, r28
    2d98:	07 5a       	subi	r16, 0xA7	; 167
    2d9a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d9c:	fe 01       	movw	r30, r28
    2d9e:	e5 5a       	subi	r30, 0xA5	; 165
    2da0:	ff 4f       	sbci	r31, 0xFF	; 255
    2da2:	60 81       	ld	r22, Z
    2da4:	71 81       	ldd	r23, Z+1	; 0x01
    2da6:	82 81       	ldd	r24, Z+2	; 0x02
    2da8:	93 81       	ldd	r25, Z+3	; 0x03
    2daa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dae:	dc 01       	movw	r26, r24
    2db0:	cb 01       	movw	r24, r22
    2db2:	f8 01       	movw	r30, r16
    2db4:	91 83       	std	Z+1, r25	; 0x01
    2db6:	80 83       	st	Z, r24
    2db8:	de 01       	movw	r26, r28
    2dba:	ab 5a       	subi	r26, 0xAB	; 171
    2dbc:	bf 4f       	sbci	r27, 0xFF	; 255
    2dbe:	fe 01       	movw	r30, r28
    2dc0:	e7 5a       	subi	r30, 0xA7	; 167
    2dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc4:	80 81       	ld	r24, Z
    2dc6:	91 81       	ldd	r25, Z+1	; 0x01
    2dc8:	8d 93       	st	X+, r24
    2dca:	9c 93       	st	X, r25
    2dcc:	fe 01       	movw	r30, r28
    2dce:	eb 5a       	subi	r30, 0xAB	; 171
    2dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd2:	80 81       	ld	r24, Z
    2dd4:	91 81       	ldd	r25, Z+1	; 0x01
    2dd6:	01 97       	sbiw	r24, 0x01	; 1
    2dd8:	f1 f7       	brne	.-4      	; 0x2dd6 <LCD_displayCharacter+0x196>
    2dda:	fe 01       	movw	r30, r28
    2ddc:	eb 5a       	subi	r30, 0xAB	; 171
    2dde:	ff 4f       	sbci	r31, 0xFF	; 255
    2de0:	91 83       	std	Z+1, r25	; 0x01
    2de2:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2de4:	80 e0       	ldi	r24, 0x00	; 0
    2de6:	67 e0       	ldi	r22, 0x07	; 7
    2de8:	41 e0       	ldi	r20, 0x01	; 1
    2dea:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <GPIO_writePin>
    2dee:	fe 01       	movw	r30, r28
    2df0:	ef 5a       	subi	r30, 0xAF	; 175
    2df2:	ff 4f       	sbci	r31, 0xFF	; 255
    2df4:	80 e0       	ldi	r24, 0x00	; 0
    2df6:	90 e0       	ldi	r25, 0x00	; 0
    2df8:	a0 e8       	ldi	r26, 0x80	; 128
    2dfa:	bf e3       	ldi	r27, 0x3F	; 63
    2dfc:	80 83       	st	Z, r24
    2dfe:	91 83       	std	Z+1, r25	; 0x01
    2e00:	a2 83       	std	Z+2, r26	; 0x02
    2e02:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e04:	8e 01       	movw	r16, r28
    2e06:	03 5b       	subi	r16, 0xB3	; 179
    2e08:	1f 4f       	sbci	r17, 0xFF	; 255
    2e0a:	fe 01       	movw	r30, r28
    2e0c:	ef 5a       	subi	r30, 0xAF	; 175
    2e0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e10:	60 81       	ld	r22, Z
    2e12:	71 81       	ldd	r23, Z+1	; 0x01
    2e14:	82 81       	ldd	r24, Z+2	; 0x02
    2e16:	93 81       	ldd	r25, Z+3	; 0x03
    2e18:	20 e0       	ldi	r18, 0x00	; 0
    2e1a:	30 e0       	ldi	r19, 0x00	; 0
    2e1c:	4a ef       	ldi	r20, 0xFA	; 250
    2e1e:	54 e4       	ldi	r21, 0x44	; 68
    2e20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e24:	dc 01       	movw	r26, r24
    2e26:	cb 01       	movw	r24, r22
    2e28:	f8 01       	movw	r30, r16
    2e2a:	80 83       	st	Z, r24
    2e2c:	91 83       	std	Z+1, r25	; 0x01
    2e2e:	a2 83       	std	Z+2, r26	; 0x02
    2e30:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e32:	fe 01       	movw	r30, r28
    2e34:	e3 5b       	subi	r30, 0xB3	; 179
    2e36:	ff 4f       	sbci	r31, 0xFF	; 255
    2e38:	60 81       	ld	r22, Z
    2e3a:	71 81       	ldd	r23, Z+1	; 0x01
    2e3c:	82 81       	ldd	r24, Z+2	; 0x02
    2e3e:	93 81       	ldd	r25, Z+3	; 0x03
    2e40:	20 e0       	ldi	r18, 0x00	; 0
    2e42:	30 e0       	ldi	r19, 0x00	; 0
    2e44:	40 e8       	ldi	r20, 0x80	; 128
    2e46:	5f e3       	ldi	r21, 0x3F	; 63
    2e48:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e4c:	88 23       	and	r24, r24
    2e4e:	44 f4       	brge	.+16     	; 0x2e60 <LCD_displayCharacter+0x220>
		__ticks = 1;
    2e50:	fe 01       	movw	r30, r28
    2e52:	e5 5b       	subi	r30, 0xB5	; 181
    2e54:	ff 4f       	sbci	r31, 0xFF	; 255
    2e56:	81 e0       	ldi	r24, 0x01	; 1
    2e58:	90 e0       	ldi	r25, 0x00	; 0
    2e5a:	91 83       	std	Z+1, r25	; 0x01
    2e5c:	80 83       	st	Z, r24
    2e5e:	64 c0       	rjmp	.+200    	; 0x2f28 <LCD_displayCharacter+0x2e8>
	else if (__tmp > 65535)
    2e60:	fe 01       	movw	r30, r28
    2e62:	e3 5b       	subi	r30, 0xB3	; 179
    2e64:	ff 4f       	sbci	r31, 0xFF	; 255
    2e66:	60 81       	ld	r22, Z
    2e68:	71 81       	ldd	r23, Z+1	; 0x01
    2e6a:	82 81       	ldd	r24, Z+2	; 0x02
    2e6c:	93 81       	ldd	r25, Z+3	; 0x03
    2e6e:	20 e0       	ldi	r18, 0x00	; 0
    2e70:	3f ef       	ldi	r19, 0xFF	; 255
    2e72:	4f e7       	ldi	r20, 0x7F	; 127
    2e74:	57 e4       	ldi	r21, 0x47	; 71
    2e76:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e7a:	18 16       	cp	r1, r24
    2e7c:	0c f0       	brlt	.+2      	; 0x2e80 <LCD_displayCharacter+0x240>
    2e7e:	43 c0       	rjmp	.+134    	; 0x2f06 <LCD_displayCharacter+0x2c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e80:	fe 01       	movw	r30, r28
    2e82:	ef 5a       	subi	r30, 0xAF	; 175
    2e84:	ff 4f       	sbci	r31, 0xFF	; 255
    2e86:	60 81       	ld	r22, Z
    2e88:	71 81       	ldd	r23, Z+1	; 0x01
    2e8a:	82 81       	ldd	r24, Z+2	; 0x02
    2e8c:	93 81       	ldd	r25, Z+3	; 0x03
    2e8e:	20 e0       	ldi	r18, 0x00	; 0
    2e90:	30 e0       	ldi	r19, 0x00	; 0
    2e92:	40 e2       	ldi	r20, 0x20	; 32
    2e94:	51 e4       	ldi	r21, 0x41	; 65
    2e96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e9a:	dc 01       	movw	r26, r24
    2e9c:	cb 01       	movw	r24, r22
    2e9e:	8e 01       	movw	r16, r28
    2ea0:	05 5b       	subi	r16, 0xB5	; 181
    2ea2:	1f 4f       	sbci	r17, 0xFF	; 255
    2ea4:	bc 01       	movw	r22, r24
    2ea6:	cd 01       	movw	r24, r26
    2ea8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eac:	dc 01       	movw	r26, r24
    2eae:	cb 01       	movw	r24, r22
    2eb0:	f8 01       	movw	r30, r16
    2eb2:	91 83       	std	Z+1, r25	; 0x01
    2eb4:	80 83       	st	Z, r24
    2eb6:	1f c0       	rjmp	.+62     	; 0x2ef6 <LCD_displayCharacter+0x2b6>
    2eb8:	fe 01       	movw	r30, r28
    2eba:	e7 5b       	subi	r30, 0xB7	; 183
    2ebc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ebe:	88 ec       	ldi	r24, 0xC8	; 200
    2ec0:	90 e0       	ldi	r25, 0x00	; 0
    2ec2:	91 83       	std	Z+1, r25	; 0x01
    2ec4:	80 83       	st	Z, r24
    2ec6:	fe 01       	movw	r30, r28
    2ec8:	e7 5b       	subi	r30, 0xB7	; 183
    2eca:	ff 4f       	sbci	r31, 0xFF	; 255
    2ecc:	80 81       	ld	r24, Z
    2ece:	91 81       	ldd	r25, Z+1	; 0x01
    2ed0:	01 97       	sbiw	r24, 0x01	; 1
    2ed2:	f1 f7       	brne	.-4      	; 0x2ed0 <LCD_displayCharacter+0x290>
    2ed4:	fe 01       	movw	r30, r28
    2ed6:	e7 5b       	subi	r30, 0xB7	; 183
    2ed8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eda:	91 83       	std	Z+1, r25	; 0x01
    2edc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ede:	de 01       	movw	r26, r28
    2ee0:	a5 5b       	subi	r26, 0xB5	; 181
    2ee2:	bf 4f       	sbci	r27, 0xFF	; 255
    2ee4:	fe 01       	movw	r30, r28
    2ee6:	e5 5b       	subi	r30, 0xB5	; 181
    2ee8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eea:	80 81       	ld	r24, Z
    2eec:	91 81       	ldd	r25, Z+1	; 0x01
    2eee:	01 97       	sbiw	r24, 0x01	; 1
    2ef0:	11 96       	adiw	r26, 0x01	; 1
    2ef2:	9c 93       	st	X, r25
    2ef4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ef6:	fe 01       	movw	r30, r28
    2ef8:	e5 5b       	subi	r30, 0xB5	; 181
    2efa:	ff 4f       	sbci	r31, 0xFF	; 255
    2efc:	80 81       	ld	r24, Z
    2efe:	91 81       	ldd	r25, Z+1	; 0x01
    2f00:	00 97       	sbiw	r24, 0x00	; 0
    2f02:	d1 f6       	brne	.-76     	; 0x2eb8 <LCD_displayCharacter+0x278>
    2f04:	27 c0       	rjmp	.+78     	; 0x2f54 <LCD_displayCharacter+0x314>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f06:	8e 01       	movw	r16, r28
    2f08:	05 5b       	subi	r16, 0xB5	; 181
    2f0a:	1f 4f       	sbci	r17, 0xFF	; 255
    2f0c:	fe 01       	movw	r30, r28
    2f0e:	e3 5b       	subi	r30, 0xB3	; 179
    2f10:	ff 4f       	sbci	r31, 0xFF	; 255
    2f12:	60 81       	ld	r22, Z
    2f14:	71 81       	ldd	r23, Z+1	; 0x01
    2f16:	82 81       	ldd	r24, Z+2	; 0x02
    2f18:	93 81       	ldd	r25, Z+3	; 0x03
    2f1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f1e:	dc 01       	movw	r26, r24
    2f20:	cb 01       	movw	r24, r22
    2f22:	f8 01       	movw	r30, r16
    2f24:	91 83       	std	Z+1, r25	; 0x01
    2f26:	80 83       	st	Z, r24
    2f28:	de 01       	movw	r26, r28
    2f2a:	a9 5b       	subi	r26, 0xB9	; 185
    2f2c:	bf 4f       	sbci	r27, 0xFF	; 255
    2f2e:	fe 01       	movw	r30, r28
    2f30:	e5 5b       	subi	r30, 0xB5	; 181
    2f32:	ff 4f       	sbci	r31, 0xFF	; 255
    2f34:	80 81       	ld	r24, Z
    2f36:	91 81       	ldd	r25, Z+1	; 0x01
    2f38:	8d 93       	st	X+, r24
    2f3a:	9c 93       	st	X, r25
    2f3c:	fe 01       	movw	r30, r28
    2f3e:	e9 5b       	subi	r30, 0xB9	; 185
    2f40:	ff 4f       	sbci	r31, 0xFF	; 255
    2f42:	80 81       	ld	r24, Z
    2f44:	91 81       	ldd	r25, Z+1	; 0x01
    2f46:	01 97       	sbiw	r24, 0x01	; 1
    2f48:	f1 f7       	brne	.-4      	; 0x2f46 <LCD_displayCharacter+0x306>
    2f4a:	fe 01       	movw	r30, r28
    2f4c:	e9 5b       	subi	r30, 0xB9	; 185
    2f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f50:	91 83       	std	Z+1, r25	; 0x01
    2f52:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if (LCD_DATA_BITS_MODE == 4)
	/* out the last 4 bits of the required data to the data bus D4 --> D7 */
	lcd_port_value = GPIO_readPort(LCD_DATA_PORT_ID);
    2f54:	80 e0       	ldi	r24, 0x00	; 0
    2f56:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <GPIO_readPort>
    2f5a:	fe 01       	movw	r30, r28
    2f5c:	ed 59       	subi	r30, 0x9D	; 157
    2f5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f60:	80 83       	st	Z, r24
#ifdef LCD_LAST_PORT_PINS
	lcd_port_value = (lcd_port_value & 0x0F) | (data & 0xF0);
#else
	lcd_port_value = (lcd_port_value & 0xF0) | ((data & 0xF0) >> 4);
    2f62:	fe 01       	movw	r30, r28
    2f64:	ed 59       	subi	r30, 0x9D	; 157
    2f66:	ff 4f       	sbci	r31, 0xFF	; 255
    2f68:	80 81       	ld	r24, Z
    2f6a:	98 2f       	mov	r25, r24
    2f6c:	90 7f       	andi	r25, 0xF0	; 240
    2f6e:	fe 01       	movw	r30, r28
    2f70:	ec 59       	subi	r30, 0x9C	; 156
    2f72:	ff 4f       	sbci	r31, 0xFF	; 255
    2f74:	80 81       	ld	r24, Z
    2f76:	82 95       	swap	r24
    2f78:	8f 70       	andi	r24, 0x0F	; 15
    2f7a:	89 2b       	or	r24, r25
    2f7c:	fe 01       	movw	r30, r28
    2f7e:	ed 59       	subi	r30, 0x9D	; 157
    2f80:	ff 4f       	sbci	r31, 0xFF	; 255
    2f82:	80 83       	st	Z, r24
#endif
	GPIO_writePort(LCD_DATA_PORT_ID,lcd_port_value);
    2f84:	fe 01       	movw	r30, r28
    2f86:	ed 59       	subi	r30, 0x9D	; 157
    2f88:	ff 4f       	sbci	r31, 0xFF	; 255
    2f8a:	80 e0       	ldi	r24, 0x00	; 0
    2f8c:	60 81       	ld	r22, Z
    2f8e:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <GPIO_writePort>
    2f92:	fe 01       	movw	r30, r28
    2f94:	ed 5b       	subi	r30, 0xBD	; 189
    2f96:	ff 4f       	sbci	r31, 0xFF	; 255
    2f98:	80 e0       	ldi	r24, 0x00	; 0
    2f9a:	90 e0       	ldi	r25, 0x00	; 0
    2f9c:	a0 e8       	ldi	r26, 0x80	; 128
    2f9e:	bf e3       	ldi	r27, 0x3F	; 63
    2fa0:	80 83       	st	Z, r24
    2fa2:	91 83       	std	Z+1, r25	; 0x01
    2fa4:	a2 83       	std	Z+2, r26	; 0x02
    2fa6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fa8:	8e 01       	movw	r16, r28
    2faa:	01 5c       	subi	r16, 0xC1	; 193
    2fac:	1f 4f       	sbci	r17, 0xFF	; 255
    2fae:	fe 01       	movw	r30, r28
    2fb0:	ed 5b       	subi	r30, 0xBD	; 189
    2fb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb4:	60 81       	ld	r22, Z
    2fb6:	71 81       	ldd	r23, Z+1	; 0x01
    2fb8:	82 81       	ldd	r24, Z+2	; 0x02
    2fba:	93 81       	ldd	r25, Z+3	; 0x03
    2fbc:	20 e0       	ldi	r18, 0x00	; 0
    2fbe:	30 e0       	ldi	r19, 0x00	; 0
    2fc0:	4a ef       	ldi	r20, 0xFA	; 250
    2fc2:	54 e4       	ldi	r21, 0x44	; 68
    2fc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fc8:	dc 01       	movw	r26, r24
    2fca:	cb 01       	movw	r24, r22
    2fcc:	f8 01       	movw	r30, r16
    2fce:	80 83       	st	Z, r24
    2fd0:	91 83       	std	Z+1, r25	; 0x01
    2fd2:	a2 83       	std	Z+2, r26	; 0x02
    2fd4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2fd6:	fe 01       	movw	r30, r28
    2fd8:	ff 96       	adiw	r30, 0x3f	; 63
    2fda:	60 81       	ld	r22, Z
    2fdc:	71 81       	ldd	r23, Z+1	; 0x01
    2fde:	82 81       	ldd	r24, Z+2	; 0x02
    2fe0:	93 81       	ldd	r25, Z+3	; 0x03
    2fe2:	20 e0       	ldi	r18, 0x00	; 0
    2fe4:	30 e0       	ldi	r19, 0x00	; 0
    2fe6:	40 e8       	ldi	r20, 0x80	; 128
    2fe8:	5f e3       	ldi	r21, 0x3F	; 63
    2fea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fee:	88 23       	and	r24, r24
    2ff0:	2c f4       	brge	.+10     	; 0x2ffc <LCD_displayCharacter+0x3bc>
		__ticks = 1;
    2ff2:	81 e0       	ldi	r24, 0x01	; 1
    2ff4:	90 e0       	ldi	r25, 0x00	; 0
    2ff6:	9e af       	std	Y+62, r25	; 0x3e
    2ff8:	8d af       	std	Y+61, r24	; 0x3d
    2ffa:	46 c0       	rjmp	.+140    	; 0x3088 <LCD_displayCharacter+0x448>
	else if (__tmp > 65535)
    2ffc:	fe 01       	movw	r30, r28
    2ffe:	ff 96       	adiw	r30, 0x3f	; 63
    3000:	60 81       	ld	r22, Z
    3002:	71 81       	ldd	r23, Z+1	; 0x01
    3004:	82 81       	ldd	r24, Z+2	; 0x02
    3006:	93 81       	ldd	r25, Z+3	; 0x03
    3008:	20 e0       	ldi	r18, 0x00	; 0
    300a:	3f ef       	ldi	r19, 0xFF	; 255
    300c:	4f e7       	ldi	r20, 0x7F	; 127
    300e:	57 e4       	ldi	r21, 0x47	; 71
    3010:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3014:	18 16       	cp	r1, r24
    3016:	64 f5       	brge	.+88     	; 0x3070 <LCD_displayCharacter+0x430>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3018:	fe 01       	movw	r30, r28
    301a:	ed 5b       	subi	r30, 0xBD	; 189
    301c:	ff 4f       	sbci	r31, 0xFF	; 255
    301e:	60 81       	ld	r22, Z
    3020:	71 81       	ldd	r23, Z+1	; 0x01
    3022:	82 81       	ldd	r24, Z+2	; 0x02
    3024:	93 81       	ldd	r25, Z+3	; 0x03
    3026:	20 e0       	ldi	r18, 0x00	; 0
    3028:	30 e0       	ldi	r19, 0x00	; 0
    302a:	40 e2       	ldi	r20, 0x20	; 32
    302c:	51 e4       	ldi	r21, 0x41	; 65
    302e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3032:	dc 01       	movw	r26, r24
    3034:	cb 01       	movw	r24, r22
    3036:	bc 01       	movw	r22, r24
    3038:	cd 01       	movw	r24, r26
    303a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    303e:	dc 01       	movw	r26, r24
    3040:	cb 01       	movw	r24, r22
    3042:	9e af       	std	Y+62, r25	; 0x3e
    3044:	8d af       	std	Y+61, r24	; 0x3d
    3046:	0f c0       	rjmp	.+30     	; 0x3066 <LCD_displayCharacter+0x426>
    3048:	88 ec       	ldi	r24, 0xC8	; 200
    304a:	90 e0       	ldi	r25, 0x00	; 0
    304c:	9c af       	std	Y+60, r25	; 0x3c
    304e:	8b af       	std	Y+59, r24	; 0x3b
    3050:	8b ad       	ldd	r24, Y+59	; 0x3b
    3052:	9c ad       	ldd	r25, Y+60	; 0x3c
    3054:	01 97       	sbiw	r24, 0x01	; 1
    3056:	f1 f7       	brne	.-4      	; 0x3054 <LCD_displayCharacter+0x414>
    3058:	9c af       	std	Y+60, r25	; 0x3c
    305a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    305c:	8d ad       	ldd	r24, Y+61	; 0x3d
    305e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3060:	01 97       	sbiw	r24, 0x01	; 1
    3062:	9e af       	std	Y+62, r25	; 0x3e
    3064:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3066:	8d ad       	ldd	r24, Y+61	; 0x3d
    3068:	9e ad       	ldd	r25, Y+62	; 0x3e
    306a:	00 97       	sbiw	r24, 0x00	; 0
    306c:	69 f7       	brne	.-38     	; 0x3048 <LCD_displayCharacter+0x408>
    306e:	16 c0       	rjmp	.+44     	; 0x309c <LCD_displayCharacter+0x45c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3070:	fe 01       	movw	r30, r28
    3072:	ff 96       	adiw	r30, 0x3f	; 63
    3074:	60 81       	ld	r22, Z
    3076:	71 81       	ldd	r23, Z+1	; 0x01
    3078:	82 81       	ldd	r24, Z+2	; 0x02
    307a:	93 81       	ldd	r25, Z+3	; 0x03
    307c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3080:	dc 01       	movw	r26, r24
    3082:	cb 01       	movw	r24, r22
    3084:	9e af       	std	Y+62, r25	; 0x3e
    3086:	8d af       	std	Y+61, r24	; 0x3d
    3088:	8d ad       	ldd	r24, Y+61	; 0x3d
    308a:	9e ad       	ldd	r25, Y+62	; 0x3e
    308c:	9a af       	std	Y+58, r25	; 0x3a
    308e:	89 af       	std	Y+57, r24	; 0x39
    3090:	89 ad       	ldd	r24, Y+57	; 0x39
    3092:	9a ad       	ldd	r25, Y+58	; 0x3a
    3094:	01 97       	sbiw	r24, 0x01	; 1
    3096:	f1 f7       	brne	.-4      	; 0x3094 <LCD_displayCharacter+0x454>
    3098:	9a af       	std	Y+58, r25	; 0x3a
    309a:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    309c:	80 e0       	ldi	r24, 0x00	; 0
    309e:	67 e0       	ldi	r22, 0x07	; 7
    30a0:	40 e0       	ldi	r20, 0x00	; 0
    30a2:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <GPIO_writePin>
    30a6:	80 e0       	ldi	r24, 0x00	; 0
    30a8:	90 e0       	ldi	r25, 0x00	; 0
    30aa:	a0 e8       	ldi	r26, 0x80	; 128
    30ac:	bf e3       	ldi	r27, 0x3F	; 63
    30ae:	8d ab       	std	Y+53, r24	; 0x35
    30b0:	9e ab       	std	Y+54, r25	; 0x36
    30b2:	af ab       	std	Y+55, r26	; 0x37
    30b4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30b6:	6d a9       	ldd	r22, Y+53	; 0x35
    30b8:	7e a9       	ldd	r23, Y+54	; 0x36
    30ba:	8f a9       	ldd	r24, Y+55	; 0x37
    30bc:	98 ad       	ldd	r25, Y+56	; 0x38
    30be:	20 e0       	ldi	r18, 0x00	; 0
    30c0:	30 e0       	ldi	r19, 0x00	; 0
    30c2:	4a ef       	ldi	r20, 0xFA	; 250
    30c4:	54 e4       	ldi	r21, 0x44	; 68
    30c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30ca:	dc 01       	movw	r26, r24
    30cc:	cb 01       	movw	r24, r22
    30ce:	89 ab       	std	Y+49, r24	; 0x31
    30d0:	9a ab       	std	Y+50, r25	; 0x32
    30d2:	ab ab       	std	Y+51, r26	; 0x33
    30d4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    30d6:	69 a9       	ldd	r22, Y+49	; 0x31
    30d8:	7a a9       	ldd	r23, Y+50	; 0x32
    30da:	8b a9       	ldd	r24, Y+51	; 0x33
    30dc:	9c a9       	ldd	r25, Y+52	; 0x34
    30de:	20 e0       	ldi	r18, 0x00	; 0
    30e0:	30 e0       	ldi	r19, 0x00	; 0
    30e2:	40 e8       	ldi	r20, 0x80	; 128
    30e4:	5f e3       	ldi	r21, 0x3F	; 63
    30e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30ea:	88 23       	and	r24, r24
    30ec:	2c f4       	brge	.+10     	; 0x30f8 <LCD_displayCharacter+0x4b8>
		__ticks = 1;
    30ee:	81 e0       	ldi	r24, 0x01	; 1
    30f0:	90 e0       	ldi	r25, 0x00	; 0
    30f2:	98 ab       	std	Y+48, r25	; 0x30
    30f4:	8f a7       	std	Y+47, r24	; 0x2f
    30f6:	3f c0       	rjmp	.+126    	; 0x3176 <LCD_displayCharacter+0x536>
	else if (__tmp > 65535)
    30f8:	69 a9       	ldd	r22, Y+49	; 0x31
    30fa:	7a a9       	ldd	r23, Y+50	; 0x32
    30fc:	8b a9       	ldd	r24, Y+51	; 0x33
    30fe:	9c a9       	ldd	r25, Y+52	; 0x34
    3100:	20 e0       	ldi	r18, 0x00	; 0
    3102:	3f ef       	ldi	r19, 0xFF	; 255
    3104:	4f e7       	ldi	r20, 0x7F	; 127
    3106:	57 e4       	ldi	r21, 0x47	; 71
    3108:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    310c:	18 16       	cp	r1, r24
    310e:	4c f5       	brge	.+82     	; 0x3162 <LCD_displayCharacter+0x522>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3110:	6d a9       	ldd	r22, Y+53	; 0x35
    3112:	7e a9       	ldd	r23, Y+54	; 0x36
    3114:	8f a9       	ldd	r24, Y+55	; 0x37
    3116:	98 ad       	ldd	r25, Y+56	; 0x38
    3118:	20 e0       	ldi	r18, 0x00	; 0
    311a:	30 e0       	ldi	r19, 0x00	; 0
    311c:	40 e2       	ldi	r20, 0x20	; 32
    311e:	51 e4       	ldi	r21, 0x41	; 65
    3120:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3124:	dc 01       	movw	r26, r24
    3126:	cb 01       	movw	r24, r22
    3128:	bc 01       	movw	r22, r24
    312a:	cd 01       	movw	r24, r26
    312c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3130:	dc 01       	movw	r26, r24
    3132:	cb 01       	movw	r24, r22
    3134:	98 ab       	std	Y+48, r25	; 0x30
    3136:	8f a7       	std	Y+47, r24	; 0x2f
    3138:	0f c0       	rjmp	.+30     	; 0x3158 <LCD_displayCharacter+0x518>
    313a:	88 ec       	ldi	r24, 0xC8	; 200
    313c:	90 e0       	ldi	r25, 0x00	; 0
    313e:	9e a7       	std	Y+46, r25	; 0x2e
    3140:	8d a7       	std	Y+45, r24	; 0x2d
    3142:	8d a5       	ldd	r24, Y+45	; 0x2d
    3144:	9e a5       	ldd	r25, Y+46	; 0x2e
    3146:	01 97       	sbiw	r24, 0x01	; 1
    3148:	f1 f7       	brne	.-4      	; 0x3146 <LCD_displayCharacter+0x506>
    314a:	9e a7       	std	Y+46, r25	; 0x2e
    314c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    314e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3150:	98 a9       	ldd	r25, Y+48	; 0x30
    3152:	01 97       	sbiw	r24, 0x01	; 1
    3154:	98 ab       	std	Y+48, r25	; 0x30
    3156:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3158:	8f a5       	ldd	r24, Y+47	; 0x2f
    315a:	98 a9       	ldd	r25, Y+48	; 0x30
    315c:	00 97       	sbiw	r24, 0x00	; 0
    315e:	69 f7       	brne	.-38     	; 0x313a <LCD_displayCharacter+0x4fa>
    3160:	14 c0       	rjmp	.+40     	; 0x318a <LCD_displayCharacter+0x54a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3162:	69 a9       	ldd	r22, Y+49	; 0x31
    3164:	7a a9       	ldd	r23, Y+50	; 0x32
    3166:	8b a9       	ldd	r24, Y+51	; 0x33
    3168:	9c a9       	ldd	r25, Y+52	; 0x34
    316a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    316e:	dc 01       	movw	r26, r24
    3170:	cb 01       	movw	r24, r22
    3172:	98 ab       	std	Y+48, r25	; 0x30
    3174:	8f a7       	std	Y+47, r24	; 0x2f
    3176:	8f a5       	ldd	r24, Y+47	; 0x2f
    3178:	98 a9       	ldd	r25, Y+48	; 0x30
    317a:	9c a7       	std	Y+44, r25	; 0x2c
    317c:	8b a7       	std	Y+43, r24	; 0x2b
    317e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3180:	9c a5       	ldd	r25, Y+44	; 0x2c
    3182:	01 97       	sbiw	r24, 0x01	; 1
    3184:	f1 f7       	brne	.-4      	; 0x3182 <LCD_displayCharacter+0x542>
    3186:	9c a7       	std	Y+44, r25	; 0x2c
    3188:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    318a:	80 e0       	ldi	r24, 0x00	; 0
    318c:	67 e0       	ldi	r22, 0x07	; 7
    318e:	41 e0       	ldi	r20, 0x01	; 1
    3190:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <GPIO_writePin>
    3194:	80 e0       	ldi	r24, 0x00	; 0
    3196:	90 e0       	ldi	r25, 0x00	; 0
    3198:	a0 e8       	ldi	r26, 0x80	; 128
    319a:	bf e3       	ldi	r27, 0x3F	; 63
    319c:	8f a3       	std	Y+39, r24	; 0x27
    319e:	98 a7       	std	Y+40, r25	; 0x28
    31a0:	a9 a7       	std	Y+41, r26	; 0x29
    31a2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31a4:	6f a1       	ldd	r22, Y+39	; 0x27
    31a6:	78 a5       	ldd	r23, Y+40	; 0x28
    31a8:	89 a5       	ldd	r24, Y+41	; 0x29
    31aa:	9a a5       	ldd	r25, Y+42	; 0x2a
    31ac:	20 e0       	ldi	r18, 0x00	; 0
    31ae:	30 e0       	ldi	r19, 0x00	; 0
    31b0:	4a ef       	ldi	r20, 0xFA	; 250
    31b2:	54 e4       	ldi	r21, 0x44	; 68
    31b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31b8:	dc 01       	movw	r26, r24
    31ba:	cb 01       	movw	r24, r22
    31bc:	8b a3       	std	Y+35, r24	; 0x23
    31be:	9c a3       	std	Y+36, r25	; 0x24
    31c0:	ad a3       	std	Y+37, r26	; 0x25
    31c2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    31c4:	6b a1       	ldd	r22, Y+35	; 0x23
    31c6:	7c a1       	ldd	r23, Y+36	; 0x24
    31c8:	8d a1       	ldd	r24, Y+37	; 0x25
    31ca:	9e a1       	ldd	r25, Y+38	; 0x26
    31cc:	20 e0       	ldi	r18, 0x00	; 0
    31ce:	30 e0       	ldi	r19, 0x00	; 0
    31d0:	40 e8       	ldi	r20, 0x80	; 128
    31d2:	5f e3       	ldi	r21, 0x3F	; 63
    31d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31d8:	88 23       	and	r24, r24
    31da:	2c f4       	brge	.+10     	; 0x31e6 <LCD_displayCharacter+0x5a6>
		__ticks = 1;
    31dc:	81 e0       	ldi	r24, 0x01	; 1
    31de:	90 e0       	ldi	r25, 0x00	; 0
    31e0:	9a a3       	std	Y+34, r25	; 0x22
    31e2:	89 a3       	std	Y+33, r24	; 0x21
    31e4:	3f c0       	rjmp	.+126    	; 0x3264 <LCD_displayCharacter+0x624>
	else if (__tmp > 65535)
    31e6:	6b a1       	ldd	r22, Y+35	; 0x23
    31e8:	7c a1       	ldd	r23, Y+36	; 0x24
    31ea:	8d a1       	ldd	r24, Y+37	; 0x25
    31ec:	9e a1       	ldd	r25, Y+38	; 0x26
    31ee:	20 e0       	ldi	r18, 0x00	; 0
    31f0:	3f ef       	ldi	r19, 0xFF	; 255
    31f2:	4f e7       	ldi	r20, 0x7F	; 127
    31f4:	57 e4       	ldi	r21, 0x47	; 71
    31f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31fa:	18 16       	cp	r1, r24
    31fc:	4c f5       	brge	.+82     	; 0x3250 <LCD_displayCharacter+0x610>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31fe:	6f a1       	ldd	r22, Y+39	; 0x27
    3200:	78 a5       	ldd	r23, Y+40	; 0x28
    3202:	89 a5       	ldd	r24, Y+41	; 0x29
    3204:	9a a5       	ldd	r25, Y+42	; 0x2a
    3206:	20 e0       	ldi	r18, 0x00	; 0
    3208:	30 e0       	ldi	r19, 0x00	; 0
    320a:	40 e2       	ldi	r20, 0x20	; 32
    320c:	51 e4       	ldi	r21, 0x41	; 65
    320e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3212:	dc 01       	movw	r26, r24
    3214:	cb 01       	movw	r24, r22
    3216:	bc 01       	movw	r22, r24
    3218:	cd 01       	movw	r24, r26
    321a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    321e:	dc 01       	movw	r26, r24
    3220:	cb 01       	movw	r24, r22
    3222:	9a a3       	std	Y+34, r25	; 0x22
    3224:	89 a3       	std	Y+33, r24	; 0x21
    3226:	0f c0       	rjmp	.+30     	; 0x3246 <LCD_displayCharacter+0x606>
    3228:	88 ec       	ldi	r24, 0xC8	; 200
    322a:	90 e0       	ldi	r25, 0x00	; 0
    322c:	98 a3       	std	Y+32, r25	; 0x20
    322e:	8f 8f       	std	Y+31, r24	; 0x1f
    3230:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3232:	98 a1       	ldd	r25, Y+32	; 0x20
    3234:	01 97       	sbiw	r24, 0x01	; 1
    3236:	f1 f7       	brne	.-4      	; 0x3234 <LCD_displayCharacter+0x5f4>
    3238:	98 a3       	std	Y+32, r25	; 0x20
    323a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    323c:	89 a1       	ldd	r24, Y+33	; 0x21
    323e:	9a a1       	ldd	r25, Y+34	; 0x22
    3240:	01 97       	sbiw	r24, 0x01	; 1
    3242:	9a a3       	std	Y+34, r25	; 0x22
    3244:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3246:	89 a1       	ldd	r24, Y+33	; 0x21
    3248:	9a a1       	ldd	r25, Y+34	; 0x22
    324a:	00 97       	sbiw	r24, 0x00	; 0
    324c:	69 f7       	brne	.-38     	; 0x3228 <LCD_displayCharacter+0x5e8>
    324e:	14 c0       	rjmp	.+40     	; 0x3278 <LCD_displayCharacter+0x638>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3250:	6b a1       	ldd	r22, Y+35	; 0x23
    3252:	7c a1       	ldd	r23, Y+36	; 0x24
    3254:	8d a1       	ldd	r24, Y+37	; 0x25
    3256:	9e a1       	ldd	r25, Y+38	; 0x26
    3258:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    325c:	dc 01       	movw	r26, r24
    325e:	cb 01       	movw	r24, r22
    3260:	9a a3       	std	Y+34, r25	; 0x22
    3262:	89 a3       	std	Y+33, r24	; 0x21
    3264:	89 a1       	ldd	r24, Y+33	; 0x21
    3266:	9a a1       	ldd	r25, Y+34	; 0x22
    3268:	9e 8f       	std	Y+30, r25	; 0x1e
    326a:	8d 8f       	std	Y+29, r24	; 0x1d
    326c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    326e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3270:	01 97       	sbiw	r24, 0x01	; 1
    3272:	f1 f7       	brne	.-4      	; 0x3270 <LCD_displayCharacter+0x630>
    3274:	9e 8f       	std	Y+30, r25	; 0x1e
    3276:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	/* out the first 4 bits of the required data to the data bus D4 --> D7 */
	lcd_port_value = GPIO_readPort(LCD_DATA_PORT_ID);
    3278:	80 e0       	ldi	r24, 0x00	; 0
    327a:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <GPIO_readPort>
    327e:	fe 01       	movw	r30, r28
    3280:	ed 59       	subi	r30, 0x9D	; 157
    3282:	ff 4f       	sbci	r31, 0xFF	; 255
    3284:	80 83       	st	Z, r24
#ifdef LCD_LAST_PORT_PINS
	lcd_port_value = (lcd_port_value & 0x0F) | ((data & 0x0F) << 4);
#else
	lcd_port_value = (lcd_port_value & 0xF0) | (data & 0x0F);
    3286:	fe 01       	movw	r30, r28
    3288:	ed 59       	subi	r30, 0x9D	; 157
    328a:	ff 4f       	sbci	r31, 0xFF	; 255
    328c:	80 81       	ld	r24, Z
    328e:	98 2f       	mov	r25, r24
    3290:	90 7f       	andi	r25, 0xF0	; 240
    3292:	fe 01       	movw	r30, r28
    3294:	ec 59       	subi	r30, 0x9C	; 156
    3296:	ff 4f       	sbci	r31, 0xFF	; 255
    3298:	80 81       	ld	r24, Z
    329a:	8f 70       	andi	r24, 0x0F	; 15
    329c:	89 2b       	or	r24, r25
    329e:	fe 01       	movw	r30, r28
    32a0:	ed 59       	subi	r30, 0x9D	; 157
    32a2:	ff 4f       	sbci	r31, 0xFF	; 255
    32a4:	80 83       	st	Z, r24
#endif
	GPIO_writePort(LCD_DATA_PORT_ID,lcd_port_value);
    32a6:	fe 01       	movw	r30, r28
    32a8:	ed 59       	subi	r30, 0x9D	; 157
    32aa:	ff 4f       	sbci	r31, 0xFF	; 255
    32ac:	80 e0       	ldi	r24, 0x00	; 0
    32ae:	60 81       	ld	r22, Z
    32b0:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <GPIO_writePort>
    32b4:	80 e0       	ldi	r24, 0x00	; 0
    32b6:	90 e0       	ldi	r25, 0x00	; 0
    32b8:	a0 e8       	ldi	r26, 0x80	; 128
    32ba:	bf e3       	ldi	r27, 0x3F	; 63
    32bc:	89 8f       	std	Y+25, r24	; 0x19
    32be:	9a 8f       	std	Y+26, r25	; 0x1a
    32c0:	ab 8f       	std	Y+27, r26	; 0x1b
    32c2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32c4:	69 8d       	ldd	r22, Y+25	; 0x19
    32c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32cc:	20 e0       	ldi	r18, 0x00	; 0
    32ce:	30 e0       	ldi	r19, 0x00	; 0
    32d0:	4a ef       	ldi	r20, 0xFA	; 250
    32d2:	54 e4       	ldi	r21, 0x44	; 68
    32d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32d8:	dc 01       	movw	r26, r24
    32da:	cb 01       	movw	r24, r22
    32dc:	8d 8b       	std	Y+21, r24	; 0x15
    32de:	9e 8b       	std	Y+22, r25	; 0x16
    32e0:	af 8b       	std	Y+23, r26	; 0x17
    32e2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    32e4:	6d 89       	ldd	r22, Y+21	; 0x15
    32e6:	7e 89       	ldd	r23, Y+22	; 0x16
    32e8:	8f 89       	ldd	r24, Y+23	; 0x17
    32ea:	98 8d       	ldd	r25, Y+24	; 0x18
    32ec:	20 e0       	ldi	r18, 0x00	; 0
    32ee:	30 e0       	ldi	r19, 0x00	; 0
    32f0:	40 e8       	ldi	r20, 0x80	; 128
    32f2:	5f e3       	ldi	r21, 0x3F	; 63
    32f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32f8:	88 23       	and	r24, r24
    32fa:	2c f4       	brge	.+10     	; 0x3306 <LCD_displayCharacter+0x6c6>
		__ticks = 1;
    32fc:	81 e0       	ldi	r24, 0x01	; 1
    32fe:	90 e0       	ldi	r25, 0x00	; 0
    3300:	9c 8b       	std	Y+20, r25	; 0x14
    3302:	8b 8b       	std	Y+19, r24	; 0x13
    3304:	3f c0       	rjmp	.+126    	; 0x3384 <LCD_displayCharacter+0x744>
	else if (__tmp > 65535)
    3306:	6d 89       	ldd	r22, Y+21	; 0x15
    3308:	7e 89       	ldd	r23, Y+22	; 0x16
    330a:	8f 89       	ldd	r24, Y+23	; 0x17
    330c:	98 8d       	ldd	r25, Y+24	; 0x18
    330e:	20 e0       	ldi	r18, 0x00	; 0
    3310:	3f ef       	ldi	r19, 0xFF	; 255
    3312:	4f e7       	ldi	r20, 0x7F	; 127
    3314:	57 e4       	ldi	r21, 0x47	; 71
    3316:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    331a:	18 16       	cp	r1, r24
    331c:	4c f5       	brge	.+82     	; 0x3370 <LCD_displayCharacter+0x730>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    331e:	69 8d       	ldd	r22, Y+25	; 0x19
    3320:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3322:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3324:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3326:	20 e0       	ldi	r18, 0x00	; 0
    3328:	30 e0       	ldi	r19, 0x00	; 0
    332a:	40 e2       	ldi	r20, 0x20	; 32
    332c:	51 e4       	ldi	r21, 0x41	; 65
    332e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3332:	dc 01       	movw	r26, r24
    3334:	cb 01       	movw	r24, r22
    3336:	bc 01       	movw	r22, r24
    3338:	cd 01       	movw	r24, r26
    333a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    333e:	dc 01       	movw	r26, r24
    3340:	cb 01       	movw	r24, r22
    3342:	9c 8b       	std	Y+20, r25	; 0x14
    3344:	8b 8b       	std	Y+19, r24	; 0x13
    3346:	0f c0       	rjmp	.+30     	; 0x3366 <LCD_displayCharacter+0x726>
    3348:	88 ec       	ldi	r24, 0xC8	; 200
    334a:	90 e0       	ldi	r25, 0x00	; 0
    334c:	9a 8b       	std	Y+18, r25	; 0x12
    334e:	89 8b       	std	Y+17, r24	; 0x11
    3350:	89 89       	ldd	r24, Y+17	; 0x11
    3352:	9a 89       	ldd	r25, Y+18	; 0x12
    3354:	01 97       	sbiw	r24, 0x01	; 1
    3356:	f1 f7       	brne	.-4      	; 0x3354 <LCD_displayCharacter+0x714>
    3358:	9a 8b       	std	Y+18, r25	; 0x12
    335a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    335c:	8b 89       	ldd	r24, Y+19	; 0x13
    335e:	9c 89       	ldd	r25, Y+20	; 0x14
    3360:	01 97       	sbiw	r24, 0x01	; 1
    3362:	9c 8b       	std	Y+20, r25	; 0x14
    3364:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3366:	8b 89       	ldd	r24, Y+19	; 0x13
    3368:	9c 89       	ldd	r25, Y+20	; 0x14
    336a:	00 97       	sbiw	r24, 0x00	; 0
    336c:	69 f7       	brne	.-38     	; 0x3348 <LCD_displayCharacter+0x708>
    336e:	14 c0       	rjmp	.+40     	; 0x3398 <LCD_displayCharacter+0x758>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3370:	6d 89       	ldd	r22, Y+21	; 0x15
    3372:	7e 89       	ldd	r23, Y+22	; 0x16
    3374:	8f 89       	ldd	r24, Y+23	; 0x17
    3376:	98 8d       	ldd	r25, Y+24	; 0x18
    3378:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    337c:	dc 01       	movw	r26, r24
    337e:	cb 01       	movw	r24, r22
    3380:	9c 8b       	std	Y+20, r25	; 0x14
    3382:	8b 8b       	std	Y+19, r24	; 0x13
    3384:	8b 89       	ldd	r24, Y+19	; 0x13
    3386:	9c 89       	ldd	r25, Y+20	; 0x14
    3388:	98 8b       	std	Y+16, r25	; 0x10
    338a:	8f 87       	std	Y+15, r24	; 0x0f
    338c:	8f 85       	ldd	r24, Y+15	; 0x0f
    338e:	98 89       	ldd	r25, Y+16	; 0x10
    3390:	01 97       	sbiw	r24, 0x01	; 1
    3392:	f1 f7       	brne	.-4      	; 0x3390 <LCD_displayCharacter+0x750>
    3394:	98 8b       	std	Y+16, r25	; 0x10
    3396:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    3398:	80 e0       	ldi	r24, 0x00	; 0
    339a:	67 e0       	ldi	r22, 0x07	; 7
    339c:	40 e0       	ldi	r20, 0x00	; 0
    339e:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <GPIO_writePin>
    33a2:	80 e0       	ldi	r24, 0x00	; 0
    33a4:	90 e0       	ldi	r25, 0x00	; 0
    33a6:	a0 e8       	ldi	r26, 0x80	; 128
    33a8:	bf e3       	ldi	r27, 0x3F	; 63
    33aa:	8b 87       	std	Y+11, r24	; 0x0b
    33ac:	9c 87       	std	Y+12, r25	; 0x0c
    33ae:	ad 87       	std	Y+13, r26	; 0x0d
    33b0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    33b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    33b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    33b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    33ba:	20 e0       	ldi	r18, 0x00	; 0
    33bc:	30 e0       	ldi	r19, 0x00	; 0
    33be:	4a ef       	ldi	r20, 0xFA	; 250
    33c0:	54 e4       	ldi	r21, 0x44	; 68
    33c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33c6:	dc 01       	movw	r26, r24
    33c8:	cb 01       	movw	r24, r22
    33ca:	8f 83       	std	Y+7, r24	; 0x07
    33cc:	98 87       	std	Y+8, r25	; 0x08
    33ce:	a9 87       	std	Y+9, r26	; 0x09
    33d0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33d2:	6f 81       	ldd	r22, Y+7	; 0x07
    33d4:	78 85       	ldd	r23, Y+8	; 0x08
    33d6:	89 85       	ldd	r24, Y+9	; 0x09
    33d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    33da:	20 e0       	ldi	r18, 0x00	; 0
    33dc:	30 e0       	ldi	r19, 0x00	; 0
    33de:	40 e8       	ldi	r20, 0x80	; 128
    33e0:	5f e3       	ldi	r21, 0x3F	; 63
    33e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33e6:	88 23       	and	r24, r24
    33e8:	2c f4       	brge	.+10     	; 0x33f4 <LCD_displayCharacter+0x7b4>
		__ticks = 1;
    33ea:	81 e0       	ldi	r24, 0x01	; 1
    33ec:	90 e0       	ldi	r25, 0x00	; 0
    33ee:	9e 83       	std	Y+6, r25	; 0x06
    33f0:	8d 83       	std	Y+5, r24	; 0x05
    33f2:	3f c0       	rjmp	.+126    	; 0x3472 <LCD_displayCharacter+0x832>
	else if (__tmp > 65535)
    33f4:	6f 81       	ldd	r22, Y+7	; 0x07
    33f6:	78 85       	ldd	r23, Y+8	; 0x08
    33f8:	89 85       	ldd	r24, Y+9	; 0x09
    33fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    33fc:	20 e0       	ldi	r18, 0x00	; 0
    33fe:	3f ef       	ldi	r19, 0xFF	; 255
    3400:	4f e7       	ldi	r20, 0x7F	; 127
    3402:	57 e4       	ldi	r21, 0x47	; 71
    3404:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3408:	18 16       	cp	r1, r24
    340a:	4c f5       	brge	.+82     	; 0x345e <LCD_displayCharacter+0x81e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    340c:	6b 85       	ldd	r22, Y+11	; 0x0b
    340e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3410:	8d 85       	ldd	r24, Y+13	; 0x0d
    3412:	9e 85       	ldd	r25, Y+14	; 0x0e
    3414:	20 e0       	ldi	r18, 0x00	; 0
    3416:	30 e0       	ldi	r19, 0x00	; 0
    3418:	40 e2       	ldi	r20, 0x20	; 32
    341a:	51 e4       	ldi	r21, 0x41	; 65
    341c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3420:	dc 01       	movw	r26, r24
    3422:	cb 01       	movw	r24, r22
    3424:	bc 01       	movw	r22, r24
    3426:	cd 01       	movw	r24, r26
    3428:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    342c:	dc 01       	movw	r26, r24
    342e:	cb 01       	movw	r24, r22
    3430:	9e 83       	std	Y+6, r25	; 0x06
    3432:	8d 83       	std	Y+5, r24	; 0x05
    3434:	0f c0       	rjmp	.+30     	; 0x3454 <LCD_displayCharacter+0x814>
    3436:	88 ec       	ldi	r24, 0xC8	; 200
    3438:	90 e0       	ldi	r25, 0x00	; 0
    343a:	9c 83       	std	Y+4, r25	; 0x04
    343c:	8b 83       	std	Y+3, r24	; 0x03
    343e:	8b 81       	ldd	r24, Y+3	; 0x03
    3440:	9c 81       	ldd	r25, Y+4	; 0x04
    3442:	01 97       	sbiw	r24, 0x01	; 1
    3444:	f1 f7       	brne	.-4      	; 0x3442 <LCD_displayCharacter+0x802>
    3446:	9c 83       	std	Y+4, r25	; 0x04
    3448:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    344a:	8d 81       	ldd	r24, Y+5	; 0x05
    344c:	9e 81       	ldd	r25, Y+6	; 0x06
    344e:	01 97       	sbiw	r24, 0x01	; 1
    3450:	9e 83       	std	Y+6, r25	; 0x06
    3452:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3454:	8d 81       	ldd	r24, Y+5	; 0x05
    3456:	9e 81       	ldd	r25, Y+6	; 0x06
    3458:	00 97       	sbiw	r24, 0x00	; 0
    345a:	69 f7       	brne	.-38     	; 0x3436 <LCD_displayCharacter+0x7f6>
    345c:	14 c0       	rjmp	.+40     	; 0x3486 <LCD_displayCharacter+0x846>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    345e:	6f 81       	ldd	r22, Y+7	; 0x07
    3460:	78 85       	ldd	r23, Y+8	; 0x08
    3462:	89 85       	ldd	r24, Y+9	; 0x09
    3464:	9a 85       	ldd	r25, Y+10	; 0x0a
    3466:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    346a:	dc 01       	movw	r26, r24
    346c:	cb 01       	movw	r24, r22
    346e:	9e 83       	std	Y+6, r25	; 0x06
    3470:	8d 83       	std	Y+5, r24	; 0x05
    3472:	8d 81       	ldd	r24, Y+5	; 0x05
    3474:	9e 81       	ldd	r25, Y+6	; 0x06
    3476:	9a 83       	std	Y+2, r25	; 0x02
    3478:	89 83       	std	Y+1, r24	; 0x01
    347a:	89 81       	ldd	r24, Y+1	; 0x01
    347c:	9a 81       	ldd	r25, Y+2	; 0x02
    347e:	01 97       	sbiw	r24, 0x01	; 1
    3480:	f1 f7       	brne	.-4      	; 0x347e <LCD_displayCharacter+0x83e>
    3482:	9a 83       	std	Y+2, r25	; 0x02
    3484:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required data to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    3486:	cc 59       	subi	r28, 0x9C	; 156
    3488:	df 4f       	sbci	r29, 0xFF	; 255
    348a:	0f b6       	in	r0, 0x3f	; 63
    348c:	f8 94       	cli
    348e:	de bf       	out	0x3e, r29	; 62
    3490:	0f be       	out	0x3f, r0	; 63
    3492:	cd bf       	out	0x3d, r28	; 61
    3494:	cf 91       	pop	r28
    3496:	df 91       	pop	r29
    3498:	1f 91       	pop	r17
    349a:	0f 91       	pop	r16
    349c:	08 95       	ret

0000349e <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    349e:	df 93       	push	r29
    34a0:	cf 93       	push	r28
    34a2:	00 d0       	rcall	.+0      	; 0x34a4 <LCD_displayString+0x6>
    34a4:	0f 92       	push	r0
    34a6:	cd b7       	in	r28, 0x3d	; 61
    34a8:	de b7       	in	r29, 0x3e	; 62
    34aa:	9b 83       	std	Y+3, r25	; 0x03
    34ac:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    34ae:	19 82       	std	Y+1, r1	; 0x01
    34b0:	0e c0       	rjmp	.+28     	; 0x34ce <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    34b2:	89 81       	ldd	r24, Y+1	; 0x01
    34b4:	28 2f       	mov	r18, r24
    34b6:	30 e0       	ldi	r19, 0x00	; 0
    34b8:	8a 81       	ldd	r24, Y+2	; 0x02
    34ba:	9b 81       	ldd	r25, Y+3	; 0x03
    34bc:	fc 01       	movw	r30, r24
    34be:	e2 0f       	add	r30, r18
    34c0:	f3 1f       	adc	r31, r19
    34c2:	80 81       	ld	r24, Z
    34c4:	0e 94 20 16 	call	0x2c40	; 0x2c40 <LCD_displayCharacter>
		i++;
    34c8:	89 81       	ldd	r24, Y+1	; 0x01
    34ca:	8f 5f       	subi	r24, 0xFF	; 255
    34cc:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    34ce:	89 81       	ldd	r24, Y+1	; 0x01
    34d0:	28 2f       	mov	r18, r24
    34d2:	30 e0       	ldi	r19, 0x00	; 0
    34d4:	8a 81       	ldd	r24, Y+2	; 0x02
    34d6:	9b 81       	ldd	r25, Y+3	; 0x03
    34d8:	fc 01       	movw	r30, r24
    34da:	e2 0f       	add	r30, r18
    34dc:	f3 1f       	adc	r31, r19
    34de:	80 81       	ld	r24, Z
    34e0:	88 23       	and	r24, r24
    34e2:	39 f7       	brne	.-50     	; 0x34b2 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	 *********************************************************/
}
    34e4:	0f 90       	pop	r0
    34e6:	0f 90       	pop	r0
    34e8:	0f 90       	pop	r0
    34ea:	cf 91       	pop	r28
    34ec:	df 91       	pop	r29
    34ee:	08 95       	ret

000034f0 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    34f0:	df 93       	push	r29
    34f2:	cf 93       	push	r28
    34f4:	00 d0       	rcall	.+0      	; 0x34f6 <LCD_moveCursor+0x6>
    34f6:	00 d0       	rcall	.+0      	; 0x34f8 <LCD_moveCursor+0x8>
    34f8:	0f 92       	push	r0
    34fa:	cd b7       	in	r28, 0x3d	; 61
    34fc:	de b7       	in	r29, 0x3e	; 62
    34fe:	8a 83       	std	Y+2, r24	; 0x02
    3500:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    3502:	8a 81       	ldd	r24, Y+2	; 0x02
    3504:	28 2f       	mov	r18, r24
    3506:	30 e0       	ldi	r19, 0x00	; 0
    3508:	3d 83       	std	Y+5, r19	; 0x05
    350a:	2c 83       	std	Y+4, r18	; 0x04
    350c:	8c 81       	ldd	r24, Y+4	; 0x04
    350e:	9d 81       	ldd	r25, Y+5	; 0x05
    3510:	81 30       	cpi	r24, 0x01	; 1
    3512:	91 05       	cpc	r25, r1
    3514:	c1 f0       	breq	.+48     	; 0x3546 <LCD_moveCursor+0x56>
    3516:	2c 81       	ldd	r18, Y+4	; 0x04
    3518:	3d 81       	ldd	r19, Y+5	; 0x05
    351a:	22 30       	cpi	r18, 0x02	; 2
    351c:	31 05       	cpc	r19, r1
    351e:	2c f4       	brge	.+10     	; 0x352a <LCD_moveCursor+0x3a>
    3520:	8c 81       	ldd	r24, Y+4	; 0x04
    3522:	9d 81       	ldd	r25, Y+5	; 0x05
    3524:	00 97       	sbiw	r24, 0x00	; 0
    3526:	61 f0       	breq	.+24     	; 0x3540 <LCD_moveCursor+0x50>
    3528:	19 c0       	rjmp	.+50     	; 0x355c <LCD_moveCursor+0x6c>
    352a:	2c 81       	ldd	r18, Y+4	; 0x04
    352c:	3d 81       	ldd	r19, Y+5	; 0x05
    352e:	22 30       	cpi	r18, 0x02	; 2
    3530:	31 05       	cpc	r19, r1
    3532:	69 f0       	breq	.+26     	; 0x354e <LCD_moveCursor+0x5e>
    3534:	8c 81       	ldd	r24, Y+4	; 0x04
    3536:	9d 81       	ldd	r25, Y+5	; 0x05
    3538:	83 30       	cpi	r24, 0x03	; 3
    353a:	91 05       	cpc	r25, r1
    353c:	61 f0       	breq	.+24     	; 0x3556 <LCD_moveCursor+0x66>
    353e:	0e c0       	rjmp	.+28     	; 0x355c <LCD_moveCursor+0x6c>
	{
	case 0:
		lcd_memory_address=col;
    3540:	8b 81       	ldd	r24, Y+3	; 0x03
    3542:	89 83       	std	Y+1, r24	; 0x01
    3544:	0b c0       	rjmp	.+22     	; 0x355c <LCD_moveCursor+0x6c>
		break;
	case 1:
		lcd_memory_address=col+0x40;
    3546:	8b 81       	ldd	r24, Y+3	; 0x03
    3548:	80 5c       	subi	r24, 0xC0	; 192
    354a:	89 83       	std	Y+1, r24	; 0x01
    354c:	07 c0       	rjmp	.+14     	; 0x355c <LCD_moveCursor+0x6c>
		break;
	case 2:
		lcd_memory_address=col+0x10;
    354e:	8b 81       	ldd	r24, Y+3	; 0x03
    3550:	80 5f       	subi	r24, 0xF0	; 240
    3552:	89 83       	std	Y+1, r24	; 0x01
    3554:	03 c0       	rjmp	.+6      	; 0x355c <LCD_moveCursor+0x6c>
		break;
	case 3:
		lcd_memory_address=col+0x50;
    3556:	8b 81       	ldd	r24, Y+3	; 0x03
    3558:	80 5b       	subi	r24, 0xB0	; 176
    355a:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    355c:	89 81       	ldd	r24, Y+1	; 0x01
    355e:	80 68       	ori	r24, 0x80	; 128
    3560:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <LCD_sendCommand>
}
    3564:	0f 90       	pop	r0
    3566:	0f 90       	pop	r0
    3568:	0f 90       	pop	r0
    356a:	0f 90       	pop	r0
    356c:	0f 90       	pop	r0
    356e:	cf 91       	pop	r28
    3570:	df 91       	pop	r29
    3572:	08 95       	ret

00003574 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    3574:	df 93       	push	r29
    3576:	cf 93       	push	r28
    3578:	00 d0       	rcall	.+0      	; 0x357a <LCD_displayStringRowColumn+0x6>
    357a:	00 d0       	rcall	.+0      	; 0x357c <LCD_displayStringRowColumn+0x8>
    357c:	cd b7       	in	r28, 0x3d	; 61
    357e:	de b7       	in	r29, 0x3e	; 62
    3580:	89 83       	std	Y+1, r24	; 0x01
    3582:	6a 83       	std	Y+2, r22	; 0x02
    3584:	5c 83       	std	Y+4, r21	; 0x04
    3586:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    3588:	89 81       	ldd	r24, Y+1	; 0x01
    358a:	6a 81       	ldd	r22, Y+2	; 0x02
    358c:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    3590:	8b 81       	ldd	r24, Y+3	; 0x03
    3592:	9c 81       	ldd	r25, Y+4	; 0x04
    3594:	0e 94 4f 1a 	call	0x349e	; 0x349e <LCD_displayString>
}
    3598:	0f 90       	pop	r0
    359a:	0f 90       	pop	r0
    359c:	0f 90       	pop	r0
    359e:	0f 90       	pop	r0
    35a0:	cf 91       	pop	r28
    35a2:	df 91       	pop	r29
    35a4:	08 95       	ret

000035a6 <LCD_intgerToString>:
 * Description :
 * Display the required decimal value on the screen
 */

void LCD_intgerToString(int data)
{
    35a6:	df 93       	push	r29
    35a8:	cf 93       	push	r28
    35aa:	00 d0       	rcall	.+0      	; 0x35ac <LCD_intgerToString+0x6>
    35ac:	00 d0       	rcall	.+0      	; 0x35ae <LCD_intgerToString+0x8>
    35ae:	cd b7       	in	r28, 0x3d	; 61
    35b0:	de b7       	in	r29, 0x3e	; 62
    35b2:	9a 83       	std	Y+2, r25	; 0x02
    35b4:	89 83       	std	Y+1, r24	; 0x01

	//char buff[16];  /*String to hold the ascii result*/
	switch(data){
    35b6:	89 81       	ldd	r24, Y+1	; 0x01
    35b8:	9a 81       	ldd	r25, Y+2	; 0x02
    35ba:	9c 83       	std	Y+4, r25	; 0x04
    35bc:	8b 83       	std	Y+3, r24	; 0x03
    35be:	8b 81       	ldd	r24, Y+3	; 0x03
    35c0:	9c 81       	ldd	r25, Y+4	; 0x04
    35c2:	81 30       	cpi	r24, 0x01	; 1
    35c4:	91 05       	cpc	r25, r1
    35c6:	31 f0       	breq	.+12     	; 0x35d4 <LCD_intgerToString+0x2e>
    35c8:	8b 81       	ldd	r24, Y+3	; 0x03
    35ca:	9c 81       	ldd	r25, Y+4	; 0x04
    35cc:	82 30       	cpi	r24, 0x02	; 2
    35ce:	91 05       	cpc	r25, r1
    35d0:	31 f0       	breq	.+12     	; 0x35de <LCD_intgerToString+0x38>
    35d2:	09 c0       	rjmp	.+18     	; 0x35e6 <LCD_intgerToString+0x40>
	case 1:
		LCD_displayString("1");
    35d4:	80 e6       	ldi	r24, 0x60	; 96
    35d6:	90 e0       	ldi	r25, 0x00	; 0
    35d8:	0e 94 4f 1a 	call	0x349e	; 0x349e <LCD_displayString>
    35dc:	04 c0       	rjmp	.+8      	; 0x35e6 <LCD_intgerToString+0x40>
		break;
	case 2:
		LCD_displayString("2");
    35de:	82 e6       	ldi	r24, 0x62	; 98
    35e0:	90 e0       	ldi	r25, 0x00	; 0
    35e2:	0e 94 4f 1a 	call	0x349e	; 0x349e <LCD_displayString>


	}
	//itoa(data,buff,10);  /*Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal*/
	//LCD_displayString(buff);  /*Display the string*/
}
    35e6:	0f 90       	pop	r0
    35e8:	0f 90       	pop	r0
    35ea:	0f 90       	pop	r0
    35ec:	0f 90       	pop	r0
    35ee:	cf 91       	pop	r28
    35f0:	df 91       	pop	r29
    35f2:	08 95       	ret

000035f4 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    35f4:	df 93       	push	r29
    35f6:	cf 93       	push	r28
    35f8:	cd b7       	in	r28, 0x3d	; 61
    35fa:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    35fc:	81 e0       	ldi	r24, 0x01	; 1
    35fe:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <LCD_sendCommand>
}
    3602:	cf 91       	pop	r28
    3604:	df 91       	pop	r29
    3606:	08 95       	ret

00003608 <LCD_writeCmd>:



void LCD_writeCmd(uint8 data)
{
    3608:	0f 93       	push	r16
    360a:	1f 93       	push	r17
    360c:	df 93       	push	r29
    360e:	cf 93       	push	r28
    3610:	cd b7       	in	r28, 0x3d	; 61
    3612:	de b7       	in	r29, 0x3e	; 62
    3614:	c9 54       	subi	r28, 0x49	; 73
    3616:	d0 40       	sbci	r29, 0x00	; 0
    3618:	0f b6       	in	r0, 0x3f	; 63
    361a:	f8 94       	cli
    361c:	de bf       	out	0x3e, r29	; 62
    361e:	0f be       	out	0x3f, r0	; 63
    3620:	cd bf       	out	0x3d, r28	; 61
    3622:	fe 01       	movw	r30, r28
    3624:	e7 5b       	subi	r30, 0xB7	; 183
    3626:	ff 4f       	sbci	r31, 0xFF	; 255
    3628:	80 83       	st	Z, r24
	/* write data to data register */
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,logic_low);
    362a:	80 e0       	ldi	r24, 0x00	; 0
    362c:	65 e0       	ldi	r22, 0x05	; 5
    362e:	40 e0       	ldi	r20, 0x00	; 0
    3630:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <GPIO_writePin>

	/*enter write mode*/
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,logic_low);
    3634:	80 e0       	ldi	r24, 0x00	; 0
    3636:	66 e0       	ldi	r22, 0x06	; 6
    3638:	40 e0       	ldi	r20, 0x00	; 0
    363a:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <GPIO_writePin>
	Dio_WriteChannel(LCD_PIN_D6,GET_BIT(u8Cmd,6));
	Dio_WriteChannel(LCD_PIN_D7,GET_BIT(u8Cmd,7));

#elif LCD_DATA_BITS_MODE == 4

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_FIRST_DATA_PIN_ID,(data>>4)& 0x01);
    363e:	fe 01       	movw	r30, r28
    3640:	e7 5b       	subi	r30, 0xB7	; 183
    3642:	ff 4f       	sbci	r31, 0xFF	; 255
    3644:	80 81       	ld	r24, Z
    3646:	82 95       	swap	r24
    3648:	8f 70       	andi	r24, 0x0F	; 15
    364a:	98 2f       	mov	r25, r24
    364c:	91 70       	andi	r25, 0x01	; 1
    364e:	80 e0       	ldi	r24, 0x00	; 0
    3650:	60 e0       	ldi	r22, 0x00	; 0
    3652:	49 2f       	mov	r20, r25
    3654:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_FIRST_DATA_PIN_ID+1,(data>>5)& 0x01);
    3658:	fe 01       	movw	r30, r28
    365a:	e7 5b       	subi	r30, 0xB7	; 183
    365c:	ff 4f       	sbci	r31, 0xFF	; 255
    365e:	80 81       	ld	r24, Z
    3660:	82 95       	swap	r24
    3662:	86 95       	lsr	r24
    3664:	87 70       	andi	r24, 0x07	; 7
    3666:	98 2f       	mov	r25, r24
    3668:	91 70       	andi	r25, 0x01	; 1
    366a:	80 e0       	ldi	r24, 0x00	; 0
    366c:	61 e0       	ldi	r22, 0x01	; 1
    366e:	49 2f       	mov	r20, r25
    3670:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_FIRST_DATA_PIN_ID+2,(data>>6)& 0x01);
    3674:	fe 01       	movw	r30, r28
    3676:	e7 5b       	subi	r30, 0xB7	; 183
    3678:	ff 4f       	sbci	r31, 0xFF	; 255
    367a:	80 81       	ld	r24, Z
    367c:	82 95       	swap	r24
    367e:	86 95       	lsr	r24
    3680:	86 95       	lsr	r24
    3682:	83 70       	andi	r24, 0x03	; 3
    3684:	98 2f       	mov	r25, r24
    3686:	91 70       	andi	r25, 0x01	; 1
    3688:	80 e0       	ldi	r24, 0x00	; 0
    368a:	62 e0       	ldi	r22, 0x02	; 2
    368c:	49 2f       	mov	r20, r25
    368e:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_FIRST_DATA_PIN_ID+3,(data>>7)& 0x01);
    3692:	fe 01       	movw	r30, r28
    3694:	e7 5b       	subi	r30, 0xB7	; 183
    3696:	ff 4f       	sbci	r31, 0xFF	; 255
    3698:	80 81       	ld	r24, Z
    369a:	98 2f       	mov	r25, r24
    369c:	99 1f       	adc	r25, r25
    369e:	99 27       	eor	r25, r25
    36a0:	99 1f       	adc	r25, r25
    36a2:	80 e0       	ldi	r24, 0x00	; 0
    36a4:	63 e0       	ldi	r22, 0x03	; 3
    36a6:	49 2f       	mov	r20, r25
    36a8:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <GPIO_writePin>

	/*enable latch*/
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,logic_high);
    36ac:	80 e0       	ldi	r24, 0x00	; 0
    36ae:	67 e0       	ldi	r22, 0x07	; 7
    36b0:	41 e0       	ldi	r20, 0x01	; 1
    36b2:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <GPIO_writePin>
    36b6:	fe 01       	movw	r30, r28
    36b8:	eb 5b       	subi	r30, 0xBB	; 187
    36ba:	ff 4f       	sbci	r31, 0xFF	; 255
    36bc:	86 e6       	ldi	r24, 0x66	; 102
    36be:	96 e6       	ldi	r25, 0x66	; 102
    36c0:	a6 ee       	ldi	r26, 0xE6	; 230
    36c2:	be e3       	ldi	r27, 0x3E	; 62
    36c4:	80 83       	st	Z, r24
    36c6:	91 83       	std	Z+1, r25	; 0x01
    36c8:	a2 83       	std	Z+2, r26	; 0x02
    36ca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    36cc:	8e 01       	movw	r16, r28
    36ce:	0f 5b       	subi	r16, 0xBF	; 191
    36d0:	1f 4f       	sbci	r17, 0xFF	; 255
    36d2:	fe 01       	movw	r30, r28
    36d4:	eb 5b       	subi	r30, 0xBB	; 187
    36d6:	ff 4f       	sbci	r31, 0xFF	; 255
    36d8:	60 81       	ld	r22, Z
    36da:	71 81       	ldd	r23, Z+1	; 0x01
    36dc:	82 81       	ldd	r24, Z+2	; 0x02
    36de:	93 81       	ldd	r25, Z+3	; 0x03
    36e0:	2b ea       	ldi	r18, 0xAB	; 171
    36e2:	3a ea       	ldi	r19, 0xAA	; 170
    36e4:	4a e2       	ldi	r20, 0x2A	; 42
    36e6:	50 e4       	ldi	r21, 0x40	; 64
    36e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36ec:	dc 01       	movw	r26, r24
    36ee:	cb 01       	movw	r24, r22
    36f0:	f8 01       	movw	r30, r16
    36f2:	80 83       	st	Z, r24
    36f4:	91 83       	std	Z+1, r25	; 0x01
    36f6:	a2 83       	std	Z+2, r26	; 0x02
    36f8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    36fa:	fe 01       	movw	r30, r28
    36fc:	ef 5b       	subi	r30, 0xBF	; 191
    36fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3700:	60 81       	ld	r22, Z
    3702:	71 81       	ldd	r23, Z+1	; 0x01
    3704:	82 81       	ldd	r24, Z+2	; 0x02
    3706:	93 81       	ldd	r25, Z+3	; 0x03
    3708:	20 e0       	ldi	r18, 0x00	; 0
    370a:	30 e0       	ldi	r19, 0x00	; 0
    370c:	40 e8       	ldi	r20, 0x80	; 128
    370e:	5f e3       	ldi	r21, 0x3F	; 63
    3710:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3714:	88 23       	and	r24, r24
    3716:	34 f4       	brge	.+12     	; 0x3724 <LCD_writeCmd+0x11c>
		__ticks = 1;
    3718:	81 e0       	ldi	r24, 0x01	; 1
    371a:	fe 01       	movw	r30, r28
    371c:	e0 5c       	subi	r30, 0xC0	; 192
    371e:	ff 4f       	sbci	r31, 0xFF	; 255
    3720:	80 83       	st	Z, r24
    3722:	9d c0       	rjmp	.+314    	; 0x385e <LCD_writeCmd+0x256>
	else if (__tmp > 255)
    3724:	fe 01       	movw	r30, r28
    3726:	ef 5b       	subi	r30, 0xBF	; 191
    3728:	ff 4f       	sbci	r31, 0xFF	; 255
    372a:	60 81       	ld	r22, Z
    372c:	71 81       	ldd	r23, Z+1	; 0x01
    372e:	82 81       	ldd	r24, Z+2	; 0x02
    3730:	93 81       	ldd	r25, Z+3	; 0x03
    3732:	20 e0       	ldi	r18, 0x00	; 0
    3734:	30 e0       	ldi	r19, 0x00	; 0
    3736:	4f e7       	ldi	r20, 0x7F	; 127
    3738:	53 e4       	ldi	r21, 0x43	; 67
    373a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    373e:	18 16       	cp	r1, r24
    3740:	0c f0       	brlt	.+2      	; 0x3744 <LCD_writeCmd+0x13c>
    3742:	7e c0       	rjmp	.+252    	; 0x3840 <LCD_writeCmd+0x238>
	{
		_delay_ms(__us / 1000.0);
    3744:	fe 01       	movw	r30, r28
    3746:	eb 5b       	subi	r30, 0xBB	; 187
    3748:	ff 4f       	sbci	r31, 0xFF	; 255
    374a:	60 81       	ld	r22, Z
    374c:	71 81       	ldd	r23, Z+1	; 0x01
    374e:	82 81       	ldd	r24, Z+2	; 0x02
    3750:	93 81       	ldd	r25, Z+3	; 0x03
    3752:	20 e0       	ldi	r18, 0x00	; 0
    3754:	30 e0       	ldi	r19, 0x00	; 0
    3756:	4a e7       	ldi	r20, 0x7A	; 122
    3758:	54 e4       	ldi	r21, 0x44	; 68
    375a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    375e:	dc 01       	movw	r26, r24
    3760:	cb 01       	movw	r24, r22
    3762:	8c af       	std	Y+60, r24	; 0x3c
    3764:	9d af       	std	Y+61, r25	; 0x3d
    3766:	ae af       	std	Y+62, r26	; 0x3e
    3768:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    376a:	6c ad       	ldd	r22, Y+60	; 0x3c
    376c:	7d ad       	ldd	r23, Y+61	; 0x3d
    376e:	8e ad       	ldd	r24, Y+62	; 0x3e
    3770:	9f ad       	ldd	r25, Y+63	; 0x3f
    3772:	20 e0       	ldi	r18, 0x00	; 0
    3774:	30 e0       	ldi	r19, 0x00	; 0
    3776:	4a ef       	ldi	r20, 0xFA	; 250
    3778:	54 e4       	ldi	r21, 0x44	; 68
    377a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    377e:	dc 01       	movw	r26, r24
    3780:	cb 01       	movw	r24, r22
    3782:	88 af       	std	Y+56, r24	; 0x38
    3784:	99 af       	std	Y+57, r25	; 0x39
    3786:	aa af       	std	Y+58, r26	; 0x3a
    3788:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    378a:	68 ad       	ldd	r22, Y+56	; 0x38
    378c:	79 ad       	ldd	r23, Y+57	; 0x39
    378e:	8a ad       	ldd	r24, Y+58	; 0x3a
    3790:	9b ad       	ldd	r25, Y+59	; 0x3b
    3792:	20 e0       	ldi	r18, 0x00	; 0
    3794:	30 e0       	ldi	r19, 0x00	; 0
    3796:	40 e8       	ldi	r20, 0x80	; 128
    3798:	5f e3       	ldi	r21, 0x3F	; 63
    379a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    379e:	88 23       	and	r24, r24
    37a0:	2c f4       	brge	.+10     	; 0x37ac <LCD_writeCmd+0x1a4>
		__ticks = 1;
    37a2:	81 e0       	ldi	r24, 0x01	; 1
    37a4:	90 e0       	ldi	r25, 0x00	; 0
    37a6:	9f ab       	std	Y+55, r25	; 0x37
    37a8:	8e ab       	std	Y+54, r24	; 0x36
    37aa:	3f c0       	rjmp	.+126    	; 0x382a <LCD_writeCmd+0x222>
	else if (__tmp > 65535)
    37ac:	68 ad       	ldd	r22, Y+56	; 0x38
    37ae:	79 ad       	ldd	r23, Y+57	; 0x39
    37b0:	8a ad       	ldd	r24, Y+58	; 0x3a
    37b2:	9b ad       	ldd	r25, Y+59	; 0x3b
    37b4:	20 e0       	ldi	r18, 0x00	; 0
    37b6:	3f ef       	ldi	r19, 0xFF	; 255
    37b8:	4f e7       	ldi	r20, 0x7F	; 127
    37ba:	57 e4       	ldi	r21, 0x47	; 71
    37bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    37c0:	18 16       	cp	r1, r24
    37c2:	4c f5       	brge	.+82     	; 0x3816 <LCD_writeCmd+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37c4:	6c ad       	ldd	r22, Y+60	; 0x3c
    37c6:	7d ad       	ldd	r23, Y+61	; 0x3d
    37c8:	8e ad       	ldd	r24, Y+62	; 0x3e
    37ca:	9f ad       	ldd	r25, Y+63	; 0x3f
    37cc:	20 e0       	ldi	r18, 0x00	; 0
    37ce:	30 e0       	ldi	r19, 0x00	; 0
    37d0:	40 e2       	ldi	r20, 0x20	; 32
    37d2:	51 e4       	ldi	r21, 0x41	; 65
    37d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37d8:	dc 01       	movw	r26, r24
    37da:	cb 01       	movw	r24, r22
    37dc:	bc 01       	movw	r22, r24
    37de:	cd 01       	movw	r24, r26
    37e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37e4:	dc 01       	movw	r26, r24
    37e6:	cb 01       	movw	r24, r22
    37e8:	9f ab       	std	Y+55, r25	; 0x37
    37ea:	8e ab       	std	Y+54, r24	; 0x36
    37ec:	0f c0       	rjmp	.+30     	; 0x380c <LCD_writeCmd+0x204>
    37ee:	88 ec       	ldi	r24, 0xC8	; 200
    37f0:	90 e0       	ldi	r25, 0x00	; 0
    37f2:	9d ab       	std	Y+53, r25	; 0x35
    37f4:	8c ab       	std	Y+52, r24	; 0x34
    37f6:	8c a9       	ldd	r24, Y+52	; 0x34
    37f8:	9d a9       	ldd	r25, Y+53	; 0x35
    37fa:	01 97       	sbiw	r24, 0x01	; 1
    37fc:	f1 f7       	brne	.-4      	; 0x37fa <LCD_writeCmd+0x1f2>
    37fe:	9d ab       	std	Y+53, r25	; 0x35
    3800:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3802:	8e a9       	ldd	r24, Y+54	; 0x36
    3804:	9f a9       	ldd	r25, Y+55	; 0x37
    3806:	01 97       	sbiw	r24, 0x01	; 1
    3808:	9f ab       	std	Y+55, r25	; 0x37
    380a:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    380c:	8e a9       	ldd	r24, Y+54	; 0x36
    380e:	9f a9       	ldd	r25, Y+55	; 0x37
    3810:	00 97       	sbiw	r24, 0x00	; 0
    3812:	69 f7       	brne	.-38     	; 0x37ee <LCD_writeCmd+0x1e6>
    3814:	2d c0       	rjmp	.+90     	; 0x3870 <LCD_writeCmd+0x268>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3816:	68 ad       	ldd	r22, Y+56	; 0x38
    3818:	79 ad       	ldd	r23, Y+57	; 0x39
    381a:	8a ad       	ldd	r24, Y+58	; 0x3a
    381c:	9b ad       	ldd	r25, Y+59	; 0x3b
    381e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3822:	dc 01       	movw	r26, r24
    3824:	cb 01       	movw	r24, r22
    3826:	9f ab       	std	Y+55, r25	; 0x37
    3828:	8e ab       	std	Y+54, r24	; 0x36
    382a:	8e a9       	ldd	r24, Y+54	; 0x36
    382c:	9f a9       	ldd	r25, Y+55	; 0x37
    382e:	9b ab       	std	Y+51, r25	; 0x33
    3830:	8a ab       	std	Y+50, r24	; 0x32
    3832:	8a a9       	ldd	r24, Y+50	; 0x32
    3834:	9b a9       	ldd	r25, Y+51	; 0x33
    3836:	01 97       	sbiw	r24, 0x01	; 1
    3838:	f1 f7       	brne	.-4      	; 0x3836 <LCD_writeCmd+0x22e>
    383a:	9b ab       	std	Y+51, r25	; 0x33
    383c:	8a ab       	std	Y+50, r24	; 0x32
    383e:	18 c0       	rjmp	.+48     	; 0x3870 <LCD_writeCmd+0x268>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3840:	fe 01       	movw	r30, r28
    3842:	ef 5b       	subi	r30, 0xBF	; 191
    3844:	ff 4f       	sbci	r31, 0xFF	; 255
    3846:	60 81       	ld	r22, Z
    3848:	71 81       	ldd	r23, Z+1	; 0x01
    384a:	82 81       	ldd	r24, Z+2	; 0x02
    384c:	93 81       	ldd	r25, Z+3	; 0x03
    384e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3852:	dc 01       	movw	r26, r24
    3854:	cb 01       	movw	r24, r22
    3856:	fe 01       	movw	r30, r28
    3858:	e0 5c       	subi	r30, 0xC0	; 192
    385a:	ff 4f       	sbci	r31, 0xFF	; 255
    385c:	80 83       	st	Z, r24
    385e:	fe 01       	movw	r30, r28
    3860:	e0 5c       	subi	r30, 0xC0	; 192
    3862:	ff 4f       	sbci	r31, 0xFF	; 255
    3864:	80 81       	ld	r24, Z
    3866:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3868:	89 a9       	ldd	r24, Y+49	; 0x31
    386a:	8a 95       	dec	r24
    386c:	f1 f7       	brne	.-4      	; 0x386a <LCD_writeCmd+0x262>
    386e:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(0.450);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,logic_low);
    3870:	80 e0       	ldi	r24, 0x00	; 0
    3872:	67 e0       	ldi	r22, 0x07	; 7
    3874:	40 e0       	ldi	r20, 0x00	; 0
    3876:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <GPIO_writePin>

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_FIRST_DATA_PIN_ID,(data>>4)& 0x01);
    387a:	fe 01       	movw	r30, r28
    387c:	e7 5b       	subi	r30, 0xB7	; 183
    387e:	ff 4f       	sbci	r31, 0xFF	; 255
    3880:	80 81       	ld	r24, Z
    3882:	82 95       	swap	r24
    3884:	8f 70       	andi	r24, 0x0F	; 15
    3886:	98 2f       	mov	r25, r24
    3888:	91 70       	andi	r25, 0x01	; 1
    388a:	80 e0       	ldi	r24, 0x00	; 0
    388c:	60 e0       	ldi	r22, 0x00	; 0
    388e:	49 2f       	mov	r20, r25
    3890:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_FIRST_DATA_PIN_ID+1,(data>>5)& 0x01);
    3894:	fe 01       	movw	r30, r28
    3896:	e7 5b       	subi	r30, 0xB7	; 183
    3898:	ff 4f       	sbci	r31, 0xFF	; 255
    389a:	80 81       	ld	r24, Z
    389c:	82 95       	swap	r24
    389e:	86 95       	lsr	r24
    38a0:	87 70       	andi	r24, 0x07	; 7
    38a2:	98 2f       	mov	r25, r24
    38a4:	91 70       	andi	r25, 0x01	; 1
    38a6:	80 e0       	ldi	r24, 0x00	; 0
    38a8:	61 e0       	ldi	r22, 0x01	; 1
    38aa:	49 2f       	mov	r20, r25
    38ac:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_FIRST_DATA_PIN_ID+2,(data>>6)& 0x01);
    38b0:	fe 01       	movw	r30, r28
    38b2:	e7 5b       	subi	r30, 0xB7	; 183
    38b4:	ff 4f       	sbci	r31, 0xFF	; 255
    38b6:	80 81       	ld	r24, Z
    38b8:	82 95       	swap	r24
    38ba:	86 95       	lsr	r24
    38bc:	86 95       	lsr	r24
    38be:	83 70       	andi	r24, 0x03	; 3
    38c0:	98 2f       	mov	r25, r24
    38c2:	91 70       	andi	r25, 0x01	; 1
    38c4:	80 e0       	ldi	r24, 0x00	; 0
    38c6:	62 e0       	ldi	r22, 0x02	; 2
    38c8:	49 2f       	mov	r20, r25
    38ca:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_FIRST_DATA_PIN_ID+3,(data>>7)& 0x01);
    38ce:	fe 01       	movw	r30, r28
    38d0:	e7 5b       	subi	r30, 0xB7	; 183
    38d2:	ff 4f       	sbci	r31, 0xFF	; 255
    38d4:	80 81       	ld	r24, Z
    38d6:	98 2f       	mov	r25, r24
    38d8:	99 1f       	adc	r25, r25
    38da:	99 27       	eor	r25, r25
    38dc:	99 1f       	adc	r25, r25
    38de:	80 e0       	ldi	r24, 0x00	; 0
    38e0:	63 e0       	ldi	r22, 0x03	; 3
    38e2:	49 2f       	mov	r20, r25
    38e4:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <GPIO_writePin>
#else
#error LCD_MODE_SELECTOR configuration parameter error
#endif

	/*enable latch*/
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,logic_high);
    38e8:	80 e0       	ldi	r24, 0x00	; 0
    38ea:	67 e0       	ldi	r22, 0x07	; 7
    38ec:	41 e0       	ldi	r20, 0x01	; 1
    38ee:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <GPIO_writePin>
    38f2:	86 e6       	ldi	r24, 0x66	; 102
    38f4:	96 e6       	ldi	r25, 0x66	; 102
    38f6:	a6 ee       	ldi	r26, 0xE6	; 230
    38f8:	be e3       	ldi	r27, 0x3E	; 62
    38fa:	8d a7       	std	Y+45, r24	; 0x2d
    38fc:	9e a7       	std	Y+46, r25	; 0x2e
    38fe:	af a7       	std	Y+47, r26	; 0x2f
    3900:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3902:	6d a5       	ldd	r22, Y+45	; 0x2d
    3904:	7e a5       	ldd	r23, Y+46	; 0x2e
    3906:	8f a5       	ldd	r24, Y+47	; 0x2f
    3908:	98 a9       	ldd	r25, Y+48	; 0x30
    390a:	2b ea       	ldi	r18, 0xAB	; 171
    390c:	3a ea       	ldi	r19, 0xAA	; 170
    390e:	4a e2       	ldi	r20, 0x2A	; 42
    3910:	50 e4       	ldi	r21, 0x40	; 64
    3912:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3916:	dc 01       	movw	r26, r24
    3918:	cb 01       	movw	r24, r22
    391a:	89 a7       	std	Y+41, r24	; 0x29
    391c:	9a a7       	std	Y+42, r25	; 0x2a
    391e:	ab a7       	std	Y+43, r26	; 0x2b
    3920:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    3922:	69 a5       	ldd	r22, Y+41	; 0x29
    3924:	7a a5       	ldd	r23, Y+42	; 0x2a
    3926:	8b a5       	ldd	r24, Y+43	; 0x2b
    3928:	9c a5       	ldd	r25, Y+44	; 0x2c
    392a:	20 e0       	ldi	r18, 0x00	; 0
    392c:	30 e0       	ldi	r19, 0x00	; 0
    392e:	40 e8       	ldi	r20, 0x80	; 128
    3930:	5f e3       	ldi	r21, 0x3F	; 63
    3932:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3936:	88 23       	and	r24, r24
    3938:	1c f4       	brge	.+6      	; 0x3940 <LCD_writeCmd+0x338>
		__ticks = 1;
    393a:	81 e0       	ldi	r24, 0x01	; 1
    393c:	88 a7       	std	Y+40, r24	; 0x28
    393e:	91 c0       	rjmp	.+290    	; 0x3a62 <LCD_writeCmd+0x45a>
	else if (__tmp > 255)
    3940:	69 a5       	ldd	r22, Y+41	; 0x29
    3942:	7a a5       	ldd	r23, Y+42	; 0x2a
    3944:	8b a5       	ldd	r24, Y+43	; 0x2b
    3946:	9c a5       	ldd	r25, Y+44	; 0x2c
    3948:	20 e0       	ldi	r18, 0x00	; 0
    394a:	30 e0       	ldi	r19, 0x00	; 0
    394c:	4f e7       	ldi	r20, 0x7F	; 127
    394e:	53 e4       	ldi	r21, 0x43	; 67
    3950:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3954:	18 16       	cp	r1, r24
    3956:	0c f0       	brlt	.+2      	; 0x395a <LCD_writeCmd+0x352>
    3958:	7b c0       	rjmp	.+246    	; 0x3a50 <LCD_writeCmd+0x448>
	{
		_delay_ms(__us / 1000.0);
    395a:	6d a5       	ldd	r22, Y+45	; 0x2d
    395c:	7e a5       	ldd	r23, Y+46	; 0x2e
    395e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3960:	98 a9       	ldd	r25, Y+48	; 0x30
    3962:	20 e0       	ldi	r18, 0x00	; 0
    3964:	30 e0       	ldi	r19, 0x00	; 0
    3966:	4a e7       	ldi	r20, 0x7A	; 122
    3968:	54 e4       	ldi	r21, 0x44	; 68
    396a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    396e:	dc 01       	movw	r26, r24
    3970:	cb 01       	movw	r24, r22
    3972:	8c a3       	std	Y+36, r24	; 0x24
    3974:	9d a3       	std	Y+37, r25	; 0x25
    3976:	ae a3       	std	Y+38, r26	; 0x26
    3978:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    397a:	6c a1       	ldd	r22, Y+36	; 0x24
    397c:	7d a1       	ldd	r23, Y+37	; 0x25
    397e:	8e a1       	ldd	r24, Y+38	; 0x26
    3980:	9f a1       	ldd	r25, Y+39	; 0x27
    3982:	20 e0       	ldi	r18, 0x00	; 0
    3984:	30 e0       	ldi	r19, 0x00	; 0
    3986:	4a ef       	ldi	r20, 0xFA	; 250
    3988:	54 e4       	ldi	r21, 0x44	; 68
    398a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    398e:	dc 01       	movw	r26, r24
    3990:	cb 01       	movw	r24, r22
    3992:	88 a3       	std	Y+32, r24	; 0x20
    3994:	99 a3       	std	Y+33, r25	; 0x21
    3996:	aa a3       	std	Y+34, r26	; 0x22
    3998:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    399a:	68 a1       	ldd	r22, Y+32	; 0x20
    399c:	79 a1       	ldd	r23, Y+33	; 0x21
    399e:	8a a1       	ldd	r24, Y+34	; 0x22
    39a0:	9b a1       	ldd	r25, Y+35	; 0x23
    39a2:	20 e0       	ldi	r18, 0x00	; 0
    39a4:	30 e0       	ldi	r19, 0x00	; 0
    39a6:	40 e8       	ldi	r20, 0x80	; 128
    39a8:	5f e3       	ldi	r21, 0x3F	; 63
    39aa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39ae:	88 23       	and	r24, r24
    39b0:	2c f4       	brge	.+10     	; 0x39bc <LCD_writeCmd+0x3b4>
		__ticks = 1;
    39b2:	81 e0       	ldi	r24, 0x01	; 1
    39b4:	90 e0       	ldi	r25, 0x00	; 0
    39b6:	9f 8f       	std	Y+31, r25	; 0x1f
    39b8:	8e 8f       	std	Y+30, r24	; 0x1e
    39ba:	3f c0       	rjmp	.+126    	; 0x3a3a <LCD_writeCmd+0x432>
	else if (__tmp > 65535)
    39bc:	68 a1       	ldd	r22, Y+32	; 0x20
    39be:	79 a1       	ldd	r23, Y+33	; 0x21
    39c0:	8a a1       	ldd	r24, Y+34	; 0x22
    39c2:	9b a1       	ldd	r25, Y+35	; 0x23
    39c4:	20 e0       	ldi	r18, 0x00	; 0
    39c6:	3f ef       	ldi	r19, 0xFF	; 255
    39c8:	4f e7       	ldi	r20, 0x7F	; 127
    39ca:	57 e4       	ldi	r21, 0x47	; 71
    39cc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    39d0:	18 16       	cp	r1, r24
    39d2:	4c f5       	brge	.+82     	; 0x3a26 <LCD_writeCmd+0x41e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39d4:	6c a1       	ldd	r22, Y+36	; 0x24
    39d6:	7d a1       	ldd	r23, Y+37	; 0x25
    39d8:	8e a1       	ldd	r24, Y+38	; 0x26
    39da:	9f a1       	ldd	r25, Y+39	; 0x27
    39dc:	20 e0       	ldi	r18, 0x00	; 0
    39de:	30 e0       	ldi	r19, 0x00	; 0
    39e0:	40 e2       	ldi	r20, 0x20	; 32
    39e2:	51 e4       	ldi	r21, 0x41	; 65
    39e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39e8:	dc 01       	movw	r26, r24
    39ea:	cb 01       	movw	r24, r22
    39ec:	bc 01       	movw	r22, r24
    39ee:	cd 01       	movw	r24, r26
    39f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39f4:	dc 01       	movw	r26, r24
    39f6:	cb 01       	movw	r24, r22
    39f8:	9f 8f       	std	Y+31, r25	; 0x1f
    39fa:	8e 8f       	std	Y+30, r24	; 0x1e
    39fc:	0f c0       	rjmp	.+30     	; 0x3a1c <LCD_writeCmd+0x414>
    39fe:	88 ec       	ldi	r24, 0xC8	; 200
    3a00:	90 e0       	ldi	r25, 0x00	; 0
    3a02:	9d 8f       	std	Y+29, r25	; 0x1d
    3a04:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3a06:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3a08:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3a0a:	01 97       	sbiw	r24, 0x01	; 1
    3a0c:	f1 f7       	brne	.-4      	; 0x3a0a <LCD_writeCmd+0x402>
    3a0e:	9d 8f       	std	Y+29, r25	; 0x1d
    3a10:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a12:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3a14:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3a16:	01 97       	sbiw	r24, 0x01	; 1
    3a18:	9f 8f       	std	Y+31, r25	; 0x1f
    3a1a:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a1c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3a1e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3a20:	00 97       	sbiw	r24, 0x00	; 0
    3a22:	69 f7       	brne	.-38     	; 0x39fe <LCD_writeCmd+0x3f6>
    3a24:	24 c0       	rjmp	.+72     	; 0x3a6e <LCD_writeCmd+0x466>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a26:	68 a1       	ldd	r22, Y+32	; 0x20
    3a28:	79 a1       	ldd	r23, Y+33	; 0x21
    3a2a:	8a a1       	ldd	r24, Y+34	; 0x22
    3a2c:	9b a1       	ldd	r25, Y+35	; 0x23
    3a2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a32:	dc 01       	movw	r26, r24
    3a34:	cb 01       	movw	r24, r22
    3a36:	9f 8f       	std	Y+31, r25	; 0x1f
    3a38:	8e 8f       	std	Y+30, r24	; 0x1e
    3a3a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3a3c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3a3e:	9b 8f       	std	Y+27, r25	; 0x1b
    3a40:	8a 8f       	std	Y+26, r24	; 0x1a
    3a42:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3a44:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3a46:	01 97       	sbiw	r24, 0x01	; 1
    3a48:	f1 f7       	brne	.-4      	; 0x3a46 <LCD_writeCmd+0x43e>
    3a4a:	9b 8f       	std	Y+27, r25	; 0x1b
    3a4c:	8a 8f       	std	Y+26, r24	; 0x1a
    3a4e:	0f c0       	rjmp	.+30     	; 0x3a6e <LCD_writeCmd+0x466>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3a50:	69 a5       	ldd	r22, Y+41	; 0x29
    3a52:	7a a5       	ldd	r23, Y+42	; 0x2a
    3a54:	8b a5       	ldd	r24, Y+43	; 0x2b
    3a56:	9c a5       	ldd	r25, Y+44	; 0x2c
    3a58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a5c:	dc 01       	movw	r26, r24
    3a5e:	cb 01       	movw	r24, r22
    3a60:	88 a7       	std	Y+40, r24	; 0x28
    3a62:	88 a5       	ldd	r24, Y+40	; 0x28
    3a64:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3a66:	89 8d       	ldd	r24, Y+25	; 0x19
    3a68:	8a 95       	dec	r24
    3a6a:	f1 f7       	brne	.-4      	; 0x3a68 <LCD_writeCmd+0x460>
    3a6c:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(0.450);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,logic_low);
    3a6e:	80 e0       	ldi	r24, 0x00	; 0
    3a70:	67 e0       	ldi	r22, 0x07	; 7
    3a72:	40 e0       	ldi	r20, 0x00	; 0
    3a74:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <GPIO_writePin>
    3a78:	80 e0       	ldi	r24, 0x00	; 0
    3a7a:	90 e0       	ldi	r25, 0x00	; 0
    3a7c:	a8 ec       	ldi	r26, 0xC8	; 200
    3a7e:	b2 e4       	ldi	r27, 0x42	; 66
    3a80:	8d 8b       	std	Y+21, r24	; 0x15
    3a82:	9e 8b       	std	Y+22, r25	; 0x16
    3a84:	af 8b       	std	Y+23, r26	; 0x17
    3a86:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3a88:	6d 89       	ldd	r22, Y+21	; 0x15
    3a8a:	7e 89       	ldd	r23, Y+22	; 0x16
    3a8c:	8f 89       	ldd	r24, Y+23	; 0x17
    3a8e:	98 8d       	ldd	r25, Y+24	; 0x18
    3a90:	2b ea       	ldi	r18, 0xAB	; 171
    3a92:	3a ea       	ldi	r19, 0xAA	; 170
    3a94:	4a e2       	ldi	r20, 0x2A	; 42
    3a96:	50 e4       	ldi	r21, 0x40	; 64
    3a98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a9c:	dc 01       	movw	r26, r24
    3a9e:	cb 01       	movw	r24, r22
    3aa0:	89 8b       	std	Y+17, r24	; 0x11
    3aa2:	9a 8b       	std	Y+18, r25	; 0x12
    3aa4:	ab 8b       	std	Y+19, r26	; 0x13
    3aa6:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3aa8:	69 89       	ldd	r22, Y+17	; 0x11
    3aaa:	7a 89       	ldd	r23, Y+18	; 0x12
    3aac:	8b 89       	ldd	r24, Y+19	; 0x13
    3aae:	9c 89       	ldd	r25, Y+20	; 0x14
    3ab0:	20 e0       	ldi	r18, 0x00	; 0
    3ab2:	30 e0       	ldi	r19, 0x00	; 0
    3ab4:	40 e8       	ldi	r20, 0x80	; 128
    3ab6:	5f e3       	ldi	r21, 0x3F	; 63
    3ab8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3abc:	88 23       	and	r24, r24
    3abe:	1c f4       	brge	.+6      	; 0x3ac6 <LCD_writeCmd+0x4be>
		__ticks = 1;
    3ac0:	81 e0       	ldi	r24, 0x01	; 1
    3ac2:	88 8b       	std	Y+16, r24	; 0x10
    3ac4:	91 c0       	rjmp	.+290    	; 0x3be8 <LCD_writeCmd+0x5e0>
	else if (__tmp > 255)
    3ac6:	69 89       	ldd	r22, Y+17	; 0x11
    3ac8:	7a 89       	ldd	r23, Y+18	; 0x12
    3aca:	8b 89       	ldd	r24, Y+19	; 0x13
    3acc:	9c 89       	ldd	r25, Y+20	; 0x14
    3ace:	20 e0       	ldi	r18, 0x00	; 0
    3ad0:	30 e0       	ldi	r19, 0x00	; 0
    3ad2:	4f e7       	ldi	r20, 0x7F	; 127
    3ad4:	53 e4       	ldi	r21, 0x43	; 67
    3ad6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ada:	18 16       	cp	r1, r24
    3adc:	0c f0       	brlt	.+2      	; 0x3ae0 <LCD_writeCmd+0x4d8>
    3ade:	7b c0       	rjmp	.+246    	; 0x3bd6 <LCD_writeCmd+0x5ce>
	{
		_delay_ms(__us / 1000.0);
    3ae0:	6d 89       	ldd	r22, Y+21	; 0x15
    3ae2:	7e 89       	ldd	r23, Y+22	; 0x16
    3ae4:	8f 89       	ldd	r24, Y+23	; 0x17
    3ae6:	98 8d       	ldd	r25, Y+24	; 0x18
    3ae8:	20 e0       	ldi	r18, 0x00	; 0
    3aea:	30 e0       	ldi	r19, 0x00	; 0
    3aec:	4a e7       	ldi	r20, 0x7A	; 122
    3aee:	54 e4       	ldi	r21, 0x44	; 68
    3af0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3af4:	dc 01       	movw	r26, r24
    3af6:	cb 01       	movw	r24, r22
    3af8:	8c 87       	std	Y+12, r24	; 0x0c
    3afa:	9d 87       	std	Y+13, r25	; 0x0d
    3afc:	ae 87       	std	Y+14, r26	; 0x0e
    3afe:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b00:	6c 85       	ldd	r22, Y+12	; 0x0c
    3b02:	7d 85       	ldd	r23, Y+13	; 0x0d
    3b04:	8e 85       	ldd	r24, Y+14	; 0x0e
    3b06:	9f 85       	ldd	r25, Y+15	; 0x0f
    3b08:	20 e0       	ldi	r18, 0x00	; 0
    3b0a:	30 e0       	ldi	r19, 0x00	; 0
    3b0c:	4a ef       	ldi	r20, 0xFA	; 250
    3b0e:	54 e4       	ldi	r21, 0x44	; 68
    3b10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b14:	dc 01       	movw	r26, r24
    3b16:	cb 01       	movw	r24, r22
    3b18:	88 87       	std	Y+8, r24	; 0x08
    3b1a:	99 87       	std	Y+9, r25	; 0x09
    3b1c:	aa 87       	std	Y+10, r26	; 0x0a
    3b1e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3b20:	68 85       	ldd	r22, Y+8	; 0x08
    3b22:	79 85       	ldd	r23, Y+9	; 0x09
    3b24:	8a 85       	ldd	r24, Y+10	; 0x0a
    3b26:	9b 85       	ldd	r25, Y+11	; 0x0b
    3b28:	20 e0       	ldi	r18, 0x00	; 0
    3b2a:	30 e0       	ldi	r19, 0x00	; 0
    3b2c:	40 e8       	ldi	r20, 0x80	; 128
    3b2e:	5f e3       	ldi	r21, 0x3F	; 63
    3b30:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b34:	88 23       	and	r24, r24
    3b36:	2c f4       	brge	.+10     	; 0x3b42 <LCD_writeCmd+0x53a>
		__ticks = 1;
    3b38:	81 e0       	ldi	r24, 0x01	; 1
    3b3a:	90 e0       	ldi	r25, 0x00	; 0
    3b3c:	9f 83       	std	Y+7, r25	; 0x07
    3b3e:	8e 83       	std	Y+6, r24	; 0x06
    3b40:	3f c0       	rjmp	.+126    	; 0x3bc0 <LCD_writeCmd+0x5b8>
	else if (__tmp > 65535)
    3b42:	68 85       	ldd	r22, Y+8	; 0x08
    3b44:	79 85       	ldd	r23, Y+9	; 0x09
    3b46:	8a 85       	ldd	r24, Y+10	; 0x0a
    3b48:	9b 85       	ldd	r25, Y+11	; 0x0b
    3b4a:	20 e0       	ldi	r18, 0x00	; 0
    3b4c:	3f ef       	ldi	r19, 0xFF	; 255
    3b4e:	4f e7       	ldi	r20, 0x7F	; 127
    3b50:	57 e4       	ldi	r21, 0x47	; 71
    3b52:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b56:	18 16       	cp	r1, r24
    3b58:	4c f5       	brge	.+82     	; 0x3bac <LCD_writeCmd+0x5a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b5a:	6c 85       	ldd	r22, Y+12	; 0x0c
    3b5c:	7d 85       	ldd	r23, Y+13	; 0x0d
    3b5e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3b60:	9f 85       	ldd	r25, Y+15	; 0x0f
    3b62:	20 e0       	ldi	r18, 0x00	; 0
    3b64:	30 e0       	ldi	r19, 0x00	; 0
    3b66:	40 e2       	ldi	r20, 0x20	; 32
    3b68:	51 e4       	ldi	r21, 0x41	; 65
    3b6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b6e:	dc 01       	movw	r26, r24
    3b70:	cb 01       	movw	r24, r22
    3b72:	bc 01       	movw	r22, r24
    3b74:	cd 01       	movw	r24, r26
    3b76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b7a:	dc 01       	movw	r26, r24
    3b7c:	cb 01       	movw	r24, r22
    3b7e:	9f 83       	std	Y+7, r25	; 0x07
    3b80:	8e 83       	std	Y+6, r24	; 0x06
    3b82:	0f c0       	rjmp	.+30     	; 0x3ba2 <LCD_writeCmd+0x59a>
    3b84:	88 ec       	ldi	r24, 0xC8	; 200
    3b86:	90 e0       	ldi	r25, 0x00	; 0
    3b88:	9d 83       	std	Y+5, r25	; 0x05
    3b8a:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3b8c:	8c 81       	ldd	r24, Y+4	; 0x04
    3b8e:	9d 81       	ldd	r25, Y+5	; 0x05
    3b90:	01 97       	sbiw	r24, 0x01	; 1
    3b92:	f1 f7       	brne	.-4      	; 0x3b90 <LCD_writeCmd+0x588>
    3b94:	9d 83       	std	Y+5, r25	; 0x05
    3b96:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b98:	8e 81       	ldd	r24, Y+6	; 0x06
    3b9a:	9f 81       	ldd	r25, Y+7	; 0x07
    3b9c:	01 97       	sbiw	r24, 0x01	; 1
    3b9e:	9f 83       	std	Y+7, r25	; 0x07
    3ba0:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ba2:	8e 81       	ldd	r24, Y+6	; 0x06
    3ba4:	9f 81       	ldd	r25, Y+7	; 0x07
    3ba6:	00 97       	sbiw	r24, 0x00	; 0
    3ba8:	69 f7       	brne	.-38     	; 0x3b84 <LCD_writeCmd+0x57c>
    3baa:	24 c0       	rjmp	.+72     	; 0x3bf4 <LCD_writeCmd+0x5ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bac:	68 85       	ldd	r22, Y+8	; 0x08
    3bae:	79 85       	ldd	r23, Y+9	; 0x09
    3bb0:	8a 85       	ldd	r24, Y+10	; 0x0a
    3bb2:	9b 85       	ldd	r25, Y+11	; 0x0b
    3bb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bb8:	dc 01       	movw	r26, r24
    3bba:	cb 01       	movw	r24, r22
    3bbc:	9f 83       	std	Y+7, r25	; 0x07
    3bbe:	8e 83       	std	Y+6, r24	; 0x06
    3bc0:	8e 81       	ldd	r24, Y+6	; 0x06
    3bc2:	9f 81       	ldd	r25, Y+7	; 0x07
    3bc4:	9b 83       	std	Y+3, r25	; 0x03
    3bc6:	8a 83       	std	Y+2, r24	; 0x02
    3bc8:	8a 81       	ldd	r24, Y+2	; 0x02
    3bca:	9b 81       	ldd	r25, Y+3	; 0x03
    3bcc:	01 97       	sbiw	r24, 0x01	; 1
    3bce:	f1 f7       	brne	.-4      	; 0x3bcc <LCD_writeCmd+0x5c4>
    3bd0:	9b 83       	std	Y+3, r25	; 0x03
    3bd2:	8a 83       	std	Y+2, r24	; 0x02
    3bd4:	0f c0       	rjmp	.+30     	; 0x3bf4 <LCD_writeCmd+0x5ec>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3bd6:	69 89       	ldd	r22, Y+17	; 0x11
    3bd8:	7a 89       	ldd	r23, Y+18	; 0x12
    3bda:	8b 89       	ldd	r24, Y+19	; 0x13
    3bdc:	9c 89       	ldd	r25, Y+20	; 0x14
    3bde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3be2:	dc 01       	movw	r26, r24
    3be4:	cb 01       	movw	r24, r22
    3be6:	88 8b       	std	Y+16, r24	; 0x10
    3be8:	88 89       	ldd	r24, Y+16	; 0x10
    3bea:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3bec:	89 81       	ldd	r24, Y+1	; 0x01
    3bee:	8a 95       	dec	r24
    3bf0:	f1 f7       	brne	.-4      	; 0x3bee <LCD_writeCmd+0x5e6>
    3bf2:	89 83       	std	Y+1, r24	; 0x01

	_delay_us(100);

}
    3bf4:	c7 5b       	subi	r28, 0xB7	; 183
    3bf6:	df 4f       	sbci	r29, 0xFF	; 255
    3bf8:	0f b6       	in	r0, 0x3f	; 63
    3bfa:	f8 94       	cli
    3bfc:	de bf       	out	0x3e, r29	; 62
    3bfe:	0f be       	out	0x3f, r0	; 63
    3c00:	cd bf       	out	0x3d, r28	; 61
    3c02:	cf 91       	pop	r28
    3c04:	df 91       	pop	r29
    3c06:	1f 91       	pop	r17
    3c08:	0f 91       	pop	r16
    3c0a:	08 95       	ret

00003c0c <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    3c0c:	df 93       	push	r29
    3c0e:	cf 93       	push	r28
    3c10:	00 d0       	rcall	.+0      	; 0x3c12 <KEYPAD_getPressedKey+0x6>
    3c12:	0f 92       	push	r0
    3c14:	cd b7       	in	r28, 0x3d	; 61
    3c16:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    3c18:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_OF_COLUMNS;col++) /* loop for columns */
    3c1a:	1b 82       	std	Y+3, r1	; 0x03
    3c1c:	43 c0       	rjmp	.+134    	; 0x3ca4 <KEYPAD_getPressedKey+0x98>
		{
			/*
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setPortDir(KEYPAD_PORT_ID,INPUT_PORT);
    3c1e:	81 e0       	ldi	r24, 0x01	; 1
    3c20:	60 e0       	ldi	r22, 0x00	; 0
    3c22:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <GPIO_setPortDir>
			GPIO_setPinDir(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,OUTPUT_PORT);
    3c26:	8b 81       	ldd	r24, Y+3	; 0x03
    3c28:	98 2f       	mov	r25, r24
    3c2a:	9c 5f       	subi	r25, 0xFC	; 252
    3c2c:	81 e0       	ldi	r24, 0x01	; 1
    3c2e:	69 2f       	mov	r22, r25
    3c30:	4f ef       	ldi	r20, 0xFF	; 255
    3c32:	0e 94 1e 0c 	call	0x183c	; 0x183c <GPIO_setPinDir>

#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    3c36:	8b 81       	ldd	r24, Y+3	; 0x03
    3c38:	88 2f       	mov	r24, r24
    3c3a:	90 e0       	ldi	r25, 0x00	; 0
    3c3c:	9c 01       	movw	r18, r24
    3c3e:	2c 5f       	subi	r18, 0xFC	; 252
    3c40:	3f 4f       	sbci	r19, 0xFF	; 255
    3c42:	81 e0       	ldi	r24, 0x01	; 1
    3c44:	90 e0       	ldi	r25, 0x00	; 0
    3c46:	02 c0       	rjmp	.+4      	; 0x3c4c <KEYPAD_getPressedKey+0x40>
    3c48:	88 0f       	add	r24, r24
    3c4a:	99 1f       	adc	r25, r25
    3c4c:	2a 95       	dec	r18
    3c4e:	e2 f7       	brpl	.-8      	; 0x3c48 <KEYPAD_getPressedKey+0x3c>
    3c50:	80 95       	com	r24
    3c52:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    3c54:	81 e0       	ldi	r24, 0x01	; 1
    3c56:	69 81       	ldd	r22, Y+1	; 0x01
    3c58:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_OF_ROWS;row++) /* loop for rows */
    3c5c:	1a 82       	std	Y+2, r1	; 0x02
    3c5e:	1c c0       	rjmp	.+56     	; 0x3c98 <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    3c60:	81 e0       	ldi	r24, 0x01	; 1
    3c62:	6a 81       	ldd	r22, Y+2	; 0x02
    3c64:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <GPIO_readPin>
    3c68:	88 23       	and	r24, r24
    3c6a:	99 f4       	brne	.+38     	; 0x3c92 <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_OF_COLUMNS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_OF_COLUMNS)+col+1);
					#elif (KEYPAD_NUM_OF_COLUMNS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_OF_COLUMNS)+col+1);
    3c6c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c6e:	88 2f       	mov	r24, r24
    3c70:	90 e0       	ldi	r25, 0x00	; 0
    3c72:	88 0f       	add	r24, r24
    3c74:	99 1f       	adc	r25, r25
    3c76:	88 0f       	add	r24, r24
    3c78:	99 1f       	adc	r25, r25
    3c7a:	98 2f       	mov	r25, r24
    3c7c:	8b 81       	ldd	r24, Y+3	; 0x03
    3c7e:	89 0f       	add	r24, r25
    3c80:	8f 5f       	subi	r24, 0xFF	; 255
    3c82:	0e 94 57 1e 	call	0x3cae	; 0x3cae <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}
}
    3c86:	0f 90       	pop	r0
    3c88:	0f 90       	pop	r0
    3c8a:	0f 90       	pop	r0
    3c8c:	cf 91       	pop	r28
    3c8e:	df 91       	pop	r29
    3c90:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_OF_ROWS;row++) /* loop for rows */
    3c92:	8a 81       	ldd	r24, Y+2	; 0x02
    3c94:	8f 5f       	subi	r24, 0xFF	; 255
    3c96:	8a 83       	std	Y+2, r24	; 0x02
    3c98:	8a 81       	ldd	r24, Y+2	; 0x02
    3c9a:	84 30       	cpi	r24, 0x04	; 4
    3c9c:	08 f3       	brcs	.-62     	; 0x3c60 <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_OF_COLUMNS;col++) /* loop for columns */
    3c9e:	8b 81       	ldd	r24, Y+3	; 0x03
    3ca0:	8f 5f       	subi	r24, 0xFF	; 255
    3ca2:	8b 83       	std	Y+3, r24	; 0x03
    3ca4:	8b 81       	ldd	r24, Y+3	; 0x03
    3ca6:	84 30       	cpi	r24, 0x04	; 4
    3ca8:	08 f4       	brcc	.+2      	; 0x3cac <KEYPAD_getPressedKey+0xa0>
    3caa:	b9 cf       	rjmp	.-142    	; 0x3c1e <KEYPAD_getPressedKey+0x12>
    3cac:	b6 cf       	rjmp	.-148    	; 0x3c1a <KEYPAD_getPressedKey+0xe>

00003cae <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    3cae:	df 93       	push	r29
    3cb0:	cf 93       	push	r28
    3cb2:	00 d0       	rcall	.+0      	; 0x3cb4 <KEYPAD_4x4_adjustKeyNumber+0x6>
    3cb4:	00 d0       	rcall	.+0      	; 0x3cb6 <KEYPAD_4x4_adjustKeyNumber+0x8>
    3cb6:	cd b7       	in	r28, 0x3d	; 61
    3cb8:	de b7       	in	r29, 0x3e	; 62
    3cba:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    3cbc:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    3cbe:	8a 81       	ldd	r24, Y+2	; 0x02
    3cc0:	28 2f       	mov	r18, r24
    3cc2:	30 e0       	ldi	r19, 0x00	; 0
    3cc4:	3c 83       	std	Y+4, r19	; 0x04
    3cc6:	2b 83       	std	Y+3, r18	; 0x03
    3cc8:	8b 81       	ldd	r24, Y+3	; 0x03
    3cca:	9c 81       	ldd	r25, Y+4	; 0x04
    3ccc:	88 30       	cpi	r24, 0x08	; 8
    3cce:	91 05       	cpc	r25, r1
    3cd0:	09 f4       	brne	.+2      	; 0x3cd4 <KEYPAD_4x4_adjustKeyNumber+0x26>
    3cd2:	70 c0       	rjmp	.+224    	; 0x3db4 <KEYPAD_4x4_adjustKeyNumber+0x106>
    3cd4:	2b 81       	ldd	r18, Y+3	; 0x03
    3cd6:	3c 81       	ldd	r19, Y+4	; 0x04
    3cd8:	29 30       	cpi	r18, 0x09	; 9
    3cda:	31 05       	cpc	r19, r1
    3cdc:	5c f5       	brge	.+86     	; 0x3d34 <KEYPAD_4x4_adjustKeyNumber+0x86>
    3cde:	8b 81       	ldd	r24, Y+3	; 0x03
    3ce0:	9c 81       	ldd	r25, Y+4	; 0x04
    3ce2:	84 30       	cpi	r24, 0x04	; 4
    3ce4:	91 05       	cpc	r25, r1
    3ce6:	09 f4       	brne	.+2      	; 0x3cea <KEYPAD_4x4_adjustKeyNumber+0x3c>
    3ce8:	59 c0       	rjmp	.+178    	; 0x3d9c <KEYPAD_4x4_adjustKeyNumber+0xee>
    3cea:	2b 81       	ldd	r18, Y+3	; 0x03
    3cec:	3c 81       	ldd	r19, Y+4	; 0x04
    3cee:	25 30       	cpi	r18, 0x05	; 5
    3cf0:	31 05       	cpc	r19, r1
    3cf2:	9c f4       	brge	.+38     	; 0x3d1a <KEYPAD_4x4_adjustKeyNumber+0x6c>
    3cf4:	8b 81       	ldd	r24, Y+3	; 0x03
    3cf6:	9c 81       	ldd	r25, Y+4	; 0x04
    3cf8:	82 30       	cpi	r24, 0x02	; 2
    3cfa:	91 05       	cpc	r25, r1
    3cfc:	09 f4       	brne	.+2      	; 0x3d00 <KEYPAD_4x4_adjustKeyNumber+0x52>
    3cfe:	48 c0       	rjmp	.+144    	; 0x3d90 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    3d00:	2b 81       	ldd	r18, Y+3	; 0x03
    3d02:	3c 81       	ldd	r19, Y+4	; 0x04
    3d04:	23 30       	cpi	r18, 0x03	; 3
    3d06:	31 05       	cpc	r19, r1
    3d08:	0c f0       	brlt	.+2      	; 0x3d0c <KEYPAD_4x4_adjustKeyNumber+0x5e>
    3d0a:	45 c0       	rjmp	.+138    	; 0x3d96 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    3d0c:	8b 81       	ldd	r24, Y+3	; 0x03
    3d0e:	9c 81       	ldd	r25, Y+4	; 0x04
    3d10:	81 30       	cpi	r24, 0x01	; 1
    3d12:	91 05       	cpc	r25, r1
    3d14:	09 f4       	brne	.+2      	; 0x3d18 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    3d16:	39 c0       	rjmp	.+114    	; 0x3d8a <KEYPAD_4x4_adjustKeyNumber+0xdc>
    3d18:	67 c0       	rjmp	.+206    	; 0x3de8 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    3d1a:	2b 81       	ldd	r18, Y+3	; 0x03
    3d1c:	3c 81       	ldd	r19, Y+4	; 0x04
    3d1e:	26 30       	cpi	r18, 0x06	; 6
    3d20:	31 05       	cpc	r19, r1
    3d22:	09 f4       	brne	.+2      	; 0x3d26 <KEYPAD_4x4_adjustKeyNumber+0x78>
    3d24:	41 c0       	rjmp	.+130    	; 0x3da8 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    3d26:	8b 81       	ldd	r24, Y+3	; 0x03
    3d28:	9c 81       	ldd	r25, Y+4	; 0x04
    3d2a:	87 30       	cpi	r24, 0x07	; 7
    3d2c:	91 05       	cpc	r25, r1
    3d2e:	0c f0       	brlt	.+2      	; 0x3d32 <KEYPAD_4x4_adjustKeyNumber+0x84>
    3d30:	3e c0       	rjmp	.+124    	; 0x3dae <KEYPAD_4x4_adjustKeyNumber+0x100>
    3d32:	37 c0       	rjmp	.+110    	; 0x3da2 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    3d34:	2b 81       	ldd	r18, Y+3	; 0x03
    3d36:	3c 81       	ldd	r19, Y+4	; 0x04
    3d38:	2c 30       	cpi	r18, 0x0C	; 12
    3d3a:	31 05       	cpc	r19, r1
    3d3c:	09 f4       	brne	.+2      	; 0x3d40 <KEYPAD_4x4_adjustKeyNumber+0x92>
    3d3e:	46 c0       	rjmp	.+140    	; 0x3dcc <KEYPAD_4x4_adjustKeyNumber+0x11e>
    3d40:	8b 81       	ldd	r24, Y+3	; 0x03
    3d42:	9c 81       	ldd	r25, Y+4	; 0x04
    3d44:	8d 30       	cpi	r24, 0x0D	; 13
    3d46:	91 05       	cpc	r25, r1
    3d48:	5c f4       	brge	.+22     	; 0x3d60 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    3d4a:	2b 81       	ldd	r18, Y+3	; 0x03
    3d4c:	3c 81       	ldd	r19, Y+4	; 0x04
    3d4e:	2a 30       	cpi	r18, 0x0A	; 10
    3d50:	31 05       	cpc	r19, r1
    3d52:	b1 f1       	breq	.+108    	; 0x3dc0 <KEYPAD_4x4_adjustKeyNumber+0x112>
    3d54:	8b 81       	ldd	r24, Y+3	; 0x03
    3d56:	9c 81       	ldd	r25, Y+4	; 0x04
    3d58:	8b 30       	cpi	r24, 0x0B	; 11
    3d5a:	91 05       	cpc	r25, r1
    3d5c:	a4 f5       	brge	.+104    	; 0x3dc6 <KEYPAD_4x4_adjustKeyNumber+0x118>
    3d5e:	2d c0       	rjmp	.+90     	; 0x3dba <KEYPAD_4x4_adjustKeyNumber+0x10c>
    3d60:	2b 81       	ldd	r18, Y+3	; 0x03
    3d62:	3c 81       	ldd	r19, Y+4	; 0x04
    3d64:	2e 30       	cpi	r18, 0x0E	; 14
    3d66:	31 05       	cpc	r19, r1
    3d68:	b9 f1       	breq	.+110    	; 0x3dd8 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    3d6a:	8b 81       	ldd	r24, Y+3	; 0x03
    3d6c:	9c 81       	ldd	r25, Y+4	; 0x04
    3d6e:	8e 30       	cpi	r24, 0x0E	; 14
    3d70:	91 05       	cpc	r25, r1
    3d72:	7c f1       	brlt	.+94     	; 0x3dd2 <KEYPAD_4x4_adjustKeyNumber+0x124>
    3d74:	2b 81       	ldd	r18, Y+3	; 0x03
    3d76:	3c 81       	ldd	r19, Y+4	; 0x04
    3d78:	2f 30       	cpi	r18, 0x0F	; 15
    3d7a:	31 05       	cpc	r19, r1
    3d7c:	79 f1       	breq	.+94     	; 0x3ddc <KEYPAD_4x4_adjustKeyNumber+0x12e>
    3d7e:	8b 81       	ldd	r24, Y+3	; 0x03
    3d80:	9c 81       	ldd	r25, Y+4	; 0x04
    3d82:	80 31       	cpi	r24, 0x10	; 16
    3d84:	91 05       	cpc	r25, r1
    3d86:	69 f1       	breq	.+90     	; 0x3de2 <KEYPAD_4x4_adjustKeyNumber+0x134>
    3d88:	2f c0       	rjmp	.+94     	; 0x3de8 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    3d8a:	87 e0       	ldi	r24, 0x07	; 7
    3d8c:	89 83       	std	Y+1, r24	; 0x01
    3d8e:	2e c0       	rjmp	.+92     	; 0x3dec <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    3d90:	88 e0       	ldi	r24, 0x08	; 8
    3d92:	89 83       	std	Y+1, r24	; 0x01
    3d94:	2b c0       	rjmp	.+86     	; 0x3dec <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    3d96:	89 e0       	ldi	r24, 0x09	; 9
    3d98:	89 83       	std	Y+1, r24	; 0x01
    3d9a:	28 c0       	rjmp	.+80     	; 0x3dec <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    3d9c:	85 e2       	ldi	r24, 0x25	; 37
    3d9e:	89 83       	std	Y+1, r24	; 0x01
    3da0:	25 c0       	rjmp	.+74     	; 0x3dec <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    3da2:	84 e0       	ldi	r24, 0x04	; 4
    3da4:	89 83       	std	Y+1, r24	; 0x01
    3da6:	22 c0       	rjmp	.+68     	; 0x3dec <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    3da8:	85 e0       	ldi	r24, 0x05	; 5
    3daa:	89 83       	std	Y+1, r24	; 0x01
    3dac:	1f c0       	rjmp	.+62     	; 0x3dec <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    3dae:	86 e0       	ldi	r24, 0x06	; 6
    3db0:	89 83       	std	Y+1, r24	; 0x01
    3db2:	1c c0       	rjmp	.+56     	; 0x3dec <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    3db4:	8a e2       	ldi	r24, 0x2A	; 42
    3db6:	89 83       	std	Y+1, r24	; 0x01
    3db8:	19 c0       	rjmp	.+50     	; 0x3dec <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 9: keypad_button = 1;
    3dba:	81 e0       	ldi	r24, 0x01	; 1
    3dbc:	89 83       	std	Y+1, r24	; 0x01
    3dbe:	16 c0       	rjmp	.+44     	; 0x3dec <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    3dc0:	82 e0       	ldi	r24, 0x02	; 2
    3dc2:	89 83       	std	Y+1, r24	; 0x01
    3dc4:	13 c0       	rjmp	.+38     	; 0x3dec <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    3dc6:	83 e0       	ldi	r24, 0x03	; 3
    3dc8:	89 83       	std	Y+1, r24	; 0x01
    3dca:	10 c0       	rjmp	.+32     	; 0x3dec <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    3dcc:	8d e2       	ldi	r24, 0x2D	; 45
    3dce:	89 83       	std	Y+1, r24	; 0x01
    3dd0:	0d c0       	rjmp	.+26     	; 0x3dec <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    3dd2:	8d e0       	ldi	r24, 0x0D	; 13
    3dd4:	89 83       	std	Y+1, r24	; 0x01
    3dd6:	0a c0       	rjmp	.+20     	; 0x3dec <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 14: keypad_button = 0;
    3dd8:	19 82       	std	Y+1, r1	; 0x01
    3dda:	08 c0       	rjmp	.+16     	; 0x3dec <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    3ddc:	8d e3       	ldi	r24, 0x3D	; 61
    3dde:	89 83       	std	Y+1, r24	; 0x01
    3de0:	05 c0       	rjmp	.+10     	; 0x3dec <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    3de2:	8b e2       	ldi	r24, 0x2B	; 43
    3de4:	89 83       	std	Y+1, r24	; 0x01
    3de6:	02 c0       	rjmp	.+4      	; 0x3dec <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    3de8:	8a 81       	ldd	r24, Y+2	; 0x02
    3dea:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    3dec:	89 81       	ldd	r24, Y+1	; 0x01
}
    3dee:	0f 90       	pop	r0
    3df0:	0f 90       	pop	r0
    3df2:	0f 90       	pop	r0
    3df4:	0f 90       	pop	r0
    3df6:	cf 91       	pop	r28
    3df8:	df 91       	pop	r29
    3dfa:	08 95       	ret

00003dfc <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "../../MCAL/TWI/twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    3dfc:	df 93       	push	r29
    3dfe:	cf 93       	push	r28
    3e00:	00 d0       	rcall	.+0      	; 0x3e02 <EEPROM_writeByte+0x6>
    3e02:	00 d0       	rcall	.+0      	; 0x3e04 <EEPROM_writeByte+0x8>
    3e04:	cd b7       	in	r28, 0x3d	; 61
    3e06:	de b7       	in	r29, 0x3e	; 62
    3e08:	9a 83       	std	Y+2, r25	; 0x02
    3e0a:	89 83       	std	Y+1, r24	; 0x01
    3e0c:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    3e0e:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    3e12:	0e 94 2b 09 	call	0x1256	; 0x1256 <TWI_getStatus>
    3e16:	88 30       	cpi	r24, 0x08	; 8
    3e18:	11 f0       	breq	.+4      	; 0x3e1e <EEPROM_writeByte+0x22>
        return ERROR;
    3e1a:	1c 82       	std	Y+4, r1	; 0x04
    3e1c:	28 c0       	rjmp	.+80     	; 0x3e6e <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    3e1e:	89 81       	ldd	r24, Y+1	; 0x01
    3e20:	9a 81       	ldd	r25, Y+2	; 0x02
    3e22:	80 70       	andi	r24, 0x00	; 0
    3e24:	97 70       	andi	r25, 0x07	; 7
    3e26:	88 0f       	add	r24, r24
    3e28:	89 2f       	mov	r24, r25
    3e2a:	88 1f       	adc	r24, r24
    3e2c:	99 0b       	sbc	r25, r25
    3e2e:	91 95       	neg	r25
    3e30:	80 6a       	ori	r24, 0xA0	; 160
    3e32:	0e 94 ee 08 	call	0x11dc	; 0x11dc <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    3e36:	0e 94 2b 09 	call	0x1256	; 0x1256 <TWI_getStatus>
    3e3a:	88 31       	cpi	r24, 0x18	; 24
    3e3c:	11 f0       	breq	.+4      	; 0x3e42 <EEPROM_writeByte+0x46>
        return ERROR; 
    3e3e:	1c 82       	std	Y+4, r1	; 0x04
    3e40:	16 c0       	rjmp	.+44     	; 0x3e6e <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    3e42:	89 81       	ldd	r24, Y+1	; 0x01
    3e44:	0e 94 ee 08 	call	0x11dc	; 0x11dc <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    3e48:	0e 94 2b 09 	call	0x1256	; 0x1256 <TWI_getStatus>
    3e4c:	88 32       	cpi	r24, 0x28	; 40
    3e4e:	11 f0       	breq	.+4      	; 0x3e54 <EEPROM_writeByte+0x58>
        return ERROR;
    3e50:	1c 82       	std	Y+4, r1	; 0x04
    3e52:	0d c0       	rjmp	.+26     	; 0x3e6e <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    3e54:	8b 81       	ldd	r24, Y+3	; 0x03
    3e56:	0e 94 ee 08 	call	0x11dc	; 0x11dc <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    3e5a:	0e 94 2b 09 	call	0x1256	; 0x1256 <TWI_getStatus>
    3e5e:	88 32       	cpi	r24, 0x28	; 40
    3e60:	11 f0       	breq	.+4      	; 0x3e66 <EEPROM_writeByte+0x6a>
        return ERROR;
    3e62:	1c 82       	std	Y+4, r1	; 0x04
    3e64:	04 c0       	rjmp	.+8      	; 0x3e6e <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    3e66:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <TWI_stop>
	
    return SUCCESS;
    3e6a:	81 e0       	ldi	r24, 0x01	; 1
    3e6c:	8c 83       	std	Y+4, r24	; 0x04
    3e6e:	8c 81       	ldd	r24, Y+4	; 0x04
}
    3e70:	0f 90       	pop	r0
    3e72:	0f 90       	pop	r0
    3e74:	0f 90       	pop	r0
    3e76:	0f 90       	pop	r0
    3e78:	cf 91       	pop	r28
    3e7a:	df 91       	pop	r29
    3e7c:	08 95       	ret

00003e7e <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    3e7e:	df 93       	push	r29
    3e80:	cf 93       	push	r28
    3e82:	00 d0       	rcall	.+0      	; 0x3e84 <EEPROM_readByte+0x6>
    3e84:	00 d0       	rcall	.+0      	; 0x3e86 <EEPROM_readByte+0x8>
    3e86:	0f 92       	push	r0
    3e88:	cd b7       	in	r28, 0x3d	; 61
    3e8a:	de b7       	in	r29, 0x3e	; 62
    3e8c:	9a 83       	std	Y+2, r25	; 0x02
    3e8e:	89 83       	std	Y+1, r24	; 0x01
    3e90:	7c 83       	std	Y+4, r23	; 0x04
    3e92:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    3e94:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    3e98:	0e 94 2b 09 	call	0x1256	; 0x1256 <TWI_getStatus>
    3e9c:	88 30       	cpi	r24, 0x08	; 8
    3e9e:	11 f0       	breq	.+4      	; 0x3ea4 <EEPROM_readByte+0x26>
        return ERROR;
    3ea0:	1d 82       	std	Y+5, r1	; 0x05
    3ea2:	44 c0       	rjmp	.+136    	; 0x3f2c <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    3ea4:	89 81       	ldd	r24, Y+1	; 0x01
    3ea6:	9a 81       	ldd	r25, Y+2	; 0x02
    3ea8:	80 70       	andi	r24, 0x00	; 0
    3eaa:	97 70       	andi	r25, 0x07	; 7
    3eac:	88 0f       	add	r24, r24
    3eae:	89 2f       	mov	r24, r25
    3eb0:	88 1f       	adc	r24, r24
    3eb2:	99 0b       	sbc	r25, r25
    3eb4:	91 95       	neg	r25
    3eb6:	80 6a       	ori	r24, 0xA0	; 160
    3eb8:	0e 94 ee 08 	call	0x11dc	; 0x11dc <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    3ebc:	0e 94 2b 09 	call	0x1256	; 0x1256 <TWI_getStatus>
    3ec0:	88 31       	cpi	r24, 0x18	; 24
    3ec2:	11 f0       	breq	.+4      	; 0x3ec8 <EEPROM_readByte+0x4a>
        return ERROR;
    3ec4:	1d 82       	std	Y+5, r1	; 0x05
    3ec6:	32 c0       	rjmp	.+100    	; 0x3f2c <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    3ec8:	89 81       	ldd	r24, Y+1	; 0x01
    3eca:	0e 94 ee 08 	call	0x11dc	; 0x11dc <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    3ece:	0e 94 2b 09 	call	0x1256	; 0x1256 <TWI_getStatus>
    3ed2:	88 32       	cpi	r24, 0x28	; 40
    3ed4:	11 f0       	breq	.+4      	; 0x3eda <EEPROM_readByte+0x5c>
        return ERROR;
    3ed6:	1d 82       	std	Y+5, r1	; 0x05
    3ed8:	29 c0       	rjmp	.+82     	; 0x3f2c <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    3eda:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    3ede:	0e 94 2b 09 	call	0x1256	; 0x1256 <TWI_getStatus>
    3ee2:	80 31       	cpi	r24, 0x10	; 16
    3ee4:	11 f0       	breq	.+4      	; 0x3eea <EEPROM_readByte+0x6c>
        return ERROR;
    3ee6:	1d 82       	std	Y+5, r1	; 0x05
    3ee8:	21 c0       	rjmp	.+66     	; 0x3f2c <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    3eea:	89 81       	ldd	r24, Y+1	; 0x01
    3eec:	9a 81       	ldd	r25, Y+2	; 0x02
    3eee:	80 70       	andi	r24, 0x00	; 0
    3ef0:	97 70       	andi	r25, 0x07	; 7
    3ef2:	88 0f       	add	r24, r24
    3ef4:	89 2f       	mov	r24, r25
    3ef6:	88 1f       	adc	r24, r24
    3ef8:	99 0b       	sbc	r25, r25
    3efa:	91 95       	neg	r25
    3efc:	81 6a       	ori	r24, 0xA1	; 161
    3efe:	0e 94 ee 08 	call	0x11dc	; 0x11dc <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    3f02:	0e 94 2b 09 	call	0x1256	; 0x1256 <TWI_getStatus>
    3f06:	80 34       	cpi	r24, 0x40	; 64
    3f08:	11 f0       	breq	.+4      	; 0x3f0e <EEPROM_readByte+0x90>
        return ERROR;
    3f0a:	1d 82       	std	Y+5, r1	; 0x05
    3f0c:	0f c0       	rjmp	.+30     	; 0x3f2c <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    3f0e:	0e 94 18 09 	call	0x1230	; 0x1230 <TWI_readByteWithNACK>
    3f12:	eb 81       	ldd	r30, Y+3	; 0x03
    3f14:	fc 81       	ldd	r31, Y+4	; 0x04
    3f16:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    3f18:	0e 94 2b 09 	call	0x1256	; 0x1256 <TWI_getStatus>
    3f1c:	88 35       	cpi	r24, 0x58	; 88
    3f1e:	11 f0       	breq	.+4      	; 0x3f24 <EEPROM_readByte+0xa6>
        return ERROR;
    3f20:	1d 82       	std	Y+5, r1	; 0x05
    3f22:	04 c0       	rjmp	.+8      	; 0x3f2c <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    3f24:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <TWI_stop>

    return SUCCESS;
    3f28:	81 e0       	ldi	r24, 0x01	; 1
    3f2a:	8d 83       	std	Y+5, r24	; 0x05
    3f2c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    3f2e:	0f 90       	pop	r0
    3f30:	0f 90       	pop	r0
    3f32:	0f 90       	pop	r0
    3f34:	0f 90       	pop	r0
    3f36:	0f 90       	pop	r0
    3f38:	cf 91       	pop	r28
    3f3a:	df 91       	pop	r29
    3f3c:	08 95       	ret

00003f3e <AMIT_Project>:

#include <avr/delay.h>
#include "../EHAL/LCD/lcd.h"
#include "../../SRC/EHAL/KEYPAD/keypad.h"

void AMIT_Project(void){
    3f3e:	df 93       	push	r29
    3f40:	cf 93       	push	r28
    3f42:	cd b7       	in	r28, 0x3d	; 61
    3f44:	de b7       	in	r29, 0x3e	; 62
    3f46:	2f 97       	sbiw	r28, 0x0f	; 15
    3f48:	0f b6       	in	r0, 0x3f	; 63
    3f4a:	f8 94       	cli
    3f4c:	de bf       	out	0x3e, r29	; 62
    3f4e:	0f be       	out	0x3f, r0	; 63
    3f50:	cd bf       	out	0x3d, r28	; 61
  uint8 key ;
	//sei();
	//USART_Init(9600);
	LCD_init();
    3f52:	0e 94 bb 11 	call	0x2376	; 0x2376 <LCD_init>
	LCD_displayString("ENTER The PASS: ");
    3f56:	84 e6       	ldi	r24, 0x64	; 100
    3f58:	90 e0       	ldi	r25, 0x00	; 0
    3f5a:	0e 94 4f 1a 	call	0x349e	; 0x349e <LCD_displayString>



	while(1){

		        key = KEYPAD_getPressedKey(); /* get the pressed key number */
    3f5e:	0e 94 06 1e 	call	0x3c0c	; 0x3c0c <KEYPAD_getPressedKey>
    3f62:	8f 87       	std	Y+15, r24	; 0x0f
		      //  LCD_writeCmd(key);
				if((key <= 9) && (key >= 0))
    3f64:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f66:	8a 30       	cpi	r24, 0x0A	; 10
    3f68:	30 f4       	brcc	.+12     	; 0x3f76 <AMIT_Project+0x38>
				{

					LCD_intgerToString(key); /*display the pressed keypad switch*/
    3f6a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f6c:	88 2f       	mov	r24, r24
    3f6e:	90 e0       	ldi	r25, 0x00	; 0
    3f70:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <LCD_intgerToString>
    3f74:	03 c0       	rjmp	.+6      	; 0x3f7c <AMIT_Project+0x3e>
				}
				else
				{
					LCD_displayCharacter(key);  /*display the pressed keypad switch*/
    3f76:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f78:	0e 94 20 16 	call	0x2c40	; 0x2c40 <LCD_displayCharacter>
    3f7c:	80 e0       	ldi	r24, 0x00	; 0
    3f7e:	90 e0       	ldi	r25, 0x00	; 0
    3f80:	aa ef       	ldi	r26, 0xFA	; 250
    3f82:	b3 e4       	ldi	r27, 0x43	; 67
    3f84:	8b 87       	std	Y+11, r24	; 0x0b
    3f86:	9c 87       	std	Y+12, r25	; 0x0c
    3f88:	ad 87       	std	Y+13, r26	; 0x0d
    3f8a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f90:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f92:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f94:	20 e0       	ldi	r18, 0x00	; 0
    3f96:	30 e0       	ldi	r19, 0x00	; 0
    3f98:	4a ef       	ldi	r20, 0xFA	; 250
    3f9a:	54 e4       	ldi	r21, 0x44	; 68
    3f9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fa0:	dc 01       	movw	r26, r24
    3fa2:	cb 01       	movw	r24, r22
    3fa4:	8f 83       	std	Y+7, r24	; 0x07
    3fa6:	98 87       	std	Y+8, r25	; 0x08
    3fa8:	a9 87       	std	Y+9, r26	; 0x09
    3faa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3fac:	6f 81       	ldd	r22, Y+7	; 0x07
    3fae:	78 85       	ldd	r23, Y+8	; 0x08
    3fb0:	89 85       	ldd	r24, Y+9	; 0x09
    3fb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fb4:	20 e0       	ldi	r18, 0x00	; 0
    3fb6:	30 e0       	ldi	r19, 0x00	; 0
    3fb8:	40 e8       	ldi	r20, 0x80	; 128
    3fba:	5f e3       	ldi	r21, 0x3F	; 63
    3fbc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3fc0:	88 23       	and	r24, r24
    3fc2:	2c f4       	brge	.+10     	; 0x3fce <AMIT_Project+0x90>
		__ticks = 1;
    3fc4:	81 e0       	ldi	r24, 0x01	; 1
    3fc6:	90 e0       	ldi	r25, 0x00	; 0
    3fc8:	9e 83       	std	Y+6, r25	; 0x06
    3fca:	8d 83       	std	Y+5, r24	; 0x05
    3fcc:	3f c0       	rjmp	.+126    	; 0x404c <AMIT_Project+0x10e>
	else if (__tmp > 65535)
    3fce:	6f 81       	ldd	r22, Y+7	; 0x07
    3fd0:	78 85       	ldd	r23, Y+8	; 0x08
    3fd2:	89 85       	ldd	r24, Y+9	; 0x09
    3fd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fd6:	20 e0       	ldi	r18, 0x00	; 0
    3fd8:	3f ef       	ldi	r19, 0xFF	; 255
    3fda:	4f e7       	ldi	r20, 0x7F	; 127
    3fdc:	57 e4       	ldi	r21, 0x47	; 71
    3fde:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3fe2:	18 16       	cp	r1, r24
    3fe4:	4c f5       	brge	.+82     	; 0x4038 <AMIT_Project+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fe6:	6b 85       	ldd	r22, Y+11	; 0x0b
    3fe8:	7c 85       	ldd	r23, Y+12	; 0x0c
    3fea:	8d 85       	ldd	r24, Y+13	; 0x0d
    3fec:	9e 85       	ldd	r25, Y+14	; 0x0e
    3fee:	20 e0       	ldi	r18, 0x00	; 0
    3ff0:	30 e0       	ldi	r19, 0x00	; 0
    3ff2:	40 e2       	ldi	r20, 0x20	; 32
    3ff4:	51 e4       	ldi	r21, 0x41	; 65
    3ff6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ffa:	dc 01       	movw	r26, r24
    3ffc:	cb 01       	movw	r24, r22
    3ffe:	bc 01       	movw	r22, r24
    4000:	cd 01       	movw	r24, r26
    4002:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4006:	dc 01       	movw	r26, r24
    4008:	cb 01       	movw	r24, r22
    400a:	9e 83       	std	Y+6, r25	; 0x06
    400c:	8d 83       	std	Y+5, r24	; 0x05
    400e:	0f c0       	rjmp	.+30     	; 0x402e <AMIT_Project+0xf0>
    4010:	88 ec       	ldi	r24, 0xC8	; 200
    4012:	90 e0       	ldi	r25, 0x00	; 0
    4014:	9c 83       	std	Y+4, r25	; 0x04
    4016:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4018:	8b 81       	ldd	r24, Y+3	; 0x03
    401a:	9c 81       	ldd	r25, Y+4	; 0x04
    401c:	01 97       	sbiw	r24, 0x01	; 1
    401e:	f1 f7       	brne	.-4      	; 0x401c <AMIT_Project+0xde>
    4020:	9c 83       	std	Y+4, r25	; 0x04
    4022:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4024:	8d 81       	ldd	r24, Y+5	; 0x05
    4026:	9e 81       	ldd	r25, Y+6	; 0x06
    4028:	01 97       	sbiw	r24, 0x01	; 1
    402a:	9e 83       	std	Y+6, r25	; 0x06
    402c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    402e:	8d 81       	ldd	r24, Y+5	; 0x05
    4030:	9e 81       	ldd	r25, Y+6	; 0x06
    4032:	00 97       	sbiw	r24, 0x00	; 0
    4034:	69 f7       	brne	.-38     	; 0x4010 <AMIT_Project+0xd2>
    4036:	93 cf       	rjmp	.-218    	; 0x3f5e <AMIT_Project+0x20>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4038:	6f 81       	ldd	r22, Y+7	; 0x07
    403a:	78 85       	ldd	r23, Y+8	; 0x08
    403c:	89 85       	ldd	r24, Y+9	; 0x09
    403e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4040:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4044:	dc 01       	movw	r26, r24
    4046:	cb 01       	movw	r24, r22
    4048:	9e 83       	std	Y+6, r25	; 0x06
    404a:	8d 83       	std	Y+5, r24	; 0x05
    404c:	8d 81       	ldd	r24, Y+5	; 0x05
    404e:	9e 81       	ldd	r25, Y+6	; 0x06
    4050:	9a 83       	std	Y+2, r25	; 0x02
    4052:	89 83       	std	Y+1, r24	; 0x01
    4054:	89 81       	ldd	r24, Y+1	; 0x01
    4056:	9a 81       	ldd	r25, Y+2	; 0x02
    4058:	01 97       	sbiw	r24, 0x01	; 1
    405a:	f1 f7       	brne	.-4      	; 0x4058 <AMIT_Project+0x11a>
    405c:	9a 83       	std	Y+2, r25	; 0x02
    405e:	89 83       	std	Y+1, r24	; 0x01
    4060:	7e cf       	rjmp	.-260    	; 0x3f5e <AMIT_Project+0x20>

00004062 <main>:
 *
 *  Created on: Mar 7, 2022
 *      Author: MahmoudLabib
 */
#define F_CPU 8000000UL
void main(void){
    4062:	df 93       	push	r29
    4064:	cf 93       	push	r28
    4066:	cd b7       	in	r28, 0x3d	; 61
    4068:	de b7       	in	r29, 0x3e	; 62
	AMIT_Project();
    406a:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <AMIT_Project>
}
    406e:	cf 91       	pop	r28
    4070:	df 91       	pop	r29
    4072:	08 95       	ret

00004074 <__mulsi3>:
    4074:	62 9f       	mul	r22, r18
    4076:	d0 01       	movw	r26, r0
    4078:	73 9f       	mul	r23, r19
    407a:	f0 01       	movw	r30, r0
    407c:	82 9f       	mul	r24, r18
    407e:	e0 0d       	add	r30, r0
    4080:	f1 1d       	adc	r31, r1
    4082:	64 9f       	mul	r22, r20
    4084:	e0 0d       	add	r30, r0
    4086:	f1 1d       	adc	r31, r1
    4088:	92 9f       	mul	r25, r18
    408a:	f0 0d       	add	r31, r0
    408c:	83 9f       	mul	r24, r19
    408e:	f0 0d       	add	r31, r0
    4090:	74 9f       	mul	r23, r20
    4092:	f0 0d       	add	r31, r0
    4094:	65 9f       	mul	r22, r21
    4096:	f0 0d       	add	r31, r0
    4098:	99 27       	eor	r25, r25
    409a:	72 9f       	mul	r23, r18
    409c:	b0 0d       	add	r27, r0
    409e:	e1 1d       	adc	r30, r1
    40a0:	f9 1f       	adc	r31, r25
    40a2:	63 9f       	mul	r22, r19
    40a4:	b0 0d       	add	r27, r0
    40a6:	e1 1d       	adc	r30, r1
    40a8:	f9 1f       	adc	r31, r25
    40aa:	bd 01       	movw	r22, r26
    40ac:	cf 01       	movw	r24, r30
    40ae:	11 24       	eor	r1, r1
    40b0:	08 95       	ret

000040b2 <__udivmodsi4>:
    40b2:	a1 e2       	ldi	r26, 0x21	; 33
    40b4:	1a 2e       	mov	r1, r26
    40b6:	aa 1b       	sub	r26, r26
    40b8:	bb 1b       	sub	r27, r27
    40ba:	fd 01       	movw	r30, r26
    40bc:	0d c0       	rjmp	.+26     	; 0x40d8 <__udivmodsi4_ep>

000040be <__udivmodsi4_loop>:
    40be:	aa 1f       	adc	r26, r26
    40c0:	bb 1f       	adc	r27, r27
    40c2:	ee 1f       	adc	r30, r30
    40c4:	ff 1f       	adc	r31, r31
    40c6:	a2 17       	cp	r26, r18
    40c8:	b3 07       	cpc	r27, r19
    40ca:	e4 07       	cpc	r30, r20
    40cc:	f5 07       	cpc	r31, r21
    40ce:	20 f0       	brcs	.+8      	; 0x40d8 <__udivmodsi4_ep>
    40d0:	a2 1b       	sub	r26, r18
    40d2:	b3 0b       	sbc	r27, r19
    40d4:	e4 0b       	sbc	r30, r20
    40d6:	f5 0b       	sbc	r31, r21

000040d8 <__udivmodsi4_ep>:
    40d8:	66 1f       	adc	r22, r22
    40da:	77 1f       	adc	r23, r23
    40dc:	88 1f       	adc	r24, r24
    40de:	99 1f       	adc	r25, r25
    40e0:	1a 94       	dec	r1
    40e2:	69 f7       	brne	.-38     	; 0x40be <__udivmodsi4_loop>
    40e4:	60 95       	com	r22
    40e6:	70 95       	com	r23
    40e8:	80 95       	com	r24
    40ea:	90 95       	com	r25
    40ec:	9b 01       	movw	r18, r22
    40ee:	ac 01       	movw	r20, r24
    40f0:	bd 01       	movw	r22, r26
    40f2:	cf 01       	movw	r24, r30
    40f4:	08 95       	ret

000040f6 <__prologue_saves__>:
    40f6:	2f 92       	push	r2
    40f8:	3f 92       	push	r3
    40fa:	4f 92       	push	r4
    40fc:	5f 92       	push	r5
    40fe:	6f 92       	push	r6
    4100:	7f 92       	push	r7
    4102:	8f 92       	push	r8
    4104:	9f 92       	push	r9
    4106:	af 92       	push	r10
    4108:	bf 92       	push	r11
    410a:	cf 92       	push	r12
    410c:	df 92       	push	r13
    410e:	ef 92       	push	r14
    4110:	ff 92       	push	r15
    4112:	0f 93       	push	r16
    4114:	1f 93       	push	r17
    4116:	cf 93       	push	r28
    4118:	df 93       	push	r29
    411a:	cd b7       	in	r28, 0x3d	; 61
    411c:	de b7       	in	r29, 0x3e	; 62
    411e:	ca 1b       	sub	r28, r26
    4120:	db 0b       	sbc	r29, r27
    4122:	0f b6       	in	r0, 0x3f	; 63
    4124:	f8 94       	cli
    4126:	de bf       	out	0x3e, r29	; 62
    4128:	0f be       	out	0x3f, r0	; 63
    412a:	cd bf       	out	0x3d, r28	; 61
    412c:	09 94       	ijmp

0000412e <__epilogue_restores__>:
    412e:	2a 88       	ldd	r2, Y+18	; 0x12
    4130:	39 88       	ldd	r3, Y+17	; 0x11
    4132:	48 88       	ldd	r4, Y+16	; 0x10
    4134:	5f 84       	ldd	r5, Y+15	; 0x0f
    4136:	6e 84       	ldd	r6, Y+14	; 0x0e
    4138:	7d 84       	ldd	r7, Y+13	; 0x0d
    413a:	8c 84       	ldd	r8, Y+12	; 0x0c
    413c:	9b 84       	ldd	r9, Y+11	; 0x0b
    413e:	aa 84       	ldd	r10, Y+10	; 0x0a
    4140:	b9 84       	ldd	r11, Y+9	; 0x09
    4142:	c8 84       	ldd	r12, Y+8	; 0x08
    4144:	df 80       	ldd	r13, Y+7	; 0x07
    4146:	ee 80       	ldd	r14, Y+6	; 0x06
    4148:	fd 80       	ldd	r15, Y+5	; 0x05
    414a:	0c 81       	ldd	r16, Y+4	; 0x04
    414c:	1b 81       	ldd	r17, Y+3	; 0x03
    414e:	aa 81       	ldd	r26, Y+2	; 0x02
    4150:	b9 81       	ldd	r27, Y+1	; 0x01
    4152:	ce 0f       	add	r28, r30
    4154:	d1 1d       	adc	r29, r1
    4156:	0f b6       	in	r0, 0x3f	; 63
    4158:	f8 94       	cli
    415a:	de bf       	out	0x3e, r29	; 62
    415c:	0f be       	out	0x3f, r0	; 63
    415e:	cd bf       	out	0x3d, r28	; 61
    4160:	ed 01       	movw	r28, r26
    4162:	08 95       	ret

00004164 <_exit>:
    4164:	f8 94       	cli

00004166 <__stop_program>:
    4166:	ff cf       	rjmp	.-2      	; 0x4166 <__stop_program>
